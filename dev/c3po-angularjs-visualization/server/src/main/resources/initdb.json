[
  {
    "@type": "d",
    "@rid": "#18:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 11/12/14.\n *\n * Execute database command so that it can create schemas or other objects.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, dbAdmin]\n *\n * Current AccessLevel R [owner]\n * as site level control is not done yet. TODO\n */\npublic class ExecUpdateCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        if(script == null || script.length() == 0) {\n            error = \"Content is empty\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            // make sure the script is executable.\n            String result = execUpdateCmd(data, false);\n            if(result.length() > 0) {\n                error = result;\n                inputMap.put(\"responseCode\", 500);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"script\", script);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExecUpdateCmdRule",
      "createDate": "2015-09-24T01:16:03.139"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.139",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.clinical3po.backendservices.util.Util;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/03/15.\n */\npublic class ExecQueryCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String script = (String)data.get(\"script\");\n        // make sure the script is executable.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try{\n            json = execQueryCmd(graph, data);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            inputMap.put(\"result\", e.getMessage());\n            inputMap.put(\"responseCode\", 500);\n            return false;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Not found\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExecQueryCmdRule",
      "createDate": "2015-09-24T01:16:03.162"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.162",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 12/12/14.\n *\n * Export only the event store for backup. There is no UI as of yet. TODO.\n *\n * Only owner can export the entire event store\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String path = (String)data.get(\"path\");\n                if(path != null) {\n                    // make sure that the Path exists.\n                    File file = new File(path);\n                    if (!file.exists()) {\n                        String result = exportEvent(path);\n                        inputMap.put(\"result\", result);\n                    } else {\n                        error = \"Please remove existing file manually\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"Path is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExpEventRule",
      "createDate": "2015-09-24T01:16:03.175"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.175",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/12/14.\n * Download events from event store. Should be a search interface so that you can enter search\n * criteria.\n *\n * TODO make it searchable\n *\n * AccessLevel R [user]\n *\n */\npublic class DownloadEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // everyone is allowed to download events performed by himself and replay it on\n        // other site build with the same framework.\n\n        // make sure that both from datetime and to datetime are in the past. And to datetime\n        // can be optional which means get everything after from datetime.\n\n        // Now let's build a criteria for db search.\n\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // only owner can generate events for common components without host.\n            data.remove(\"host\");\n        }\n        data.put(\"createUserId\", user.get(\"userId\"));\n        String json = DbService.getData(\"Event\", data);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n        } else {\n            error = \"No event can be found\";\n            inputMap.put(\"responseCode\", 400);\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.DownloadEventRule",
      "createDate": "2015-09-24T01:16:03.212"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.212",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 15/02/15.\n *\n * Export db into a json file and download to local hard drive for backup. This\n * is for the entire database.\n *\n * TODO complete it.\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpDbRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        // export into a json in memory\n        //\n        // send to client for download\n\n        // once it is done, then create an event for persistence\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExpDbRule",
      "createDate": "2015-09-24T01:16:03.227"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.227",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/03/15.\n *\n * This is the rule that create or update schema during new application initial setup.\n * Note that unlike update command we can try it out without commit, this one we cannot.\n *\n */\npublic class ExecSchemaCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"script\", script);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExecSchemaCmdRule",
      "createDate": "2015-09-24T01:16:03.239"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.239",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/03/15.\n */\npublic class ExecSchemaCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execSchemaCmd(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExecSchemaCmdEvRule",
      "createDate": "2015-09-24T01:16:03.249"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.249",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.clinical3po.backendservices.util.Util;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseImport;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/12/14.\n */\npublic abstract class AbstractDbRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractDbRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void impDb(Map<String, Object> data) {\n        String content = (String) data.get(\"content\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    logger.info(iText);\n                }\n            };\n            InputStream is = new ByteArrayInputStream(content.getBytes());\n            ODatabaseImport imp = new ODatabaseImport(graph.getRawGraph(), is, listener);\n            imp.importDatabase();\n            imp.close();\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String exportEvent(String path) {\n        final String[] result = new String[1];\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    result[0] = result[0] + iText;\n                }\n            };\n            ODatabaseExport export = new ODatabaseExport(graph.getRawGraph(), path, listener);\n            export.exportDatabase();\n            export.close();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return result[0];\n    }\n\n    protected String execUpdateCmd(Map<String, Object> data, boolean commit) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n            if(commit) {\n                graph.commit();\n            } else {\n                graph.rollback();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execSchemaCmd(Map<String, Object> data) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraphNoTx graph = ServiceLocator.getInstance().getGraphNoTx();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execQueryCmd(OrientGraph graph, Map<String, Object> data) {\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>((String)data.get(\"script\"));\n        List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n        return OJSONWriter.listToJSON(accesses, null);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.AbstractDbRule",
      "createDate": "2015-09-24T01:16:03.261"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.261",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.db;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/03/15.\n */\npublic class ExecUpdateCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execUpdateCmd(data, true);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.db.ExecUpdateCmdEvRule",
      "createDate": "2015-09-24T01:16:03.281"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.281",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class GetAllPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getAllPage(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.GetAllPageRule",
      "createDate": "2015-09-24T01:16:03.300"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.300",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.model.CacheObject;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel A\n *\n */\npublic class GetPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        CacheObject co = null;\n        try {\n            co = getPageById(graph, pageId);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(co != null) {\n            if(!matchEtag(inputMap, co)) {\n                inputMap.put(\"result\", co.getData());\n            }\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Page with id \" + pageId + \" cannot be found.\");\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.GetPageRule",
      "createDate": "2015-09-24T01:16:03.321"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.321",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.model.CacheObject;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class AddPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            CacheObject co = getPageById(graph, pageId);\n            if(co != null) {\n                error = \"Page with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.AddPageRule",
      "createDate": "2015-09-24T01:16:03.334"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.334",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n */\npublic class ImpPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.ImpPageEvRule",
      "createDate": "2015-09-24T01:16:03.344"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.344",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n */\npublic class DelPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        delPage(pageId);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.DelPageEvRule",
      "createDate": "2015-09-24T01:16:03.366"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.366",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/02/15.\n *\n * This is the rule that called by page:load plugin in maven-plugin repo.\n * It get all the page and return a map from id to content.\n *\n * accessLevel is owner by default.\n *\n */\npublic class GetPageMapRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getPageMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.GetPageMapRule",
      "createDate": "2015-09-24T01:16:03.388"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.388",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class UpdPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only update page from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            if(rid != null) {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex page = null;\n                try {\n                    page = DbService.getVertexByRid(graph, rid);\n                    if(page != null) {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = page.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"pageId\", data.get(\"pageId\"));\n                            eventData.put(\"content\", data.get(\"content\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"Page with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            } else {\n                error = \"@rid is required\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.UpdPageRule",
      "createDate": "2015-09-24T01:16:03.407"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.407",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n */\npublic class AddPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.AddPageEvRule",
      "createDate": "2015-09-24T01:16:03.442"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.442",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class ImpPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"host\", host);\n        eventData.put(\"pageId\", data.get(\"pageId\"));\n        eventData.put(\"content\", data.get(\"content\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(host != null) {\n            if (!host.equals(data.get(\"host\"))) {\n                error = \"User can only import page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            eventData.remove(\"host\");\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.ImpPageRule",
      "createDate": "2015-09-24T01:16:03.453"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.453",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class DelPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only delete page from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex page = DbService.getVertexByRid(graph, rid);\n                if(page != null) {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = page.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"pageId\", page.getProperty(\"pageId\"));\n                    }\n                } else {\n                    error = \"Page with @rid \" + rid + \" doesn't exist\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.DelPageRule",
      "createDate": "2015-09-24T01:16:03.506"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.506",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/24/2015.\n */\npublic class UpdPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.UpdPageEvRule",
      "createDate": "2015-09-24T01:16:03.536"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.536",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.hazelcast.util.executor.StripedRunnable;\nimport org.clinical3po.backendservices.model.CacheObject;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.clinical3po.backendservices.util.Util;\nimport com.orientechnologies.orient.core.Orient;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by w.ding on 10/24/2015.\n */\npublic abstract class AbstractPageRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractPageRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /*\n    static {\n        System.out.println(\"AbstractPageRule is called\");\n        ITopic<Map<String, Object>> page = ServiceLocator.getInstance().getHzInstance().getTopic( \"page\" );\n        page.addMessageListener(new PageMessageListenerImpl());\n    }\n\n    // As all the operations are in memory, use the same thread from the publisher.\n    private static class PageMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"pageId\"));\n            }\n        }\n    }\n    */\n\n    protected CacheObject getPageById(OrientGraph graph, String pageId) {\n        CacheObject co = null;\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        } else {\n            co = (CacheObject)cache.get(pageId);\n        }\n        if(co == null) {\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                String json = page.getRecord().toJSON();\n                co = new CacheObject(page.getProperty(\"@version\").toString(), json);\n                cache.put(pageId, co);\n            }\n        }\n        return co;\n    }\n\n    protected void addPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            cache.put(data.get(\"pageId\"), new CacheObject(page.getProperty(\"@version\").toString(), json));\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delPage(String pageId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex page = graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(pageId);\n        }\n    }\n\n    protected void updPage(Map<String, Object> data) {\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                page.setProperty(\"content\", data.get(\"content\"));\n                page.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", page);\n            }\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void impPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pageId = (String)data.get(\"pageId\");\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getAllPage(OrientGraph graph, String host) {\n        String json = null;\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n        List<ODocument> pages = graph.getRawGraph().command(query).execute();\n        json = OJSONWriter.listToJSON(pages, null);\n        return json;\n    }\n\n    protected String getPageMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        Map<String, String> map = new HashMap<String, String>();\n        for (Vertex page : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            map.put(page.getProperty(\"pageId\"), page.getProperty(\"content\"));\n        }\n        return mapper.writeValueAsString(map);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.AbstractPageRule",
      "createDate": "2015-09-24T01:16:03.587"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.587",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.clinical3po.backendservices.rule.client;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 31/01/15.\n * Now, we only support Browser, Android and iOS\n *\n * AccessLevel R [user]\n */\npublic class GetClientDropdownRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, Object> hostMap = (Map<String, Object>)ServiceLocator.getInstance().getHostMap().get(key);\n            List<String> supportDevices = (List)hostMap.get(\"supportDevices\");\n            for(String device: supportDevices) {\n                String client = key + \"@\" + device;\n                Map<String, String> map = new HashMap<String, String>();\n                map.put(\"label\", client);\n                map.put(\"value\", client);\n                list.add(map);\n            }\n        }\n        String clientDropdown = mapper.writeValueAsString(list);\n        if(clientDropdown != null) {\n            inputMap.put(\"result\", clientDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No client can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.client.GetClientDropdownRule",
      "createDate": "2015-09-24T01:16:03.618"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.618",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/02/15.\n *\n * Get all the access control list policies for access admin page.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin, ruleAdmin]\n *\n */\npublic class GetAllAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostAccesses = getAccesses(host);\n            if(hostAccesses != null) {\n                inputMap.put(\"result\", hostAccesses);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No access control can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.GetAllAccessRule",
      "createDate": "2015-09-24T01:16:03.657"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.657",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/01/15.\n */\npublic class DelAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.DelAccessEvRule",
      "createDate": "2015-09-24T01:16:03.682"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.682",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 30/01/15.\n *\n * There is no addAccess endpoint as access is pre-populated when rule is added or imported.\n * You can only update Access policy. Do I need to delete it? Or it will be deleted once rule\n * is deleted.\n *\n * TODO Delete access when rule is deleted and retire delAccess\n *\n */\npublic abstract class AbstractAccessRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractAccessRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            graph.begin();\n            OrientVertex access = (OrientVertex)graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                access.setProperty(\"accessLevel\", data.get(\"accessLevel\"));\n                List<String> clients = (List)data.get(\"clients\");\n                if(clients != null && clients.size() > 0) {\n                    access.setProperty(\"clients\", clients);\n                } else {\n                    access.removeProperty(\"clients\");\n                }\n                List<String> roles = (List)data.get(\"roles\");\n                if(roles != null && roles.size() > 0) {\n                    access.setProperty(\"roles\", roles);\n                } else {\n                    access.removeProperty(\"roles\");\n                }\n                List<String> users = (List)data.get(\"users\");\n                if(users != null && users.size() > 0) {\n                    access.setProperty(\"users\", users);\n                } else {\n                    access.removeProperty(\"users\");\n                }\n                access.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", access);\n            }\n            graph.commit();\n            json = access.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            accessMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"ruleClass\"), mapper.readValue(json,\n                new TypeReference<HashMap<String, Object>>() {\n                }));\n    }\n\n    protected void delAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex access = graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                graph.removeVertex(access);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected String getAccesses(String host) {\n        String sql = \"SELECT FROM Access\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host;\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(accesses, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.AbstractAccessRule",
      "createDate": "2015-09-24T01:16:03.695"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.695",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.rule.rule.AbstractRuleRule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/01/15.\n *\n * This is the endpoint that can update access control list.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin,ruleAdmin]\n *\n */\npublic class UpdAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to update access control\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if (!host.equals(data.get(\"host\"))) {\n                        error = \"You can only update access control for host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure the ruleClass contains the host.\n                        if (!ruleClass.contains(host)) {\n                            // you are not allowed to update access control to the rule as it is not owned by the host.\n                            error = \"ruleClass is not owned by the host: \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        }\n                    }\n                } else {\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                String accessLevel = (String)data.get(\"accessLevel\");\n                                eventData.put(\"accessLevel\", accessLevel);\n                                List clients = (List)data.get(\"clients\");\n                                roles = (List)data.get(\"roles\");\n                                List users = (List)data.get(\"users\");\n                                switch (accessLevel) {\n                                    case \"A\":\n                                        // Access by anyone, ignore clients, roles and users\n                                        break;\n                                    case \"N\":\n                                        // Not accessible, ignore clients, roles and users.\n                                        break;\n                                    case \"C\":\n                                        // client id is in the jwt token like userId and roles.\n                                        if(clients == null || clients.size() == 0 ) {\n                                            error = \"Clients are empty for client based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                        }\n                                        break;\n                                    case \"R\":\n                                        // role only\n                                        if(roles == null || roles.size() == 0 ) {\n                                            error = \"Roles are empty for role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"U\":\n                                        //user only\n                                        if(users == null || users.size() == 0 ) {\n                                            error = \"Users are empty for user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CR\":\n                                        // client and role\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0) {\n                                            error = \"Clients or roles are empty for client and role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"CU\":\n                                        // client and user\n                                        if(clients == null || clients.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients or users are empty for client and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"RU\":\n                                        // role and user\n                                        if(roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Roles or users are empty for role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CRU\":\n                                        // client, role and user\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients, roles or users are empty for client, role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    default:\n                                        logger.error(\"Invalid Access Level: \" + accessLevel);\n                                }\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.UpdAccessRule",
      "createDate": "2015-09-24T01:16:03.708"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.708",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.rule.rule.AbstractRuleRule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/01/15.\n *\n * This is used in access admin to delete an access control for endpoints.\n *\n * owner can delete access control for any endpoint and host admin and ruleAdmin\n * can delete endpoint for their own host.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class DelAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to delete rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete access control from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the access control exist or not.\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n                }\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.DelAccessRule",
      "createDate": "2015-09-24T01:16:03.752"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.752",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/01/15.\n */\npublic class UpdAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.UpdAccessEvRule",
      "createDate": "2015-09-24T01:16:03.778"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.778",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.access;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.rule.AbstractRuleRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/01/15.\n *\n * This is the rule to get access control list for a particular endpoint.\n *\n * AccessLevel A\n *\n */\npublic class GetAccessRule extends AbstractAccessRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetAccessRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map<String, Object> access = getAccessByRuleClass(ruleClass);\n        if(access != null) {\n            inputMap.put(\"result\", mapper.writeValueAsString(access));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No access control can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.GetAccessRule",
      "createDate": "2015-09-24T01:16:03.808"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.808",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/31/2015.\n */\npublic class UpdRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.UpdRoleEvRule",
      "createDate": "2015-09-24T01:16:03.829"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.829",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/31/2015.\n */\npublic class UpdRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update role for host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                try {\n                    Vertex role = DbService.getVertexByRid(graph, rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = role.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"roleId\", data.get(\"roleId\"));\n                            eventData.put(\"description\", data.get(\"description\"));\n                            eventData.put(\"host\", data.get(\"host\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        } else {\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = role.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"roleId\", data.get(\"roleId\"));\n                        eventData.put(\"description\", data.get(\"description\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        // this is the owner update the role. no host.\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.UpdRoleRule",
      "createDate": "2015-09-24T01:16:03.846"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.846",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class DelRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete role for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"roleId\", role.getProperty(\"roleId\"));\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.DelRoleRule",
      "createDate": "2015-09-24T01:16:03.860"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.860",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by w.ding on 10/31/2015.\n *\n * AccessLevel R [owner, admin]\n */\npublic class GetRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String hostRoles = getRoles(graph, host);\n            if(hostRoles != null) {\n                List<Map<String, Object>> roleList\n                        = mapper.readValue(hostRoles, new TypeReference<List<HashMap<String, Object>>>() {});\n                // get all the hosts\n                Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"roles\", roleList);\n                result.put(\"hosts\", hosts);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.GetRoleRule",
      "createDate": "2015-09-24T01:16:03.875"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.875",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/31/2015.\n */\npublic abstract class AbstractRoleRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractRoleRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRoleById(String roleId) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex role = (OrientVertex)graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                json = role.getRecord().toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected void addRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex role = graph.addVertex(\"class:Role\", data);\n            createUser.addEdge(\"Create\", role);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", data.get(\"roleId\"));\n            if(role != null) {\n                String host = (String)data.get(\"host\");\n                if(host != null && host.length() > 0) {\n                    if(!host.equals(role.getProperty(\"host\"))) role.setProperty(\"host\", host);\n                } else {\n                    role.removeProperty(\"host\");\n                }\n                String description = (String)data.get(\"description\");\n                if(description != null && !description.equals(role.getProperty(\"description\"))) {\n                    role.setProperty(\"description\", description);\n                }\n                role.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                updateUser.addEdge(\"Update\", role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delRole(String roleId) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                graph.removeVertex(role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getRoles(OrientGraph graph, String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getRoleDropdown(String host) throws Exception {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            if(roles.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: roles) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    String roleId = doc.field(\"roleId\");\n                    map.put(\"label\", roleId);\n                    map.put(\"value\", roleId);\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.AbstractRoleRule",
      "createDate": "2015-09-24T01:16:03.896"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.896",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class DelRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String roleId = (String)data.get(\"roleId\");\n        delRole(roleId);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.DelRoleEvRule",
      "createDate": "2015-09-24T01:16:03.922"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.922",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class AddRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add role from host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String json = getRoleById((String)data.get(\"roleId\"));\n                if(json != null) {\n                    error = \"Id for the role exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            String json = getRoleById((String)data.get(\"roleId\"));\n            if(json != null) {\n                error = \"Id for the role exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.AddRoleRule",
      "createDate": "2015-09-24T01:16:03.950"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.950",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class AddRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.AddRoleEvRule",
      "createDate": "2015-09-24T01:16:03.975"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.975",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.role;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/11/14.\n *\n * AccessLevel R [user]\n */\npublic class GetRoleDropdownRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostRoleDropdown = getRoleDropdown(host);\n        if(hostRoleDropdown != null) {\n            inputMap.put(\"result\", hostRoleDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No role can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.GetRoleDropdownRule",
      "createDate": "2015-09-24T01:16:03.994"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:03.994",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 9/24/2015.\n */\npublic class LogOutUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        logOut(data);\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.LogOutUserEvRule",
      "createDate": "2015-09-24T01:16:04.011"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.011",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class UpdRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdRoleEvRule",
      "createDate": "2015-09-24T01:16:04.031"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.031",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class DownUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteUser(data);\n        // TODO refresh hot user list and code user list\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.DownUserEvRule",
      "createDate": "2015-09-24T01:16:04.047"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.047",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n *\n * AccessLevel R [owner, admin, userAdmin]\n */\npublic class DelUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String userId = (String)data.get(\"userId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only delete user from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            if(rid == null && userId == null) {\n                error = \"rid or userId is required\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex deleteUser = null;\n                try {\n                    if(rid != null) {\n                        deleteUser = DbService.getVertexByRid(graph, rid);\n                        if(deleteUser == null) {\n                            error = \"User with rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        deleteUser = getUserByUserId(graph, userId);\n                        if(deleteUser == null) {\n                            error = \"User with userId \" + userId + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    }\n                    if(deleteUser != null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", deleteUser.getProperty(\"userId\").toString());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.DelUserRule",
      "createDate": "2015-09-24T01:16:04.058"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.058",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n *\n * Update role for a user.\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UpdRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String userHost = (String) user.get(\"host\");\n        if (userHost != null) {\n            // this is admin role to update user role\n            if(!userHost.equals(data.get(\"host\"))) {\n                error = \"admin can only update user role from host: \" + userHost;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // TODO make sure all the newly added roles belongs to the host\n            }\n        } else {\n            // this is owner update user role\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"userId\", data.get(\"userId\"));\n            eventData.put(\"roles\", data.get(\"roles\"));\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdRoleRule",
      "createDate": "2015-09-24T01:16:04.070"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.070",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.JwtUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by w.ding on 9/23/2015.\n */\npublic abstract class AbstractUserRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractUserRule.class);\n\n    public static final String EMAIL_PATTERN = \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\"\n        + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n    Pattern pattern = Pattern.compile(EMAIL_PATTERN);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    protected boolean isUserInDbByEmail(String email) {\n        boolean userInDb = false;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = graph.getVertexByKey(\"User.email\", email);\n            if(user != null) {\n                userInDb = true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return userInDb;\n    }\n\n    protected boolean isUserInDbByUserId(String userId) {\n        boolean userInDb = false;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = graph.getVertexByKey(\"User.userId\", userId);\n            if(user != null) {\n                userInDb = true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return userInDb;\n    }\n\n    protected Vertex getUserByUserId(OrientGraph graph, String userId) throws Exception {\n        return graph.getVertexByKey(\"User.userId\", userId);\n    }\n\n    protected Vertex getUserByEmail(OrientGraph graph, String email) throws Exception {\n        return graph.getVertexByKey(\"User.email\", email);\n    }\n\n    protected Vertex getCredential(OrientGraph graph, Vertex user) throws Exception {\n        return graph.getVertex(user.getProperty(\"credential\"));\n    }\n\n    protected Vertex addUser(Map<String, Object> data) throws Exception {\n        Vertex user = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            String password = (String)data.remove(\"password\");\n            OrientVertex credential = graph.addVertex(\"class:Credential\", \"password\", password);\n            data.put(\"credential\", credential);\n            user = graph.addVertex(\"class:User\", data);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return user;\n    }\n\n    protected Vertex addActivation(String userId) throws Exception {\n        Vertex activation = null;\n        String code = HashUtil.generateUUID();\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            activation = graph.addVertex(\"class:Activation\", \"userId\", userId, \"code\", code, \"createDate\", new Date());\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return activation;\n    }\n\n    protected void delActivation(String userId, String code) throws Exception {\n        Vertex activation = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            activation = graph.getVertexByKey(\"Activation.userId\", userId);\n            if(activation != null && code != null && code.equals(activation.getProperty(\"code\"))) {\n                activation.remove();\n            }\n            \n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delUser(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                graph.removeVertex(user.getProperty(\"credential\"));\n                graph.removeVertex(user);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updPassword(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            Vertex credential = user.getProperty(\"credential\");\n            if (credential != null) {\n                credential.setProperty(\"password\", data.get(\"password\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                user.setProperty(\"roles\", data.get(\"roles\"));\n                user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", user);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updLockByUserId(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                user.setProperty(\"locked\", data.get(\"locked\"));\n                user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", user);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updUser(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user =  graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                String firstName = (String)data.get(\"firstName\");\n                if(firstName != null && !firstName.equals(user.getProperty(\"firstName\"))) {\n                    user.setProperty(\"firstName\", firstName);\n                }\n                String lastName = (String)data.get(\"lastName\");\n                if(lastName != null && !lastName.equals(user.getProperty(\"lastName\"))) {\n                    user.setProperty(\"lastName\", lastName);\n                }\n                user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    // TODO need to know which clientId to remove only for that client or all?\n    protected void revokeRefreshToken(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                Vertex credential = user.getProperty(\"credential\");\n                if(credential != null) {\n                    credential.removeProperty(\"clientRefreshTokens\");\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n\n    protected void signIn(Map<String, Object> data) throws Exception {\n        String hashedRefreshToken = (String)data.get(\"hashedRefreshToken\");\n        if(hashedRefreshToken != null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                graph.begin();\n                Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        String clientId = (String)data.get(\"clientId\");\n                        // get hostRefreshTokens map here.\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // logged in before, check if logged in from the host.\n                            List<String> refreshTokens = (List)clientRefreshTokens.get(clientId);\n                            if(refreshTokens != null) {\n                                // max refresh tokens for user is 10. max 10 devices.\n                                if(refreshTokens.size() >= 10) {\n                                    refreshTokens.remove(0);\n                                }\n                                refreshTokens.add(hashedRefreshToken);\n                            } else {\n                                refreshTokens = new ArrayList<String>();\n                                refreshTokens.add(hashedRefreshToken);\n                                clientRefreshTokens.put(clientId, refreshTokens);\n                            }\n                            credential.setProperty(\"clientRefreshTokens\", clientRefreshTokens);\n                        } else {\n                            // never logged in, create the map.\n                            clientRefreshTokens = new HashMap<String, List<String>>();\n                            List<String> refreshTokens = new ArrayList<String>();\n                            refreshTokens.add(hashedRefreshToken);\n                            clientRefreshTokens.put(clientId, refreshTokens);\n                            credential.setProperty(\"clientRefreshTokens\", clientRefreshTokens);\n                        }\n                    }\n                }\n                graph.commit();\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                graph.rollback();\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        } else {\n            logger.debug(\"There is no hashedRefreshToken as user didn't select remember me. Do nothing\");\n        }\n    }\n\n    protected void logOut(Map<String, Object> data) throws Exception {\n        String refreshToken = (String)data.get(\"refreshToken\");\n        if(refreshToken != null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                graph.begin();\n                Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        // now remove the refresh token\n                        String clientId = (String)data.get(\"clientId\");\n                        logger.debug(\"logOut to remove refreshToken {} from clientId {}\" , refreshToken, clientId);\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // logged in before, check if logged in from the host.\n                            List<String> refreshTokens = (List)clientRefreshTokens.get(clientId);\n                            if(refreshTokens != null) {\n                                String hashedRefreshToken = HashUtil.md5(refreshToken);\n                                refreshTokens.remove(hashedRefreshToken);\n                            }\n                        } else {\n                            logger.error(\"There is no refresh tokens\");\n                        }\n                    }\n                }\n                graph.commit();\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                graph.rollback();\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        } else {\n            logger.debug(\"There is no hashedRefreshToken as user didn't pass in refresh token when logging out. Do nothing\");\n        }\n    }\n\n    boolean checkRefreshToken(Vertex credential, String clientId, String refreshToken) throws Exception {\n        boolean result = false;\n        if(credential != null && refreshToken != null) {\n            Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n            if(clientRefreshTokens != null) {\n                List<String> refreshTokens = (List)clientRefreshTokens.get(clientId);\n                if(refreshTokens != null) {\n                    String hashedRefreshToken = HashUtil.md5(refreshToken);\n                    for(String token: refreshTokens) {\n                        if(hashedRefreshToken.equals(token)) {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                logger.error(\"There is no refresh tokens\");\n            }\n        }\n        return result;\n    }\n\n    protected void upVoteUser(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex user = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.get(\"voteUserId\"));\n            if(user != null && voteUser != null) {\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) graph.removeEdge(edge);\n                }\n                voteUser.addEdge(\"UpVote\", user);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVoteUser(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex user = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.get(\"voteUserId\"));\n            if(user != null && voteUser != null) {\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) graph.removeEdge(edge);\n                }\n                voteUser.addEdge(\"DownVote\", user);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    // TODO refactor it to be generic. table name as part of the criteria? or a parameter?\n    protected long getTotalNumberUserFromDb(OrientGraph graph, Map<String, Object> criteria) throws Exception {\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM User\");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n        logger.debug(\"sql=\" + sql);\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n        List<ODocument> list = graph.getRawGraph().command(query).execute();\n        return list.get(0).field(\"count\");\n    }\n\n    protected String getUserFromDb(OrientGraph graph, Map<String, Object> criteria) throws Exception {\n        String json = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM User \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        logger.debug(\"sql=\" + sql);\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n        List<ODocument> list = graph.getRawGraph().command(query).execute();\n        if(list.size() > 0) {\n            json = OJSONWriter.listToJSON(list, null);\n        }\n        return json;\n    }\n\n    boolean isEmail(String userIdEmail) {\n        Matcher matcher = pattern.matcher(userIdEmail);\n        return matcher.matches();\n    }\n\n    String generateToken(Vertex user, String clientId) throws Exception {\n        Map<String, Object> jwtMap = new LinkedHashMap<String, Object>();\n        jwtMap.put(\"@rid\", user.getId().toString());\n        jwtMap.put(\"userId\", user.getProperty(\"userId\"));\n        jwtMap.put(\"clientId\", clientId);\n        jwtMap.put(\"roles\", user.getProperty(\"roles\"));\n        return JwtUtil.getJwt(jwtMap);\n    }\n\n    boolean checkPassword(OrientGraph graph, Vertex user, String inputPassword) throws Exception {\n        Vertex credential = user.getProperty(\"credential\");\n        //Vertex credential = getCredential(graph, user);\n        String storedPassword = (String) credential.getProperty(\"password\");\n        return HashUtil.validatePassword(inputPassword, storedPassword);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.AbstractUserRule",
      "createDate": "2015-09-24T01:16:04.088"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.088",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:45",
    "@version": 1,
    "@class": "Event",
    "eventId": 10046,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n * need to check both email and displayName uniqueness.\n *\n * AccessLevel A\n *\n */\npublic class SignUpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        String error = null;\n\n        // need to make sure that email and userId are unique.\n        // skip the cache and go to db directly?\n        if(isUserInDbByEmail(email)) {\n            error = \"The email address \" + email + \" has been signed up. Please login or recover your password.\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n\n            if(isUserInDbByUserId(userId)) {\n                error = \"The userId \" + userId + \" has been used by another user.\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // check if password and password_confirm are the same.\n                String password = (String) data.get(\"password\");\n                String passwordConfirm = (String)data.remove(\"passwordConfirm\");\n                // after schema validation in the backend password and password_confirm should not be empty.\n                if(!password.equals(passwordConfirm)) {\n                    error = \"password and password confirm are not the same\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    // replace the password with the hashed password.\n                    password = HashUtil.generateStorngPasswordHash(password);\n                    eventData.put(\"password\", password);\n                    // set default values here.\n                    eventData.put(\"karma\", 0);\n                    List<String> roles = new ArrayList<String>();\n                    roles.add(\"user\"); // default role for sign up users, more roles can be added later by admin\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"createDate\", new java.util.Date());\n\n                    // populate activation schema and it will be removed once the user activate the account.\n                    addActivation(userId);\n                    inputMap.put(\"result\", \"{\\\"result\\\": \\\"Pending Activation\\\"}\");\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.SignUpUserRule",
      "createDate": "2015-09-24T01:16:04.123"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.123",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/28/2015.\n */\npublic class UpdProfileEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdProfileEvRule",
      "createDate": "2015-09-24T01:16:04.150"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.150",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:47",
    "@version": 1,
    "@class": "Event",
    "eventId": 10048,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/28/2015.\n *\n * Get a single user profile\n *\n * AccessLevel R [user]\n *\n */\npublic class GetUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            if(rid != null) {\n                OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, rid);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with rid \" + rid + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(userId != null) {\n                OrientVertex user = (OrientVertex)getUserByUserId(graph, userId);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with userId \" + userId + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(email != null) {\n                OrientVertex user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with email \" + email + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else {\n                inputMap.put(\"result\", \"@rid or userId or email is required.\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.GetUserRule",
      "createDate": "2015-09-24T01:16:04.164"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.164",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:48",
    "@version": 1,
    "@class": "Event",
    "eventId": 10049,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class UnlockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UnlockUserEvRule",
      "createDate": "2015-09-24T01:16:04.190"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.190",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:49",
    "@version": 1,
    "@class": "Event",
    "eventId": 10050,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n *\n * Logged in user update its own password\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdPasswordRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                String password = (String) data.get(\"password\");\n                String newPassword = (String)data.get(\"newPassword\");\n                String passwordConfirm = (String)data.get(\"passwordConfirm\");\n\n                // check if the password match\n                boolean match = checkPassword(graph, updateUser, password);\n                if(match) {\n                    if(newPassword.equals(passwordConfirm)) {\n                        newPassword = HashUtil.generateStorngPasswordHash(newPassword);\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", updateUser.getProperty(\"userId\"));\n                        eventData.put(\"password\", newPassword);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                    } else {\n                        error = \"New password and password confirm are not the same.\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The old password is incorrect.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdPasswordRule",
      "createDate": "2015-09-24T01:16:04.217"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.217",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 26/05/15\n *\n * Although this rule update database, but it is only one time thing and we\n * don't want side effect in the future when replaying. so just do it in the\n * rule class not event rule class.\n *\n * AccessLevel A everyone.\n * .\n */\npublic class ActivateUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String userId = (String) data.get(\"userId\");\n        String code = (String)data.get(\"code\");\n        if(userId != null && code != null) {\n            delActivation(userId, code);\n            inputMap.put(\"result\", \"Thanks for activating your account.\");\n            return true;\n        } else {\n            inputMap.put(\"result\", \"userId and activation code are required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.ActivateUserRule",
      "createDate": "2015-09-24T01:16:04.239"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.239",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 9/24/2015.\n *\n * log out a user.\n *\n * AccessLevel R [user]\n *\n */\npublic class LogOutUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        // The assumption is that user should have a token when he/she click logout.\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        // check if the rid exists or not. if exists, then create event.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex vertex = DbService.getVertexByRid(graph, rid);\n            if(vertex != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", vertex.getProperty(\"userId\"));\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"refreshToken\", data.get(\"refreshToken\"));\n                eventData.put(\"logOutDate\", new java.util.Date());\n            } else {\n                error = \"User with @rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.LogOutUserRule",
      "createDate": "2015-09-24T01:16:04.250"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.250",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:52",
    "@version": 1,
    "@class": "Event",
    "eventId": 10053,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 19/09/14.\n *\n * get an access token with a refresh token\n *\n * AccessLevel R [user]\n */\npublic class RefreshTokenRule extends AbstractUserRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n\n        String refreshToken = (String)data.get(\"refreshToken\");\n        String userId = (String)data.get(\"userId\");\n        String clientId = (String)data.get(\"clientId\");\n        if(refreshToken == null || userId == null || clientId == null) {\n            inputMap.put(\"responseCode\", 401);\n            error = \"Refresh token or userId or clientId is missing\";\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex user = getUserByUserId(graph, userId);\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if (checkRefreshToken(credential, clientId, refreshToken)) {\n                        String jwt = generateToken(user, clientId);\n                        if (jwt != null) {\n                            Map<String, String> tokens = new HashMap<String, String>();\n                            tokens.put(\"accessToken\", jwt);\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                    } else {\n                        error = \"Invalid refresh token\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The userId \" + userId + \" has not been registered\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.RefreshTokenRule",
      "createDate": "2015-09-24T01:16:04.263"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.263",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:53",
    "@version": 1,
    "@class": "Event",
    "eventId": 10054,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n *\n * Logged in user updates its profile\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdProfileRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"updateDate\", new java.util.Date());\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdProfileRule",
      "createDate": "2015-09-24T01:16:04.274"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:54",
    "@version": 1,
    "@class": "Event",
    "eventId": 10055,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 20/01/15.\n */\npublic class RevokeRefreshTokenEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        revokeRefreshToken(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.RevokeRefreshTokenEvRule",
      "createDate": "2015-09-24T01:16:04.283"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.283",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:55",
    "@version": 1,
    "@class": "Event",
    "eventId": 10056,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class UpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteUser(data);\n        // TODO refresh hot user list and cold user list\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpUserEvRule",
      "createDate": "2015-09-24T01:16:04.291"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.291",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:56",
    "@version": 1,
    "@class": "Event",
    "eventId": 10057,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n */\npublic class LockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.LockUserEvRule",
      "createDate": "2015-09-24T01:16:04.300"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.300",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:57",
    "@version": 1,
    "@class": "Event",
    "eventId": 10058,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by w.ding on 26/10/14.\n *\n * Get all users in a list for user admin page. pagination is supported in db level\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class GetAllUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                inputMap.put(\"result\", \"You can only get all users from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            }\n        } else {\n            // retrieve everything as this is the owner\n            data.remove(\"host\"); // removed the host added by RestHandler.\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            long total = getTotalNumberUserFromDb(graph, data);\n            if(total > 0) {\n                String json = getUserFromDb(graph, data);\n                List<Map<String, Object>> users\n                        = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"total\", total);\n                result.put(\"users\", users);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No user can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.GetAllUserRule",
      "createDate": "2015-09-24T01:16:04.310"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.310",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:58",
    "@version": 1,
    "@class": "Event",
    "eventId": 10059,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/28/2015.\n */\npublic class SignUpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.SignUpUserEvRule",
      "createDate": "2015-09-24T01:16:04.325"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.325",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:59",
    "@version": 1,
    "@class": "Event",
    "eventId": 10060,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * lock a user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class LockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only lock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && (Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" has been locked already\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", true);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.LockUserRule",
      "createDate": "2015-09-24T01:16:04.338"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.338",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:60",
    "@version": 1,
    "@class": "Event",
    "eventId": 10061,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * Vote down a user\n *\n * AccessLevel R [user]\n *\n */\npublic class DownUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n            String voteUserId = (String)userMap.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.DownUserRule",
      "createDate": "2015-09-24T01:16:04.358"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.358",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:61",
    "@version": 1,
    "@class": "Event",
    "eventId": 10062,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * Vote up a user\n *\n * AccessLevel R [user]\n */\npublic class UpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String voteUserId = (String)userMap.get(\"userId\");\n        String userRid = (String)data.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpUserRule",
      "createDate": "2015-09-24T01:16:04.367"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.367",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:62",
    "@version": 1,
    "@class": "Event",
    "eventId": 10063,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/17/2015.\n *\n * Unlock a locked user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UnlockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only unlock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && !(Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" is not locked\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", false);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UnlockUserRule",
      "createDate": "2015-09-24T01:16:04.381"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.381",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:63",
    "@version": 1,
    "@class": "Event",
    "eventId": 10064,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 20/01/15.\n *\n * revoke refresh token if user's device is lost or forget to log out on public computer.\n *\n * user role can only revoke refresh token belongs to the current user.\n *\n * AccessLevel R [owner, admin, userAdmin, user]\n *\n */\npublic class RevokeRefreshTokenRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String password = (String)data.get(\"password\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)userMap.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = DbService.getVertexByRid(graph, rid);\n            if(user != null) {\n                // check password again\n                if(checkPassword(graph, user, password)) {\n                    // check if there are refresh tokens for the user\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // generate the event to remove it.\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", user.getProperty(\"userId\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                        }\n                    }\n                } else {\n                    error = \"Invalid password\";\n                    inputMap.put(\"responseCode\", 401);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.RevokeRefreshTokenRule",
      "createDate": "2015-09-24T01:16:04.393"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.393",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:64",
    "@version": 1,
    "@class": "Event",
    "eventId": 10065,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/28/2015.\n */\npublic class UpdPasswordEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPassword(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdPasswordEvRule",
      "createDate": "2015-09-24T01:16:04.402"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.402",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:65",
    "@version": 1,
    "@class": "Event",
    "eventId": 10066,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.user;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n */\npublic class DelUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.DelUserEvRule",
      "createDate": "2015-09-24T01:16:04.410"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.410",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:66",
    "@version": 1,
    "@class": "Event",
    "eventId": 10067,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class AddHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.AddHostEvRule",
      "createDate": "2015-09-24T01:16:04.424"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.424",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:67",
    "@version": 1,
    "@class": "Event",
    "eventId": 10068,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class DelHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.DelHostRule",
      "createDate": "2015-09-24T01:16:04.438"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.438",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:68",
    "@version": 1,
    "@class": "Event",
    "eventId": 10069,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic abstract class AbstractHostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(ServiceLocator.class);\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        hostMap.put((String)data.get(\"id\"), map);\n        writeHostMap(hostMap);\n    }\n\n    protected void updHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = (Map<String, Object>)hostMap.get(data.get(\"id\"));\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        writeHostMap(hostMap);\n    }\n\n    protected void delHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        hostMap.remove(data.get(\"id\"));\n        writeHostMap(hostMap);\n    }\n\n    private void writeHostMap(Map<String, Object> hostMap) {\n        try {\n            mapper.enable(SerializationFeature.INDENT_OUTPUT);\n            mapper.writeValue((new File(System.getProperty(\"user.home\") + \"/virtualhost.json\")), hostMap);\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.AbstractHostRule",
      "createDate": "2015-09-24T01:16:04.451"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.451",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:69",
    "@version": 1,
    "@class": "Event",
    "eventId": 10070,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n *\n * This is only give you a way to update virtualhost.json in users directory, it won't\n * inject the new host into the virtualhosthandler. The server must be restarted in order\n * to load the newly added site.\n * TODO dynamically add a new host into virtualhosthandler without shutdonw server.\n */\npublic class AddHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            error = \"Id for the host exists\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.AddHostRule",
      "createDate": "2015-09-24T01:16:04.461"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.461",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:70",
    "@version": 1,
    "@class": "Event",
    "eventId": 10071,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class UpdHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            // TODO update host into virtualhost.json here in the command or in event?\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.UpdHostRule",
      "createDate": "2015-09-24T01:16:04.476"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.476",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:71",
    "@version": 1,
    "@class": "Event",
    "eventId": 10072,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class UpdHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.UpdHostEvRule",
      "createDate": "2015-09-24T01:16:04.486"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.486",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:72",
    "@version": 1,
    "@class": "Event",
    "eventId": 10073,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 2015-01-19.\n *\n * AccessLevel R [user]\n */\npublic class GetHostDropdownRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", key);\n            map.put(\"value\", key);\n            list.add(map);\n        }\n        String hostDropdown = mapper.writeValueAsString(list);\n        if(hostDropdown != null) {\n            inputMap.put(\"result\", hostDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No host can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.GetHostDropdownRule",
      "createDate": "2015-09-24T01:16:04.497"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.497",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:73",
    "@version": 1,
    "@class": "Event",
    "eventId": 10074,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class GetAllHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // flatten the set to array with all the elements of the host.\n            List hosts = new ArrayList<Map<String, Object>>();\n            Map hostMap = ServiceLocator.getInstance().getHostMap();\n            Set<String> keys = hostMap.keySet();\n            for(String key : keys) {\n                Map valueMap = (Map<String, Object>)hostMap.get(key);\n                valueMap.put(\"id\", key);\n                hosts.add(valueMap);\n            }\n            inputMap.put(\"result\", mapper.writeValueAsString(hosts));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.GetAllHostRule",
      "createDate": "2015-09-24T01:16:04.513"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.513",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:74",
    "@version": 1,
    "@class": "Event",
    "eventId": 10075,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.host;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-19.\n */\npublic class DelHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.host.DelHostEvRule",
      "createDate": "2015-09-24T01:16:04.529"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.529",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:75",
    "@version": 1,
    "@class": "Event",
    "eventId": 10076,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.clinical3po.backendservices.rule.dependency;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 3/9/2015.\n */\npublic abstract class AbstractDependencyRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractDependencyRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addDependency(Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex sourceRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"sourceRuleClass\"));\n            Vertex destRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"destRuleClass\"));\n            Edge edge = sourceRule.addEdge(\"Depend\", destRule);\n            edge.setProperty(\"content\", data.get(\"content\"));\n            graph.commit();\n            //json = edge.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"pageId\"), json);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.dependency.AbstractDependencyRule",
      "createDate": "2015-09-24T01:16:04.542"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.542",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:76",
    "@version": 1,
    "@class": "Event",
    "eventId": 10077,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.clinical3po.backendservices.rule.dependency;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 3/9/2015.\n */\npublic class AddDependencyEvRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addDependency(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.dependency.AddDependencyEvRule",
      "createDate": "2015-09-24T01:16:04.559"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.559",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:77",
    "@version": 1,
    "@class": "Event",
    "eventId": 10078,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.clinical3po.backendservices.rule.dependency;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.page.AbstractPageRule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 3/9/2015.\n *\n * for admin or ruleAdmin, you can select dest only belongs to the host. However, if source\n * is not publishing the message, you get nothing.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddDependencyRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String source = (String)data.get(\"source\");\n        String dest = (String)data.get(\"desc\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex sourceRule = DbService.getVertexByRid(graph, source);\n            Vertex destRule = DbService.getVertexByRid(graph, dest);\n            if(sourceRule == null || destRule == null) {\n                error = \"source rule or destination rule doesn't exist\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                String sourceRuleClass = sourceRule.getProperty(\"ruleClass\");\n                String destRuleClass = destRule.getProperty(\"ruleClass\");\n                if(userHost != null) {\n                    if (!userHost.equals(host)) {\n                        error = \"You can only add dependency from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure dest ruleClass contains host.\n                        if(!destRuleClass.contains(host)) {\n                            error = \"Destination rule doesn't belong to the host \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        } else {\n                            // check if there is an depend edge from source to dest\n                            boolean hasEdge = false;\n                            for (Edge edge : (Iterable<Edge>) sourceRule.getEdges(Direction.OUT, \"Own\")) {\n                                if(edge.getVertex(Direction.IN) == destRule) hasEdge = true;\n                            }\n                            if(hasEdge) {\n                                error = \"There is depend edge between source rule and dest rule\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"sourceRuleClass\", sourceRuleClass);\n                                eventData.put(\"destRuleClass\", destRuleClass);\n                                eventData.put(\"content\", data.get(\"content\"));\n                                eventData.put(\"createDate\", new java.util.Date());\n                                eventData.put(\"createUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.dependency.AddDependencyRule",
      "createDate": "2015-09-24T01:16:04.589"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.589",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:78",
    "@version": 1,
    "@class": "Event",
    "eventId": 10079,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.util.Util;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by w.ding on 8/25/2015.\n *\n * You don't need to check if the form is in db or not as the form should be cached\n * in memory image already while starting the server.\n *\n * AccessLevel A\n *\n */\npublic class GetFormRule extends AbstractFormRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetFormRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String formId = (String)data.get(\"formId\");\n        String json = getFormById(inputMap);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Form with \" + formId + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.GetFormRule",
      "createDate": "2015-09-24T01:16:04.610"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.610",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:79",
    "@version": 1,
    "@class": "Event",
    "eventId": 10080,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Add a new form on the server. only owner can add form without host naming space.\n *\n * AccessLevel R [owner, admin, formAdmin]\n */\npublic class AddFormRule extends AbstractFormRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getFormById(inputMap);\n                    if(json != null) {\n                        error = \"Form with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getFormById(inputMap);\n            if(json != null) {\n                error = \"Form with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.AddFormRule",
      "createDate": "2015-09-24T01:16:04.631"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.631",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:80",
    "@version": 1,
    "@class": "Event",
    "eventId": 10081,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n *\n * owner can delete any form and admin or formAdmin can only delete forms belong to the host and name must\n * contain the host.\n *\n * AccessLevel R [owner, admin, formAdmin\n */\npublic class DelFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete form for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to delete form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        // check the version\n                        int storedVersion = (int)form.get(\"@version\");\n                        if (inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"formId\", form.get(\"formId\"));\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // check the version\n                int storedVersion = (int)form.get(\"@version\");\n                if (inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"formId\", form.get(\"formId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.DelFormRule",
      "createDate": "2015-09-24T01:16:04.662"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.662",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:81",
    "@version": 1,
    "@class": "Event",
    "eventId": 10082,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 9/4/2015.\n *\n * Overwrite if the form exists in db.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class ImpFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        Map<String, Object> dataMap = mapper.readValue((String)data.get(\"content\"), new TypeReference<HashMap<String, Object>>() {});\n        String formId = (String)dataMap.get(\"formId\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only import form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // Won't check if form exists or not here.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n\n                    eventData.put(\"formId\", formId);\n                    eventData.put(\"action\", dataMap.get(\"action\"));\n                    eventData.put(\"schema\", dataMap.get(\"schema\"));\n                    eventData.put(\"form\", dataMap.get(\"form\"));\n                    if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            // This is owner to import form, notice no host is passed in.\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n\n            eventData.put(\"formId\", formId);\n            eventData.put(\"action\", dataMap.get(\"action\"));\n            eventData.put(\"schema\", dataMap.get(\"schema\"));\n            eventData.put(\"form\", dataMap.get(\"form\"));\n            if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.ImpFormRule",
      "createDate": "2015-09-24T01:16:04.673"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.673",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:82",
    "@version": 1,
    "@class": "Event",
    "eventId": 10083,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/02/15.\n *\n * This is the rule that called by form loader.\n * It get all the forms and return a map from id to the content.\n *\n * accessLevel is owner by default.\n */\npublic class GetFormMapRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n\n        String forms = getFormMap(host);\n        if(forms != null) {\n            inputMap.put(\"result\", forms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.GetFormMapRule",
      "createDate": "2015-09-24T01:16:04.692"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.692",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:83",
    "@version": 1,
    "@class": "Event",
    "eventId": 10084,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 9/4/2015.\n *\n * Is there a way to verify that the memoryImage is in sync with db?\n * In that case, we don't need to reload from db every time this rule is executed.\n * What we can do is to load all forms in the beginning when server starts, and make\n * sure all the form updates are gone through these set of rules.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class GetAllFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostForms = getAllForm(host);\n        if(hostForms != null) {\n            inputMap.put(\"result\", hostForms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No form can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.GetAllFormRule",
      "createDate": "2015-09-24T01:16:04.703"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.703",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:84",
    "@version": 1,
    "@class": "Event",
    "eventId": 10085,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 9/4/2015.\n * when importing form, it might be existing or new. need to handle two situations.\n *\n */\npublic class ImpFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.ImpFormEvRule",
      "createDate": "2015-09-24T01:16:04.741"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.741",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:85",
    "@version": 1,
    "@class": "Event",
    "eventId": 10086,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/25/2015.\n */\npublic class AddFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.AddFormEvRule",
      "createDate": "2015-09-24T01:16:04.758"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.758",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:86",
    "@version": 1,
    "@class": "Event",
    "eventId": 10087,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/26/2015.\n */\npublic class DelFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        delForm(formId);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.DelFormEvRule",
      "createDate": "2015-09-24T01:16:04.782"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.782",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:87",
    "@version": 1,
    "@class": "Event",
    "eventId": 10088,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/29/2015.\n *\n */\npublic class UpdFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if (!formId.contains(host)) {\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // no need to remove host from eventData as owner update won't touch id and host.\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                int storedVersion = (int)form.get(\"@version\");\n                if(inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    // no need to remove host from eventData as owner update won't touch id and host.\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.UpdFormRule",
      "createDate": "2015-09-24T01:16:04.800"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.800",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:88",
    "@version": 1,
    "@class": "Event",
    "eventId": 10089,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.clinical3po.backendservices.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport net.engio.mbassy.bus.MBassador;\nimport net.engio.mbassy.listener.Handler;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by w.ding on 23/09/14.\n */\npublic abstract class AbstractFormRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFormRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    static {\n        MBassador<Map<String, Object>> ruleBus = ServiceLocator.getInstance().getEventBus(\"rule\");\n        ruleBus.subscribe(new RuleMessageListenerImpl());\n    }\n\n    private static class RuleMessageListenerImpl {\n        @Handler\n        public void onMessage(Map<String, Object> eventMap) throws Exception {\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // which form has a drop down of rules that depending on addRule, delRule and impRule?\n            // it is defined in subscribe data for this rule AbstractFormRule. remove the form from\n            // cache so that the dropdown list can be enriched again when the form is called next\n            // time. The reason I don't reload the form here is because there might be so many rules\n            // imported at the same time and you don't want to reload again and again. Lazy loading.\n            Map map = getRuleByRuleClass(this.getClass().getName());\n            Object isSubscriber = map.get(\"isSubscriber\");\n            if(isSubscriber != null && (boolean)isSubscriber) {\n                Map subMap = (Map)map.get(\"subMap\");\n                List<String> formIds = (List)subMap.get(\"rule\");\n                Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n                if(cache != null) {\n                    for(String formId: formIds) {\n                        cache.remove(formId);\n                    }\n                }\n            }\n\n            // find the vertex for rule org.clinical3po.backendservices.rule.rule.AbstractRuleRule and find edge\n            // Depend from Form vertex.\n\n            /*\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n            */\n        }\n    }\n\n    /*\n    static {\n        System.out.println(\"AbstractFromRule is called\");\n        ITopic<Map<String, Object>> rule = ServiceLocator.getInstance().getHzInstance().getTopic( \"rule\" );\n        rule.addMessageListener(new RuleMessageListenerImpl());\n\n        ITopic<Map<String, Object>> host = ServiceLocator.getInstance().getHzInstance().getTopic( \"host\" );\n        host.addMessageListener(new HostMessageListenerImpl());\n\n        ITopic<Map<String, Object>> role = ServiceLocator.getInstance().getHzInstance().getTopic( \"role\" );\n        role.addMessageListener(new RoleMessageListenerImpl());\n\n    }\n\n    private static class RuleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // do we know which form to be removed from cache? Need to define the dependency between form\n            // and rule\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class HostMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class RoleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n    */\n    protected String getFormById(Map<String, Object> inputMap) throws Exception {\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String json  = null;\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(formId);\n        }\n        if(json == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n                if(form != null) {\n                    json = form.getRecord().toJSON();\n                    if(formId.endsWith(\"_d\")) {\n                        // enrich the form with dynamicOptions for drop down values\n                        json = enrichForm(json, inputMap);\n                    }\n                    cache.put(formId, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return json;\n    }\n\n    protected String enrichForm(String json, Map<String, Object> inputMap)  throws Exception {\n    \tMap<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Pattern pattern = Pattern.compile(\"\\\\[\\\\{\\\"label\\\":\\\"dynamic\\\",([^]]+)\\\\}\\\\]\");\n        Matcher m = pattern.matcher(json);\n        StringBuffer sb = new StringBuffer(json.length());\n        while (m.find()) {\n            String text = m.group(1);\n            // get the values from rules.\n            logger.debug(\"text = {}\", text);\n            text = text.substring(8);\n            logger.debug(\"text = {}\", text);\n            Map<String, Object> jsonMap = mapper.readValue(text,\n                    new TypeReference<HashMap<String, Object>>() {});\n            jsonMap.put(\"payload\", inputMap.get(\"payload\"));\n            // inject host into data here.\n            Map<String, Object> dataMap = new HashMap<String, Object>();\n            dataMap.put(\"host\", data.get(\"host\"));\n            jsonMap.put(\"data\", dataMap);\n            RuleEngine.getInstance().executeRule(Util.getCommandRuleId(jsonMap), jsonMap);\n            String result = (String)jsonMap.get(\"result\");\n            logger.debug(\"result = {}\", result);\n            if(result != null && result.length() > 0) {\n                m.appendReplacement(sb, Matcher.quoteReplacement(result));\n            } else {\n                m.appendReplacement(sb, Matcher.quoteReplacement(\"[ ]\"));\n            }\n        }\n        m.appendTail(sb);\n        logger.debug(\"form = {}\", sb.toString());\n        return sb.toString();\n    }\n\n    protected String addForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema in rule class\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected void delForm(String formId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex form = graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.removeProperty(\"schema\");\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n                graph.removeVertex(form);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n    }\n\n    protected String updForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                form.setProperty(\"action\", data.get(\"action\"));\n                form.setProperty(\"schema\", data.get(\"schema\"));\n                form.setProperty(\"form\", data.get(\"form\"));\n                form.setProperty(\"modelData\", data.get(\"modelData\"));\n                form.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", form);\n\n                // According to action in the list, populate validation schema.\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.setProperty(\"schema\", data.get(\"schema\"));\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String impForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                graph.removeVertex(form);\n            }\n\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema.\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String getAllForm(String host) {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> forms = graph.getRawGraph().command(query).execute();\n            if(forms != null && forms.size() > 0) {\n                json = OJSONWriter.listToJSON(forms, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getFormMap(String host) throws Exception {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String, Map<String, Object>> formMap = new HashMap<String, Map<String, Object>>();\n            for (Vertex v : (Iterable<Vertex>) graph.command(\n                    new OCommandSQL(sql)).execute()) {\n                Map<String, Object> contentMap = new HashMap<String, Object>();\n                contentMap.put(\"action\", v.getProperty(\"action\"));\n                contentMap.put(\"schema\", v.getProperty(\"schema\"));\n                contentMap.put(\"form\", v.getProperty(\"form\"));\n                contentMap.put(\"modelData\", v.getProperty(\"modelData\"));\n                formMap.put(v.getProperty(\"formId\"), contentMap);\n            }\n            json = mapper.writeValueAsString(formMap);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.AbstractFormRule",
      "createDate": "2015-09-24T01:16:04.821"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.821",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:89",
    "@version": 1,
    "@class": "Event",
    "eventId": 10090,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.form;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 8/26/2015.\n */\npublic class UpdFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.UpdFormEvRule",
      "createDate": "2015-09-24T01:16:04.850"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.850",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:90",
    "@version": 1,
    "@class": "Event",
    "eventId": 10091,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.access.AbstractAccessRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n */\npublic class AddTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformRequestEvRule",
      "createDate": "2015-09-24T01:16:04.858"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.858",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:91",
    "@version": 1,
    "@class": "Event",
    "eventId": 10092,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n *\n * Get all request transform rules for a ruleClass\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformRequestRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformRequestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> reqTransforms = (List) ruleMap.get(\"reqTransforms\");\n            if(reqTransforms != null && reqTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(reqTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.GetTransformRequestRule",
      "createDate": "2015-09-24T01:16:04.887"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.887",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:92",
    "@version": 1,
    "@class": "Event",
    "eventId": 10093,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformResponseRule",
      "createDate": "2015-09-24T01:16:04.901"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.901",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:93",
    "@version": 1,
    "@class": "Event",
    "eventId": 10094,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n */\npublic class AddTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformResponseEvRule",
      "createDate": "2015-09-24T01:16:04.910"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.910",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:94",
    "@version": 1,
    "@class": "Event",
    "eventId": 10095,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformResponseRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformResponseRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> resTransforms = (List) ruleMap.get(\"resTransforms\");\n            if(resTransforms != null && resTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(resTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.GetTransformResponseRule",
      "createDate": "2015-09-24T01:16:04.925"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.925",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:95",
    "@version": 1,
    "@class": "Event",
    "eventId": 10096,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformRequestRule",
      "createDate": "2015-09-24T01:16:04.950"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.950",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:96",
    "@version": 1,
    "@class": "Event",
    "eventId": 10097,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n *\n * This is a transform rule that support Beta testing on production. When you change the API that is backward\n * compatible, you can test it on your local and then deploy it on production for testing. For certain loyal users\n * or employees, you can give them a role called betaTester in their profile. This rule will be applied before\n * API end point is reached, so that the end point can be version 1 which has no betaTester role and version 2 which\n * has betaTester role. In normal case, it will route to rule class HelloWorld.class or HelloWorld1.class if the user\n * is betaTester. Once beta testing is done, you can route all traffic to HelloWorld1.class. Later on, you want to change\n * the rule again you can create HelloWorld2.class and route betaTester to it. This can goes on and on.\n *\n * Please note: Beta testing is only for backward compatible changes. If not, one should have two versions of clients\n * to connect to two different API class in different packages.\n *\n * When set up this rule, you should have two entries in transformData beta and production to point to the right\n * class name of the rules.\n *\n * For example, for HelloWorldRule and HelloWorld_1Rule, we have the following setup in the request transformer.\n * {\n *   \"production\": \"helloWorld\",\n *   \"beta\": \"helloWorld_1\"\n * }\n *\n * AccessLevel N as it is internal.\n *\n */\npublic class BetaTestRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(BetaTestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> transformData = (Map<String, Object>)inputMap.remove(\"transformData\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            List roles = (List) user.get(\"roles\");\n            if (roles.contains(\"betaTester\")) {\n                inputMap.put(\"name\", transformData.get(\"beta\"));\n            } else {\n                inputMap.put(\"name\", transformData.get(\"production\"));\n            }\n        } else {\n            inputMap.put(\"name\", transformData.get(\"production\"));\n        }\n        return true;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.BetaTestRule",
      "createDate": "2015-09-24T01:16:04.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:04.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:97",
    "@version": 1,
    "@class": "Event",
    "eventId": 10098,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 16/02/15.\n */\npublic abstract class AbstractTransformRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractTransformRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            // transformData is a json string, convert it to map.\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformRequest\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void addTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformResponse\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n    /*\n    public List<Map<String, Object>> getTransformRequest(String ruleClass) {\n        String sql = \"SELECT FROM TransformRequest WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformRequest\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformRequest\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformRequest\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n\n    public List<Map<String, Object>> getTransformResponse(String ruleClass) {\n        String sql = \"SELECT FROM TransformResponse WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformResponse\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformResponse\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformResponse\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n    */\n    protected String getTransformRequestBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getTransformResponseBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AbstractTransformRule",
      "createDate": "2015-09-24T01:16:05.011"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.011",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:98",
    "@version": 1,
    "@class": "Event",
    "eventId": 10099,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformResponseRule",
      "createDate": "2015-09-24T01:16:05.049"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.049",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:99",
    "@version": 1,
    "@class": "Event",
    "eventId": 10100,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n */\npublic class DelTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformResponseEvRule",
      "createDate": "2015-09-24T01:16:05.058"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.058",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:100",
    "@version": 1,
    "@class": "Event",
    "eventId": 10101,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.role.AbstractRoleRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformRequestRule",
      "createDate": "2015-09-24T01:16:05.076"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.076",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:101",
    "@version": 1,
    "@class": "Event",
    "eventId": 10102,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformRequestRule",
      "createDate": "2015-09-24T01:16:05.098"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.098",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:102",
    "@version": 1,
    "@class": "Event",
    "eventId": 10103,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n */\npublic class UpdTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformRequestEvRule",
      "createDate": "2015-09-24T01:16:05.116"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.116",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:103",
    "@version": 1,
    "@class": "Event",
    "eventId": 10104,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n */\npublic class UpdTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformResponseEvRule",
      "createDate": "2015-09-24T01:16:05.126"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.126",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:104",
    "@version": 1,
    "@class": "Event",
    "eventId": 10105,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformResponseRule",
      "createDate": "2015-09-24T01:16:05.142"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.142",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:105",
    "@version": 1,
    "@class": "Event",
    "eventId": 10106,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.transform;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n */\npublic class DelTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformRequestEvRule",
      "createDate": "2015-09-24T01:16:05.179"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.179",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:106",
    "@version": 1,
    "@class": "Event",
    "eventId": 10107,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.log;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 2015-01-20.\n *\n * This is a handler to log all the client side and server side exceptions. Also, it\n * can be used to instrument performance logging or any other events happening on\n * the client side. The data payload is a flexible structure and it is up to you\n * to define what and when to be logged.\n *\n * AccessLevel A\n *\n */\npublic class LogEventRule extends AbstractRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String userId = null;\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            userId = (String)user.get(\"userId\");\n        }\n\n        // TODO send notifications for serious events or exceptions.\n        // Some events might trigger a pager\n        // Some events might trigger a email\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        if(userId != null) eventData.put(\"createUserId\", userId);\n        eventData.put(\"ipAddress\", inputMap.get(\"ipAddress\"));\n\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.log.LogEventRule",
      "createDate": "2015-09-24T01:16:05.226"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.226",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.log;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.db.AbstractDbRule;\n\nimport java.util.Map;\n\n/**\n * Created by admin on 2015-01-20.\n */\npublic class LogEventEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        // TODO Dispatch the event to all the internal subscribers.\n        // This will be called when replay the events and be careful regarding to the side effects.\n\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.log.LogEventEvRule",
      "createDate": "2015-09-24T01:16:05.249"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.249",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:108",
    "@version": 1,
    "@class": "Event",
    "eventId": 10109,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by Nicholas Azar on 3/19/2015.\n */\n\npublic class GetMenuComponentRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenuComponentByHost(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"Errrr...\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetMenuComponentRule",
      "createDate": "2015-09-24T01:16:05.257"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.257",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:109",
    "@version": 1,
    "@class": "Event",
    "eventId": 10110,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class DelMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.DelMenuItemEvRule",
      "createDate": "2015-09-24T01:16:05.266"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.266",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:110",
    "@version": 1,
    "@class": "Event",
    "eventId": 10111,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class UpdMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuEvRule",
      "createDate": "2015-09-24T01:16:05.282"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:111",
    "@version": 1,
    "@class": "Event",
    "eventId": 10112,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class UpdMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuItemEvRule",
      "createDate": "2015-09-24T01:16:05.293"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.293",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:112",
    "@version": 1,
    "@class": "Event",
    "eventId": 10113,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n * AccessLevel R [owner, admin, menuAdmin]\n */\npublic class AddMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only add menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                String json = getMenuItem(graph, (String) data.get(\"menuItemId\"));\n                if(json != null) {\n                    error = \"MenuItem for the label exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    List<String> menuItems = (List)data.remove(\"menuItems\");\n                    // convert to menuItemIds from rids\n                    if(menuItems != null && menuItems.size() > 0) {\n                        List<String> addMenuItems = new ArrayList();\n                        for(String rid: menuItems) {\n                            Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                            addMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        data.put(\"addMenuItems\", addMenuItems);\n                    }\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    if(host == null) {\n                        eventData.remove(\"host\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuItemRule",
      "createDate": "2015-09-24T01:16:05.310"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.310",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:113",
    "@version": 1,
    "@class": "Event",
    "eventId": 10114,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class AddMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuEvRule",
      "createDate": "2015-09-24T01:16:05.340"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.340",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:114",
    "@version": 1,
    "@class": "Event",
    "eventId": 10115,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by Nicholas Azar on 3/25/2015.\n */\npublic class AddMenuComponentRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String menuComponentId = (String)data.get(\"menuComponentId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenuComponentByHost(graph, host);\n            if(json != null) {\n                error = \"Menu component with the same host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuComponentRule",
      "createDate": "2015-09-24T01:16:05.374"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.374",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:115",
    "@version": 1,
    "@class": "Event",
    "eventId": 10116,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.clinical3po.backendservices.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 10/27/2015.\n * The menuMap.cache has three type of keys. host, label and @rid\n */\npublic abstract class AbstractMenuRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractMenuRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String rid) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"rid\");\n        }\n        if(json == null) {\n            json = DbService.getJsonByRid(rid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(rid, json);\n            }\n        }\n        return json;\n    }\n\n    protected void delMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                // cascade deleting all menuItems belong to the host only.\n                for (Vertex menuItem : graph.getVerticesOfClass(\"MenuItem\")) {\n                    if(host.equals(menuItem.getProperty(\"host\"))) {\n                        graph.removeVertex(menuItem);\n                    }\n                }\n                graph.removeVertex(menu);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        Map<String, Object> menuMap = ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(host);\n        }\n    }\n\n    protected void delMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\",data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                graph.removeVertex(menuItem);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        // no need to refresh cache as there is no reference to this menuItem anywhere.\n    }\n\n    protected String addMenu( Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex menu = graph.addVertex(\"class:Menu\", \"host\", data.get(\"host\"), \"createDate\", data.get(\"createDate\"));\n            List<String> addMenuItems = (List<String>)data.get(\"addMenuItems\");\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menu.addEdge(\"Own\", menuItem);\n                }\n            }\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"createUserId\"));\n            user.addEdge(\"Create\", menu);\n            graph.commit();\n            json = menu.getRecord().toJSON(\"fetchPlan:menuItems:2\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            menuMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"host\"), json);\n        return json;\n    }\n\n    protected void addMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> addMenuItems = (List<String>)data.remove(\"addMenuItems\");\n            OrientVertex menuItem = graph.addVertex(\"class:MenuItem\", data);\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex childMenuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menuItem.addEdge(\"Own\", childMenuItem);\n                }\n            }\n            user.addEdge(\"Create\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getMenu(OrientGraph graph, String host) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(host);\n        }\n        if(json == null) {\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                json = ((OrientVertex)menu).getRecord().toJSON(\"rid,fetchPlan:out_Own.in_Create:-2 out_Own:2\");\n            }\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(host, json);\n            }\n        }\n        return json;\n    }\n\n    protected String getMenuItem(OrientGraph graph, String menuItemId) throws Exception {\n        String json = null;\n        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n        if(menuItem != null) {\n            json = ((OrientVertex)menuItem).getRecord().toJSON();\n        }\n        return json;\n    }\n\n    protected String getAllMenu(OrientGraph graph, String host) {\n        String json = null;\n        String jsonMenu = null;\n        String jsonMenuItem = null;\n        String sqlMenu = \"select from Menu\";\n        if(host != null) {\n            sqlMenu += \" where host = ?\";\n        }\n        String sqlMenuItem = \"select from MenuItem\";\n        // assumption here is menuItems are not empty.\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlMenuItem);\n        List<ODocument> menuItems = graph.getRawGraph().command(query).execute(host);\n        if(menuItems.size() > 0) {\n            jsonMenuItem = OJSONWriter.listToJSON(menuItems, null);\n            json = \"{\\\"menuItems\\\":\" + jsonMenuItem;\n        }\n\n        query = new OSQLSynchQuery<>(sqlMenu);\n        List<ODocument> menus = graph.getRawGraph().command(query).execute(host);\n        if(menus.size() > 0) {\n            jsonMenu = OJSONWriter.listToJSON(menus, null);\n            json += \", \\\"menus\\\":\" + jsonMenu + \"}\";\n        } else {\n            json += \"}\";\n        }\n        return json;\n    }\n\n    protected void updMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menu.addEdge(\"Own\", menuItem);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menu.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(menuItem)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                menu.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menu);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cache item in order to reload the menu.\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"host\"));\n        }\n    }\n\n    protected String getMenuItemMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuItem\";\n        if(host != null) {\n            sql += \" WHERE host = ? OR host IS NULL\";\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuItem : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", (String)menuItem.getProperty(\"menuItemId\"));\n            map.put(\"value\", menuItem.getId().toString());\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n\n    protected void updMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", (String)data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                // handle addMenuItems and delMenuItems\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menuItem.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menuItem.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                String path = (String)data.get(\"path\");\n                if(path != null && !path.equals(menuItem.getProperty(\"path\"))) {\n                    menuItem.setProperty(\"path\", path);\n                }\n                String tpl = (String)data.get(\"tpl\");\n                if(tpl != null && !tpl.equals(menuItem.getProperty(\"tpl\"))) {\n                    menuItem.setProperty(\"tpl\", tpl);\n                }\n                String ctrl = (String)data.get(\"ctrl\");\n                if(ctrl != null && !ctrl.equals(menuItem.getProperty(\"ctrl\"))) {\n                    menuItem.setProperty(\"ctrl\", ctrl);\n                }\n                Boolean left = (Boolean)data.get(\"left\");\n                if(left != null && !left.equals(menuItem.getProperty(\"left\"))) {\n                    menuItem.setProperty(\"left\", left);\n                }\n                List roles = (List)data.get(\"roles\");\n                if(roles != null) {\n                    menuItem.setProperty(\"roles\", roles);\n                } else {\n                    menuItem.setProperty(\"roles\", new ArrayList());\n                }\n                menuItem.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n    protected String getMenuComponentByHost(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuComponent\";\n        if(host != null) {\n            sql += \" WHERE host = ?\";\n        } else {\n            sql += \" WHERE host is null\"; // Host == null will be default menu component\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuComponent : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute(host)) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"menuComponentId\", menuComponent.getId().toString());\n            map.put(\"host\", (String)menuComponent.getProperty(\"host\"));\n            map.put(\"source\", (String)menuComponent.getProperty(\"source\"));\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AbstractMenuRule",
      "createDate": "2015-09-24T01:16:05.402"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.402",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:116",
    "@version": 1,
    "@class": "Event",
    "eventId": 10117,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 13/11/14.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetMenuItemMapRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menuItems = null;\n        try {\n            menuItems = getMenuItemMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menuItems != null) {\n            inputMap.put(\"result\", menuItems);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menuItem can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetMenuItemMapRule",
      "createDate": "2015-09-24T01:16:05.430"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.430",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:117",
    "@version": 1,
    "@class": "Event",
    "eventId": 10118,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 10/29/2015.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menuItem.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex vertex = DbService.getVertexByRid(graph, menuItemRid);\n                                if(vertex != null) {\n                                    inputMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) menuItem.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));\n                        eventData.put(\"path\", data.get(\"path\"));\n                        eventData.put(\"tpl\", data.get(\"tpl\"));\n                        eventData.put(\"ctrl\", data.get(\"ctrl\"));\n                        eventData.put(\"left\", data.get(\"left\"));\n                        eventData.put(\"roles\", data.get(\"roles\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuItemRule",
      "createDate": "2015-09-24T01:16:05.449"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.449",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:118",
    "@version": 1,
    "@class": "Event",
    "eventId": 10119,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 29/10/14.\n *\n * Get All menus and menuItems for menu admin interface.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetAllMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menus = null;\n        try {\n            menus = getAllMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menus != null) {\n            inputMap.put(\"result\", menus);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menu can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetAllMenuRule",
      "createDate": "2015-09-24T01:16:05.489"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.489",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:119",
    "@version": 1,
    "@class": "Event",
    "eventId": 10120,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n *\n * AccessLevel R [owner]\n *\n */\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", menu.getProperty(\"host\"));// unique key\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.DelMenuRule",
      "createDate": "2015-09-24T01:16:05.499"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.499",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:120",
    "@version": 1,
    "@class": "Event",
    "eventId": 10121,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 23/09/14.\n *\n * AccessLevel A\n */\npublic class GetMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Menu for host \" + host + \" cannot be found.\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetMenuRule",
      "createDate": "2015-09-24T01:16:05.512"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.512",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:121",
    "@version": 1,
    "@class": "Event",
    "eventId": 10122,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n *\n * This is the REST API endpoint to add a menu for a host.\n *\n * AccessLevel R [owner]\n */\npublic class AddMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenu(graph, (String)data.get(\"host\"));\n            if(json != null) {\n                error = \"Menu for the host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                // make sure all menuItems exist if there are any.\n                List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                if(menuItems != null && menuItems.size() > 0) {\n                    List<String> addMenuItems = new ArrayList<String>();\n                    for(String menuItemRid: menuItems) {\n                        Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                        if(menuItem == null) {\n                            error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                            break;\n                        } else {\n                            addMenuItems.add((String)menuItem.getProperty(\"menuItemId\"));\n                        }\n                    }\n                    eventData.put(\"addMenuItems\", addMenuItems);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuRule",
      "createDate": "2015-09-24T01:16:05.525"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.525",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:122",
    "@version": 1,
    "@class": "Event",
    "eventId": 10123,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 10/29/2015.\n *\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menu.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                                if(menuItem != null) {\n                                    inputMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex menuItem : (Iterable<Vertex>) menu.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuRule",
      "createDate": "2015-09-24T01:16:05.538"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.538",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class AddMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuItemEvRule",
      "createDate": "2015-09-24T01:16:05.569"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.569",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:124",
    "@version": 1,
    "@class": "Event",
    "eventId": 10125,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n */\npublic class DelMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.DelMenuEvRule",
      "createDate": "2015-09-24T01:16:05.594"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.594",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:125",
    "@version": 1,
    "@class": "Event",
    "eventId": 10126,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.menu;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/29/2015.\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class DelMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // find out if other menu or menuItem owns this menuItem\n                    if(DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\") || DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\")) {\n                        error = \"MenuItem is referenced by other entities\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));  // unique key\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.DelMenuItemRule",
      "createDate": "2015-09-24T01:16:05.608"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.608",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:126",
    "@version": 1,
    "@class": "Event",
    "eventId": 10127,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdEtagRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableEtag\", data.get(\"enableEtag\"));\n            String cacheControl = (String)data.get(\"cacheControl\");\n            if(cacheControl != null) {\n                eventData.put(\"cacheControl\", cacheControl);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdEtagRule",
      "createDate": "2015-09-24T01:16:05.637"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.637",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/03/15.\n */\npublic class UpdCorsEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updCors(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdCorsEvRule",
      "createDate": "2015-09-24T01:16:05.656"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.656",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/03/15.\n */\npublic class UpdSubscriberEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSubscriber(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdSubscriberEvRule",
      "createDate": "2015-09-24T01:16:05.671"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.671",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:129",
    "@version": 1,
    "@class": "Event",
    "eventId": 10130,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by hus5 on 3/10/2015.\n */\npublic class UpdPublisherEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPublisher(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdPublisherEvRule",
      "createDate": "2015-09-24T01:16:05.686"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.685",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:130",
    "@version": 1,
    "@class": "Event",
    "eventId": 10131,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/03/15.\n */\npublic class UpdEtagEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updEtag(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdEtagEvRule",
      "createDate": "2015-09-24T01:16:05.695"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.695",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:131",
    "@version": 1,
    "@class": "Event",
    "eventId": 10132,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 22/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdSchemaRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            String schema = (String)data.get(\"schema\");\n            if(schema != null) {\n                eventData.put(\"schema\", schema);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdSchemaRule",
      "createDate": "2015-09-24T01:16:05.705"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.705",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:132",
    "@version": 1,
    "@class": "Event",
    "eventId": 10133,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport net.engio.mbassy.bus.MBassador;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 07/11/14.\n */\npublic class DelRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.DelRuleEvRule",
      "createDate": "2015-09-24T01:16:05.730"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.730",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:133",
    "@version": 1,
    "@class": "Event",
    "eventId": 10134,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/03/15.\n */\npublic class UpdSubscriberRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventMap);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isSubscriber\", data.get(\"isSubscriber\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdSubscriberRule",
      "createDate": "2015-09-24T01:16:05.760"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.760",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:134",
    "@version": 1,
    "@class": "Event",
    "eventId": 10135,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRules = getRules(host);\n            if(hostRules != null) {\n                inputMap.put(\"result\", hostRules);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.GetRuleRule",
      "createDate": "2015-09-24T01:16:05.769"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.769",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:135",
    "@version": 1,
    "@class": "Event",
    "eventId": 10136,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 22/03/15.\n */\npublic class UpdSchemaEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSchema(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdSchemaEvRule",
      "createDate": "2015-09-24T01:16:05.779"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.779",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:136",
    "@version": 1,
    "@class": "Event",
    "eventId": 10137,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 08/10/14.\n *\n * This is the rule that allow user to add brand new rule from rule admin interface. It will fail\n * if the rule exist in database. And normally, you only construct simple rules on the fly. Most of\n * the time, you should use impRuleRule instead.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow is done\n *\n */\npublic class AddRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to add rule as it is not belong to the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the rule exists or not\n                    Map<String, Object> ruleMap = getRuleByRuleClass(ruleClass);\n                    if(ruleMap != null) {\n                        error = \"ruleClass for the rule exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            // check if the rule exists or not.\n            Map<String, Object> ruleMap = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n            if(ruleMap != null) {\n                error = \"ruleClass for the rule exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // This is owner to import rule, notice that no host is passed in.\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.AddRuleRule",
      "createDate": "2015-09-24T01:16:05.796"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.796",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:137",
    "@version": 1,
    "@class": "Event",
    "eventId": 10138,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 08/10/14.\n */\npublic class AddRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.AddRuleEvRule",
      "createDate": "2015-09-24T01:16:05.830"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.830",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:138",
    "@version": 1,
    "@class": "Event",
    "eventId": 10139,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdCorsRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableCors\", data.get(\"enableCors\"));\n            String corsHosts = (String)data.get(\"corsHosts\");\n            if(corsHosts != null && corsHosts.length() > 0) {\n                eventData.put(\"corsHosts\", corsHosts);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdCorsRule",
      "createDate": "2015-09-24T01:16:05.845"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.845",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:139",
    "@version": 1,
    "@class": "Event",
    "eventId": 10140,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 3/10/2015.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdPublisherRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isPublisher\", data.get(\"isPublisher\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdPublisherRule",
      "createDate": "2015-09-24T01:16:05.856"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.856",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:140",
    "@version": 1,
    "@class": "Event",
    "eventId": 10141,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner]\n */\npublic class UpdRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"You can only update rule for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // make sure the ruleClass contains the host.\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to update rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                }\n            }\n        }\n        if(error == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int storedVersion = rule.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", ruleClass);\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdRuleRule",
      "createDate": "2015-09-24T01:16:05.868"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.868",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:141",
    "@version": 1,
    "@class": "Event",
    "eventId": 10142,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 08/10/14.\n */\npublic class UpdRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.UpdRuleEvRule",
      "createDate": "2015-09-24T01:16:05.884"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.884",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:142",
    "@version": 1,
    "@class": "Event",
    "eventId": 10143,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 07/11/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow approval is done.\n *\n */\npublic class DelRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete rule for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // check if the ruleClass contains the host.\n                    if(host != null && !ruleClass.contains(host)) {\n                        // you are not allowed to delete access control to the rule as it is not belong to the host.\n                        error = \"ruleClass is not owned by the host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        int storedVersion = rule.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", ruleClass);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.DelRuleRule",
      "createDate": "2015-09-24T01:16:05.894"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.894",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:143",
    "@version": 1,
    "@class": "Event",
    "eventId": 10144,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.RuleEngine;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 30/12/14.\n */\npublic class ImpRuleEvRule extends AbstractRuleRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(ImpRuleEvRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.ImpRuleEvRule",
      "createDate": "2015-09-24T01:16:05.914"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.914",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:144",
    "@version": 1,
    "@class": "Event",
    "eventId": 10145,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.rule;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 31/01/15.\n *\n * AccessLevel R [user]\n *\n */\npublic class GetRuleDropdownRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            String host = (String) user.get(\"host\");\n            String hostRuleDropdown = getRuleDropdown(host);\n            if(hostRuleDropdown != null) {\n                inputMap.put(\"result\", hostRuleDropdown);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.rule.GetRuleDropdownRule",
      "createDate": "2015-09-24T01:16:05.927"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.927",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:145",
    "@version": 1,
    "@class": "Event",
    "eventId": 10146,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * Moved from blog, news and forum as this can be share by other category.\n *\n */\npublic abstract class BranchRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(BranchRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String branchId = (String) data.get(branchType + \"Id\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add \" + branchType + \" from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                ODocument branch = getODocumentByHostId(graph, branchType + \"HostIdIdx\", host, branchId);\n                if(branch != null) {\n                    error = \"Id \" + branchId + \" exists on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // make sure parent exists if it is not empty.\n                    List<String> parentRids = (List<String>)data.get(\"in_Own\");\n                    if(parentRids != null && parentRids.size() == 1) {\n                        Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                        if(parent == null) {\n                            error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            // convert parent from @rid to id\n                            List in_Own = new ArrayList();\n                            in_Own.add(parent.getProperty(id));\n                            eventData.put(\"in_Own\", in_Own);\n                        }\n                    }\n                    if(error == null) {\n                        // make sure all children exist if there are any.\n                        // and make sure all children have empty parent.\n                        List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                        if(childrenRids != null && childrenRids.size() > 0) {\n                            List<String> out_Own = new ArrayList<String>();\n                            for(String childRid: childrenRids) {\n                                if(childRid != null) {\n                                    if(parentRids!= null && childRid.equals(parentRids.get(0))) {\n                                        error = \"Parent shows up in the Children list\";\n                                        inputMap.put(\"responseCode\", 400);\n                                        break;\n                                    }\n                                    Vertex child = DbService.getVertexByRid(graph, childRid);\n                                    if(child == null) {\n                                        error = \"Child with @rid \" + childRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        out_Own.add((String)child.getProperty(branchType + \"Id\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"out_Own\", out_Own);\n                        }\n                    }\n                    if(error == null) {\n                        eventMap.put(id, HashUtil.generateUUID());\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean addBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void addBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String host = (String)data.get(\"host\");\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_Own\");\n            List<String> childrenIds = (List<String>)data.remove(\"out_Own\");\n            OrientVertex branch = graph.addVertex(\"class:\" + className, data);\n            createUser.addEdge(\"Create\", branch);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBranchByHostId(graph, branchType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"Own\", branch);\n                }\n            }\n            // children\n            if(childrenIds != null) {\n                for(String childId: childrenIds) {\n                    OrientVertex child = getBranchByHostId(graph, branchType, host, childId);\n                    if(child != null) {\n                        branch.addEdge(\"Own\", child);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                error = \"You can only delete \" + branchType + \" from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    // Do no check if there are any children for the branch. Just delete it. The edge\n                    // will be deleted automatically and children can be linked to other branch later.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    String id = branchType + \"Id\";\n                    eventData.put(id, branch.getProperty(id));\n                } else {\n                    error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void delBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex branch = getBranchByHostId(graph, branchType, (String)data.get(\"host\"), (String)data.get(id));\n            if(branch != null) {\n                graph.removeVertex(branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + branchType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // make sure parent exists if it is not empty.\n                    List parentRids = (List)data.get(\"in_Own\");\n                    if(parentRids != null) {\n                        if(rid.equals(parentRids.get(0))) {\n                            inputMap.put(\"result\", \"parent @rid is the same as current @rid\");\n                            inputMap.put(\"responseCode\", 400);\n                            return false;\n                        }\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.IN, \"Own\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(id);\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(id));\n                            }\n                        } else {\n                            inputMap.put(\"result\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n                    // make sure all children exist if there are any.\n                    // and make sure all children have empty parent.\n                    List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                    if(childrenRids != null && childrenRids.size() > 0) {\n                        List<String> childrenIds = new ArrayList<String>();\n                        Set<String> inputChildren = new HashSet<String>();\n                        for(String childRid: childrenRids) {\n                            if(parentRids != null && childRid.equals(parentRids.get(0))) {\n                                inputMap.put(\"result\", \"Parent shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            if(childRid.equals(rid)) {\n                                inputMap.put(\"result\", \"Current object shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            Vertex child = DbService.getVertexByRid(graph, childRid);\n                            if(child == null) {\n                                inputMap.put(\"result\", \"Child with @rid \" + childRid + \" cannot be found\");\n                                inputMap.put(\"responseCode\", 404);\n                                return false;\n                            } else {\n                                inputChildren.add((String)child.getProperty(id));\n                            }\n                        }\n                        Set<String> storedChildren = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.OUT, \"Own\")) {\n                            storedChildren.add((String)vertex.getProperty(id));\n                        }\n\n                        Set<String> addChildren = new HashSet<String>(inputChildren);\n                        Set<String> delChildren = new HashSet<String>(storedChildren);\n                        addChildren.removeAll(storedChildren);\n                        delChildren.removeAll(inputChildren);\n\n                        if(addChildren.size() > 0) eventData.put(\"addChildren\", addChildren);\n                        if(delChildren.size() > 0) eventData.put(\"delChildren\", delChildren);\n                    }\n                } else {\n                    inputMap.put(\"result\",  \"@rid \" + rid + \" cannot be found\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // update the branch tree as one of branch has changed.\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache != null) {\n            cache.remove(host + branchType);\n        }\n        return true;\n    }\n\n    public boolean updBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updBranchDb(branchType, data);\n        return true;\n    }\n\n    public OrientVertex getBranchByHostId(OrientGraph graph, String branchType, String host, String id) {\n        OrientVertex branch = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n        OCompositeKey key = new OCompositeKey(host, id);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            branch = graph.getVertex(oid.getRecord());\n        }\n        return branch;\n    }\n\n    protected void updBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = getBranchByHostId(graph, branchType, host, (String)data.get(id));\n            if (branch != null) {\n                if(data.get(\"description\") != null) {\n                    branch.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    branch.removeProperty(\"description\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    branch.setProperty(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    branch.removeProperty(\"attributes\");\n                }\n                branch.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // parent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.IN, \"Own\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, branchType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"Own\", branch);\n                    }\n                }\n\n                // handle addChildren and delChildren\n                Set<String> addChildren = (Set)data.get(\"addChildren\");\n                if(addChildren != null) {\n                    for(String childId: addChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        branch.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delChildren = (Set)data.get(\"delChildren\");\n                if(delChildren != null) {\n                    for(String childId: delChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                // updateUser\n                updateUser.addEdge(\"Update\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean downBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, branch.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean downBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void downBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(branch != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean upBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, branch.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean upBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void upBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(branch != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getBranchTree(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String json = null;\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"treeCache\", cache);\n        } else {\n            json = (String)cache.get(host + branchType);\n        }\n        if(json == null) {\n            json = getBranchTreeDb(branchType, host);\n            cache.put(host + branchType, json);\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBranchTreeDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? and in_Own IS NULL ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, \"rid,fetchPlan:[*]in_Create:-2 [*]out_Create:-2 [*]in_Update:-2 [*]out_Update:-2 [*]out_Own:-1\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranch(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Object userHost = user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            inputMap.put(\"result\", \"You can only get \" + branchType + \" from host: \" + host);\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        } else {\n            String docs = getBranchDb(branchType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBranchDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY createDate\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranchDropdown (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            String docs = getBranchDropdownDb(branchType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBranchDropdownDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"label\", (String)doc.field(branchType + \"Id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.BranchRule",
      "createDate": "2015-09-24T01:16:05.956"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:05.956",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:147",
    "@version": 1,
    "@class": "Event",
    "eventId": 10148,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 3/6/2015.\n *\n * Blog user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and blogAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"blog\", objects);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelPostRule",
      "createDate": "2015-09-24T01:16:19.369"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.369",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:148",
    "@version": 1,
    "@class": "Event",
    "eventId": 10149,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 10/8/2015.\n *\n * This is for blog admin screen.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"blog\", objects);\n    }\n\n    /*\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> blogMap = ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // determine if the current user can post.\n        boolean allowPost = false;\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blowAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            refreshCache(host);\n            newList = (List)blogMap.get(host + \"newList\");\n        }\n        // get the page from cache.\n        long total = newList.size();\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(total > 0) {\n            List<Map<String, Object>> blogs = new ArrayList<Map<String, Object>>();\n\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, newList.size()); i++) {\n                String rid = newList.get(i);\n                String json = getJsonByRid(rid);\n                Map<String, Object> blog = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // convert tags value from map to string.\n                Map tags = (Map)blog.get(\"tags\");\n                if(tags != null && tags.size() > 0) {\n                    String s = String.join(\",\", tags.keySet());\n                    blog.put(\"tags\", s);\n                }\n\n                blogs.add(blog);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"blogs\", blogs);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no blog available. but still need to return allowPost and hosts\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n    */\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogRule",
      "createDate": "2015-09-24T01:16:19.383"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.382",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:149",
    "@version": 1,
    "@class": "Event",
    "eventId": 10150,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * get drown down list of blogs for blog admin\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogDropdownRule",
      "createDate": "2015-09-24T01:16:19.391"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.391",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:150",
    "@version": 1,
    "@class": "Event",
    "eventId": 10151,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 10/10/2015.\n */\npublic class UpdBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdBlogEvRule",
      "createDate": "2015-09-24T01:16:19.399"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.399",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:151",
    "@version": 1,
    "@class": "Event",
    "eventId": 10152,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 10/10/2015.\n * Update node of blog tree\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class UpdBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdBlogRule",
      "createDate": "2015-09-24T01:16:19.418"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.418",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:152",
    "@version": 1,
    "@class": "Event",
    "eventId": 10153,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 10/8/2015.\n */\npublic class DelBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelBlogEvRule",
      "createDate": "2015-09-24T01:16:19.432"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.432",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:153",
    "@version": 1,
    "@class": "Event",
    "eventId": 10154,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * This is to get blogs displayed on the blog home page.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogTreeRule",
      "createDate": "2015-09-24T01:16:19.446"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.446",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:154",
    "@version": 1,
    "@class": "Event",
    "eventId": 10155,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\n\n/**\n * Created by w.ding on 08/10/14.\n */\npublic abstract class AbstractBlogRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    /*\n    protected String getJsonByRid(String blogRid) {\n        // try to get it from cache first.\n        String json = null;\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"blogRid\");\n        }\n        if(json == null) {\n            // TODO warning to increase cache if this happens.\n            json = DbService.getJsonByRid(blogRid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    blogMap.put(\"cache\", cache);\n                }\n                cache.put(blogRid, json);\n            }\n        }\n        return json;\n    }\n\n    protected Map<String, Object> getBlogByHostTitle(String host, String title) {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostTitleIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, title);\n            OIdentifiable blog = (OIdentifiable) hostTitleIdx.get(key);\n            if (blog != null) {\n                String json = ((ODocument) blog.getRecord()).toJSON();\n                map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    protected ODocument addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"id\", data.get(\"id\"));\n            if(data.get(\"description\") != null) blog.field(\"description\", data.get(\"description\"));\n            if(data.get(\"attributes\") != null) blog.field(\"attributes\", data.get(\"attributes\"));\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) blogHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    blog.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(blog);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(blog);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) blogHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", blog);\n                        child.save();\n                    }\n                }\n                blog.field(\"children\", children);\n            }\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected void addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = addBlogDb(data);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            newList.add(blog.field(\"@rid\").toString());\n            blogMap.put(host + \"newList\", newList);\n        } else {\n            newList.add(0, blog.field(\"@rid\").toString());  // add the head of the list.\n        }\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected ODocument addBlogDb(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n\n        try {\n            db.begin();\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"title\", data.get(\"title\"));\n            blog.field(\"source\", data.get(\"source\"));\n            blog.field(\"summary\", data.get(\"summary\"));\n            blog.field(\"content\", data.get(\"content\"));\n            blog.field(\"rank\", 0);\n            java.util.Date d = new java.util.Date();\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"updateDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            blog.save();\n            db.commit();\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = blog.field(\"host\");\n            String className = blog.field(\"@class\");\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                if (oIdentifiable != null) {\n                    tag = (ODocument) oIdentifiable.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(blog.field(\"@rid\"));\n                    tag.field(\"links\", links);\n                    tag.save();\n                    db.commit();\n                }\n                tagMap.put(tagName, tag.field(\"@rid\"));\n            }\n            blog.field(\"tags\", tagMap);\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected boolean delBlog(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) blogHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument blog = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = blog.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(blog);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = blog.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                blog.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected void delBlogUpdCache(String blogRid, String host) throws Exception {\n        delBlogDb(blogRid);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(blogRid);\n        }\n        // update newList\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList != null) {\n            newList.remove(blogRid);\n        }\n\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected boolean delBlogDb(String blogRid) throws Exception {\n        boolean result = false;\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            // remove the tags\n            Map<String, Object> tagMap = blog.field(\"tags\");\n            if(tagMap != null) {\n                Iterator it = tagMap.entrySet().iterator();\n                while(it.hasNext()) {\n                    Map.Entry pairs = (Map.Entry)it.next();\n                    ODocument tag = db.load((ORecordId)pairs.getValue());\n                    Set links = tag.field(\"links\");\n                    links.remove(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                }\n            }\n            db.delete(new ORecordId(blogRid));\n            db.commit();\n            result = true;\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected int delBlogByHost(String host) throws Exception {\n        int recordsUpdated = 0;\n        String sql = \"DELETE FROM Blog WHERE host = '\" + host + \"'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            recordsUpdated = db.command(new OCommandSQL(sql)).execute();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        if(recordsUpdated > 0) {\n            // clean the cache if any.\n            Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n            blogMap.remove(host + \"newList\");\n            // cached blog will be remove the cache automatically.\n        }\n        return recordsUpdated;\n    }\n    */\n    /*\n    protected void updBlog(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = updBlogDb(data, userRid, userId);\n        String blogRid = blog.field(\"@rid\").toString();\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blogRid, blog.toJSON());\n\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            blogMap.put(host + \"newList\", newList);\n            newList.add(blogRid);\n        } else {\n            newList.remove(blogRid);\n            newList.add(0, blogRid);\n        }\n        // TODO build hot list\n\n    }\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    protected long getTotalNumberBlogFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Blog\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<Map<String, Object>> searchBlogFromDb(Map<String, Object> criteria) {\n        List<Map<String,Object>> list = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> result = db.command(query).execute();\n            if(result.size() > 0) {\n                String json = OJSONWriter.listToJSON(result, null);\n                list = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return list;\n    }\n    protected List<ODocument> searchBlogDb(Map<String, Object> criteria) {\n        List<ODocument> blogs = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            blogs = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return blogs;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> blogs = searchBlogDb(criteria);\n        List<String> newList = new ArrayList<String>();\n        // build new map/list\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument blog : blogs) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n            }\n            newList.add(blog.field(\"@rid\").toString());\n        }\n        blogMap.put(host + \"newList\", newList);\n\n        // TODO build hot list\n        return blogMap;\n    }\n\n    protected ODocument upVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(new ORecordId(userRid));\n                    blog.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(new ORecordId(userRid));\n                }\n                // remove the user from downUsers if it is there\n                // blindly remove\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument downVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(new ORecordId(userRid));\n                    blog.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(new ORecordId(userRid));\n                }\n                // remove the user from upUsers if it is there\n                // blindly remove\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AbstractBlogRule",
      "createDate": "2015-09-24T01:16:19.493"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.493",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:155",
    "@version": 1,
    "@class": "Event",
    "eventId": 10156,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 10/8/2015.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class DelBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelBlogRule",
      "createDate": "2015-09-24T01:16:19.539"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.539",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:156",
    "@version": 1,
    "@class": "Event",
    "eventId": 10157,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 3/6/2015.\n * Update post in a blog\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n * blogUser can only update his or her blog\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdPostRule",
      "createDate": "2015-09-24T01:16:19.566"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.566",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:157",
    "@version": 1,
    "@class": "Event",
    "eventId": 10158,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 11/10/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class DownBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DownBlogRule",
      "createDate": "2015-09-24T01:16:19.594"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.594",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:158",
    "@version": 1,
    "@class": "Event",
    "eventId": 10159,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 11/10/14.\n */\npublic class DownBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DownBlogEvRule",
      "createDate": "2015-09-24T01:16:19.641"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.641",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:159",
    "@version": 1,
    "@class": "Event",
    "eventId": 10160,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 11/10/14.\n */\npublic class UpBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpBlogEvRule",
      "createDate": "2015-09-24T01:16:19.657"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.657",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:160",
    "@version": 1,
    "@class": "Event",
    "eventId": 10161,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 08/10/14.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class AddBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddBlogRule",
      "createDate": "2015-09-24T01:16:19.685"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.685",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:161",
    "@version": 1,
    "@class": "Event",
    "eventId": 10162,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogPostRule",
      "createDate": "2015-09-24T01:16:19.695"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.695",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:162",
    "@version": 1,
    "@class": "Event",
    "eventId": 10163,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelPostEvRule",
      "createDate": "2015-09-24T01:16:19.703"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.703",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:163",
    "@version": 1,
    "@class": "Event",
    "eventId": 10164,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 08/10/14.\n */\npublic class AddBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddBlogEvRule",
      "createDate": "2015-09-24T01:16:19.732"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.732",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:164",
    "@version": 1,
    "@class": "Event",
    "eventId": 10165,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddPostEvRule",
      "createDate": "2015-09-24T01:16:19.760"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.760",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:165",
    "@version": 1,
    "@class": "Event",
    "eventId": 10166,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 3/6/2015.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdPostEvRule",
      "createDate": "2015-09-24T01:16:19.780"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.780",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:166",
    "@version": 1,
    "@class": "Event",
    "eventId": 10167,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 11/10/14.\n * This is to up vote blog by user\n *\n * AccessLevel R [user]\n *\n */\npublic class UpBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpBlogRule",
      "createDate": "2015-09-24T01:16:19.802"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.802",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:167",
    "@version": 1,
    "@class": "Event",
    "eventId": 10168,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.blog;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddPostRule",
      "createDate": "2015-09-24T01:16:19.819"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.819",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:168",
    "@version": 1,
    "@class": "Event",
    "eventId": 10169,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News as\n * they share similar traits. Since ids are generated and there is no need to check\n * uniqueness. Just make sure parent and children are checked and converted to ids.\n *\n */\npublic abstract class AbstractBfnRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractBfnRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentId = (String) data.get(\"parentId\");\n        String parentRid = null;\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, parentId);\n            if(parent == null) {\n                error = \"Id \" + parentId + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                parentRid = parent.getId().toString();\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                eventData.put(\"postId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the number of posts has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            // update listcache as a new post is added.\n            ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"listCache\");\n            if(listCache != null) {\n                listCache.remove(parentRid + \"createDate\");\n            }\n            return true;\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex post = graph.addVertex(\"class:Post\", data);\n            createUser.addEdge(\"Create\", post);\n            // parent\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, (String) data.get(\"parentId\"));\n            if(parent != null) {\n                parent.addEdge(\"HasPost\", post);\n            }\n            // tag\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            for(String tagId: inputTags) {\n                Vertex tag = null;\n                // get the tag is it exists\n                OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                logger.debug(\"tagHostIdIdx = \" + tagHostIdIdx);\n                OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                logger.debug(\"tagKey =\" + tagKey);\n                OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = graph.getVertex(tagOid.getRecord());\n                    post.addEdge(\"HasTag\", tag);\n                } else {\n                    tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                    createUser.addEdge(\"Create\", tag);\n                    post.addEdge(\"HasTag\", tag);\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                // check if the post has comment, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(post.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Post has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the number of posts has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void delPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                // TODO cascade deleting all comments belong to the post.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                graph.removeVertex(post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // update post itself and we might have a new api to move post from one parent to another.\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"postId\", post.getProperty(\"postId\"));\n                eventData.put(\"title\", data.get(\"title\"));\n                eventData.put(\"source\", data.get(\"source\"));\n                eventData.put(\"summary\", data.get(\"summary\"));\n                eventData.put(\"content\", data.get(\"content\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                // tags\n                Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n                Set<String> storedTags = new HashSet<String>();\n                for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                    storedTags.add((String)vertex.getProperty(\"tagId\"));\n                }\n\n                Set<String> addTags = new HashSet<String>(inputTags);\n                Set<String> delTags = new HashSet<String>(storedTags);\n                addTags.removeAll(storedTags);\n                delTags.removeAll(inputTags);\n\n                if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the last update time has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            return true;\n        }\n    }\n\n    public boolean updPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void updPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                updateUser.addEdge(\"Update\", post);\n                // fields\n                if(data.get(\"title\") != null) {\n                    post.setProperty(\"title\", data.get(\"title\"));\n                } else {\n                    post.removeProperty(\"name\");\n                }\n                if(data.get(\"source\") != null) {\n                    post.setProperty(\"source\", data.get(\"source\"));\n                } else {\n                    post.removeProperty(\"source\");\n                }\n                if(data.get(\"summary\") != null) {\n                    post.setProperty(\"summary\", data.get(\"summary\"));\n                } else {\n                    post.removeProperty(\"summary\");\n                }\n                if(data.get(\"content\") != null) {\n                    post.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    post.removeProperty(\"content\");\n                }\n                post.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex)oid.getRecord();\n                            post.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            post.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex) oid.getRecord();\n                            for (Edge edge : (Iterable<Edge>) post.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getBfnPost(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(rid == null) {\n            inputMap.put(\"result\", \"@rid is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowPost = false;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blogAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        // TODO support the following lists: recent, popular, controversial\n        // Get the page from cache.\n        List<String> list = null;\n        Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            bfnMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(rid + sortedBy);\n        }\n\n        ConcurrentMap<Object, Object> postCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"postCache\");\n        if(postCache == null) {\n            postCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            bfnMap.put(\"postCache\", postCache);\n        }\n\n        if(list == null) {\n            // get the list for db\n            list = new ArrayList<String>();\n            String json = getBfnPostDb(rid, sortedBy);\n            if(json != null) {\n                // convert json to list of maps.\n                List<Map<String, Object>> posts = mapper.readValue(json,\n                        new TypeReference<ArrayList<HashMap<String, Object>>>() {\n                        });\n                for(Map<String, Object> post: posts) {\n                    String postRid = (String)post.get(\"rid\");\n                    list.add(postRid);\n                    post.remove(\"@rid\");\n                    post.remove(\"@type\");\n                    post.remove(\"@version\");\n                    post.remove(\"@fieldTypes\");\n                    postCache.put(postRid, post);\n                }\n            }\n            listCache.put(rid + sortedBy, list);\n        }\n        long total = list.size();\n        if(total > 0) {\n            List<Map<String, Object>> posts = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String postRid = list.get(i);\n                Map<String, Object> post = (Map<String, Object>)postCache.get(postRid);\n                posts.add(post);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"posts\", posts);\n            result.put(\"allowPost\", allowPost);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected String getBfnPostDb(String rid, String sortedBy) {\n        String json = null;\n        // TODO there is a bug that prepared query only support one parameter. That is why sortedBy is concat into the sql.\n        String sql = \"select @rid, postId, title, content, createDate, parentId, in_Create[0].@rid as createRid, in_Create[0].userId as createUserId \" +\n                \"from (traverse out_Own, out_HasPost from ?) where @class = 'Post' order by \" + sortedBy + \" desc\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> posts = graph.getRawGraph().command(query).execute(rid);\n            if(posts.size() > 0) {\n                json = OJSONWriter.listToJSON(posts, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.AbstractBfnRule",
      "createDate": "2015-09-24T01:16:19.843"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.843",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:169",
    "@version": 1,
    "@class": "Event",
    "eventId": 10170,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/14/2015.\n */\npublic class AddCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.AddCatalogEvRule",
      "createDate": "2015-09-24T01:16:19.855"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.855",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:170",
    "@version": 1,
    "@class": "Event",
    "eventId": 10171,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/03/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProduct(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.AddProductRule",
      "createDate": "2015-09-24T01:16:19.863"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.863",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:171",
    "@version": 1,
    "@class": "Event",
    "eventId": 10172,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCatalogProduct(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogProductRule",
      "createDate": "2015-09-24T01:16:19.880"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.880",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:172",
    "@version": 1,
    "@class": "Event",
    "eventId": 10173,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n */\npublic class DownCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DownCatalogEvRule",
      "createDate": "2015-09-24T01:16:19.893"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.893",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.BranchRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 25/04/15.\n */\npublic abstract class AbstractCatalogRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractCatalogRule.class);\n    static final String branchType = \"catalog\";\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add product from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                // make sure parent exists if it is not empty.\n                List<String> parentRids = (List<String>)data.get(\"in_HasProduct\");\n                if(parentRids != null && parentRids.size() == 1) {\n                    Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                    if(parent == null) {\n                        error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        // convert parent from @rid to id\n                        List in_HasProduct = new ArrayList();\n                        in_HasProduct.add(parent.getProperty(\"catalogId\"));\n                        eventData.put(\"in_HasProduct\", in_HasProduct);\n                    }\n                }\n                if(error == null) {\n                    eventData.put(\"productId\", HashUtil.generateUUID());\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the number of products has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean addProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addProductDb(data);\n        return true;\n    }\n\n    protected void addProductDb(Map<String, Object> data) throws Exception {\n        String className = \"Catalog\";\n        String id = \"catalogId\";\n        String index = className + \".\" + id;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex createUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_HasProduct\");\n            OrientVertex product = graph.addVertex(\"class:Product\", data);\n            createUser.addEdge(\"Create\", product);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBranchByHostId(graph, branchType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"HasProduct\", product);\n                }\n            }\n            // tag\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String) data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            for(String tagId: inputTags) {\n                Vertex tag = null;\n                // get the tag is it exists\n                OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                logger.debug(\"tagHostIdIdx = \" + tagHostIdIdx);\n                OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                logger.debug(\"tagKey =\" + tagKey);\n                OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = graph.getVertex(tagOid.getRecord());\n                    product.addEdge(\"HasTag\", tag);\n                } else {\n                    tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                    createUser.addEdge(\"Create\", tag);\n                    product.addEdge(\"HasTag\", tag);\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(product != null) {\n                // check if the product has variant, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(product.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Product has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the number of products has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delProductDb(data);\n        return true;\n    }\n\n    protected void delProductDb(Map<String, Object> data) throws Exception {\n        String className = \"Catalog\";\n        String id = \"catalogId\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if(product != null) {\n                // TODO cascade deleting all comments belong to the product.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                graph.removeVertex(product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + branchType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                // update product itself and we might have a new api to move product from one parent to another.\n                Vertex product = DbService.getVertexByRid(graph, rid);\n                if(product != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"name\", data.get(\"name\"));\n                    eventData.put(\"host\", data.get(\"host\"));\n                    eventData.put(\"description\", data.get(\"description\"));\n                    eventData.put(\"variants\", data.get(\"variants\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // parent\n                    List parentRids = (List)data.get(\"in_HasProduct\");\n                    if(parentRids != null) {\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.IN, \"HasProduct\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(\"catalogId\");\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(\"catalogId\"));\n                            }\n                        } else {\n                            inputMap.put(\"result\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n\n                    // tags\n                    Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n                    Set<String> storedTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.OUT, \"HasTag\")) {\n                        storedTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n\n                    Set<String> addTags = new HashSet<String>(inputTags);\n                    Set<String> delTags = new HashSet<String>(storedTags);\n                    addTags.removeAll(storedTags);\n                    delTags.removeAll(inputTags);\n\n                    if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                } else {\n                    error = \"@rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n\n            // make sure parent exists if it is not empty.\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the last update time has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean updProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updProductDb(data);\n        return true;\n    }\n\n    protected void updProductDb(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if(product != null) {\n                updateUser.addEdge(\"Update\", product);\n                // fields\n                if(data.get(\"name\") != null) {\n                    product.setProperty(\"name\", data.get(\"name\"));\n                } else {\n                    product.removeProperty(\"name\");\n                }\n                if(data.get(\"description\") != null) {\n                    product.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    product.removeProperty(\"description\");\n                }\n                if(data.get(\"variants\") != null) {\n                    product.setProperty(\"variants\", data.get(\"variants\"));\n                } else {\n                    product.removeProperty(\"variants\");\n                }\n                product.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle addParent and delParent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) product.getEdges(Direction.IN, \"HasProduct\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, branchType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"HasProduct\", product);\n                    }\n                }\n\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex)oid.getRecord();\n                            product.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            product.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex) oid.getRecord();\n                            for (Edge edge : (Iterable<Edge>) product.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getCatalogProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(rid == null) {\n            // check if catalogId exists and convert it to rid.\n            String catalogId = (String)data.get(\"catalogId\");\n            if(catalogId == null) {\n                inputMap.put(\"result\", \"@rid or catalogId is required\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            } else {\n                // find out rid from catalogId\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                try {\n                    OrientVertex catalog = getBranchByHostId(graph, \"catalog\", host, catalogId);\n                    if(catalog == null) {\n                        inputMap.put(\"result\", \"CatalogId \"  + catalogId + \" doesn't exist on host \" + host);\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        rid = catalog.getId().toString();\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowUpdate = false;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowUpdate = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"catalogAdmin\") || roles.contains(\"productAdmin\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowUpdate = true;\n                }\n            }\n        }\n        // get ancestors\n        List<Map<String, Object>> ancestors = getAncestorDb(rid);\n\n        // TODO support the following lists: recent, popular\n        // Get the page from cache.\n        List<String> list = null;\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)branchMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(rid + sortedBy);\n        }\n\n        ConcurrentMap<Object, Object> productCache = (ConcurrentMap<Object, Object>)branchMap.get(\"productCache\");\n        if(productCache == null) {\n            productCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"productCache\", productCache);\n        }\n\n        if(list == null) {\n            // get the list for db\n            list = new ArrayList<String>();\n            String json = getCatalogProductDb(rid, sortedBy);\n            if(json != null) {\n                // convert json to list of maps.\n                List<Map<String, Object>> products = mapper.readValue(json,\n                        new TypeReference<ArrayList<HashMap<String, Object>>>() {\n                        });\n                for(Map<String, Object> product: products) {\n                    String productRid = (String)product.get(\"rid\");\n                    list.add(productRid);\n                    product.remove(\"@rid\");\n                    product.remove(\"@type\");\n                    product.remove(\"@version\");\n                    product.remove(\"@fieldTypes\");\n                    productCache.put(productRid, product);\n                }\n            }\n            listCache.put(rid + sortedBy, list);\n        }\n        long total = list.size();\n        if(total > 0) {\n            List<Map<String, Object>> products = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String productRid = list.get(i);\n                Map<String, Object> product = (Map<String, Object>)productCache.get(productRid);\n                products.add(product);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"products\", products);\n            result.put(\"rid\", rid);\n            result.put(\"allowUpdate\", allowUpdate);\n            result.put(\"ancestors\", ancestors);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no product available. but still need to return allowUpdate\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"rid\", rid);\n            result.put(\"allowUpdate\", allowUpdate);\n            result.put(\"ancestors\", ancestors);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n\n    protected String getCatalogProductDb(String rid, String sortedBy) {\n        String json = null;\n        // TODO there is a bug that prepared query only support one parameter. That is why sortedBy is concat into the sql.\n        String sql = \"select @rid, productId, name, description, variants, createDate, parentId, in_Create[0].@rid as createRid, in_Create[0].userId as createUserId \" +\n                \"from (traverse out_Own, out_HasProduct from ?) where @class = 'Product' order by \" + sortedBy + \" desc\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute(rid);\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected List getAncestorDb(String rid) {\n        List<Map<String, Object>> ancestors = null;\n        String sql = \"select @rid, catalogId, description from (traverse in('Own') from ?)\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(rid);\n            if(docs.size() > 0) {\n                ancestors = new ArrayList<Map<String, Object>>();\n                for (int i=docs.size()-1; i >= 0; i--) {\n                    Map<String, Object> map = new HashMap<String, Object>();\n                    OrientVertex doc = graph.getVertex(docs.get(i).getRecord());\n                    String id = doc.getProperty(\"rid\").toString();\n                    id = id.substring(id.indexOf('[') + 1, id.indexOf(']'));\n                    map.put(\"rid\", id);\n                    map.put(\"catalogId\", doc.getProperty(\"catalogId\"));\n                    map.put(\"description\", doc.getProperty(\"description\"));\n                    ancestors.add(map);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return ancestors;\n    }\n\n    public boolean getProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String catalogId = (String)data.get(\"catalogId\");\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String json = null;\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            json = getProductDb();\n        } else {\n            if(host.equals(user.get(\"host\"))) {\n                json = getProductDb(host);\n            } else {\n                inputMap.put(\"result\", \"Permission denied\");\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            }\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Not Found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getProductDb(String host) {\n        String json = null;\n        String sql = \"select from product where host = ?\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute(host);\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getProductDb() {\n        String json = null;\n        String sql = \"select from product\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute();\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule",
      "createDate": "2015-09-25T00:57:08.047"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-25T00:57:08.047",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:174",
    "@version": 1,
    "@class": "Event",
    "eventId": 10175,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 10/14/2015.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.AddCatalogRule",
      "createDate": "2015-09-24T01:16:19.922"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.922",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:175",
    "@version": 1,
    "@class": "Event",
    "eventId": 10176,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/14/2015.\n */\npublic class DelCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DelCatalogEvRule",
      "createDate": "2015-09-24T01:16:19.938"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.938",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:176",
    "@version": 1,
    "@class": "Event",
    "eventId": 10177,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * productAdmin can only delete his or her products. However,\n * owner, admin and catalogAdmin can delete product and all the comments/reivews relate to the\n * product all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the product for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n */\npublic class DelProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProduct(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DelProductRule",
      "createDate": "2015-09-24T01:16:19.954"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.954",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:177",
    "@version": 1,
    "@class": "Event",
    "eventId": 10178,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n */\npublic class DelProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProductEv(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DelProductEvRule",
      "createDate": "2015-09-24T01:16:19.973"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.973",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:178",
    "@version": 1,
    "@class": "Event",
    "eventId": 10179,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n *\n * productAdmin can only update his or her product\n */\npublic class UpdProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProduct(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpdProductRule",
      "createDate": "2015-09-24T01:16:19.982"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.982",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:179",
    "@version": 1,
    "@class": "Event",
    "eventId": 10180,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/03/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogTreeRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogTreeRule",
      "createDate": "2015-09-24T01:16:19.994"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:19.994",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:180",
    "@version": 1,
    "@class": "Event",
    "eventId": 10181,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 30/03/15.\n */\npublic class AddProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProductEv(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.AddProductEvRule",
      "createDate": "2015-09-24T01:16:20.002"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.002",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:181",
    "@version": 1,
    "@class": "Event",
    "eventId": 10182,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n */\npublic class UpdProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProductEv(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpdProductEvRule",
      "createDate": "2015-09-24T01:16:20.012"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.012",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:182",
    "@version": 1,
    "@class": "Event",
    "eventId": 10183,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 10/14/2015.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class UpdCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpdCatalogRule",
      "createDate": "2015-09-24T01:16:20.024"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.024",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:183",
    "@version": 1,
    "@class": "Event",
    "eventId": 10184,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 24/08/15.\n *\n * This is the endpoint for product admin page to list all the products\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getProduct(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetProductRule",
      "createDate": "2015-09-24T01:16:20.033"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.033",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:184",
    "@version": 1,
    "@class": "Event",
    "eventId": 10185,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/14/2015.\n *\n */\npublic class UpdCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpdCatalogEvRule",
      "createDate": "2015-09-24T01:16:20.047"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.047",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:185",
    "@version": 1,
    "@class": "Event",
    "eventId": 10186,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/14/2015.\n *\n * you can only delete a catalog if it has no child and no entity.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n *\n */\npublic class DelCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DelCatalogRule",
      "createDate": "2015-09-24T01:16:20.055"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.055",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:186",
    "@version": 1,
    "@class": "Event",
    "eventId": 10187,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpCatalogRule",
      "createDate": "2015-09-24T01:16:20.063"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.063",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:187",
    "@version": 1,
    "@class": "Event",
    "eventId": 10188,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.rule.catalog.AbstractCatalogRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 10/14/2015.\n *\n * This is for catalog admin screen.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogRule",
      "createDate": "2015-09-24T01:16:20.073"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.073",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:188",
    "@version": 1,
    "@class": "Event",
    "eventId": 10189,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n * get drown down list of catalog for catalog admin\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogDropdownRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogDropdownRule",
      "createDate": "2015-09-24T01:16:20.083"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.083",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:189",
    "@version": 1,
    "@class": "Event",
    "eventId": 10190,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n */\npublic class UpCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.UpCatalogEvRule",
      "createDate": "2015-09-24T01:16:20.095"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.095",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:190",
    "@version": 1,
    "@class": "Event",
    "eventId": 10191,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.catalog;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 25/04/15.\n *\n *  AccessLevel R [user]\n */\npublic class DownCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.DownCatalogRule",
      "createDate": "2015-09-24T01:16:20.112"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.112",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:191",
    "@version": 1,
    "@class": "Event",
    "eventId": 10192,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 28/11/14.\n *\n * AccessLevel R [user]\n */\npublic class DownPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.DownPostRule",
      "createDate": "2015-09-24T01:16:20.129"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.129",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:192",
    "@version": 1,
    "@class": "Event",
    "eventId": 10193,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 27/11/14.\n *\n * Get post for post admin page? user?\n *\n * AccessLevel R [owner, admin, ?]\n */\npublic class GetPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.GetPostRule",
      "createDate": "2015-09-24T01:16:20.138"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.138",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:193",
    "@version": 1,
    "@class": "Event",
    "eventId": 10194,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 27/11/14.\n */\npublic abstract class AbstractPostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractPostRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.AbstractPostRule",
      "createDate": "2015-09-24T01:16:20.145"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.145",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:194",
    "@version": 1,
    "@class": "Event",
    "eventId": 10195,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 06/12/14.\n *\n * Should not be here. will be part of bfn\n *\n */\npublic class GetRecentPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        if(data.get(\"host\") == null || data.get(\"limitTo\") == null) {\n            inputMap.put(\"result\", \"Host and limitTo are required\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        } else {\n\n            // get recent post for blog\n\n            // get recent post for news\n\n            // get recent post for forum\n\n        }\n\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.GetRecentPostRule",
      "createDate": "2015-09-24T01:16:20.152"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.152",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:195",
    "@version": 1,
    "@class": "Event",
    "eventId": 10196,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 01/12/14.\n *\n * Not sure if it is used.\n *\n */\npublic class GetPostTreeRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.GetPostTreeRule",
      "createDate": "2015-09-24T01:16:20.166"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.166",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:196",
    "@version": 1,
    "@class": "Event",
    "eventId": 10197,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 28/11/14.\n */\npublic class UpPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.UpPostEvRule",
      "createDate": "2015-09-24T01:16:20.178"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.178",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:197",
    "@version": 1,
    "@class": "Event",
    "eventId": 10198,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 28/11/14.\n *\n * Down vote a post in blog, forum or news\n *\n *\n */\npublic class DownPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.DownPostEvRule",
      "createDate": "2015-09-24T01:16:20.185"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.185",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:198",
    "@version": 1,
    "@class": "Event",
    "eventId": 10199,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.post;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 28/11/14.\n *\n * Up vote post\n *\n * AccessLevel R [user]\n *\n */\npublic class UpPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.post.UpPostRule",
      "createDate": "2015-09-24T01:16:20.192"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.192",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:199",
    "@version": 1,
    "@class": "Event",
    "eventId": 10200,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.example.main.perf;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 16/02/15.\n */\npublic class HelloWorld_1Rule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World 1\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.example.main.perf.HelloWorld_1Rule",
      "createDate": "2015-09-24T01:16:20.199"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.199",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:200",
    "@version": 1,
    "@class": "Event",
    "eventId": 10201,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.example.main.perf;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * Created by w.ding on 02/02/15.\n */\npublic class HelloWorldRule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.example.main.perf.HelloWorldRule",
      "createDate": "2015-09-24T01:16:20.206"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.206",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:201",
    "@version": 1,
    "@class": "Event",
    "eventId": 10202,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelPostRule",
      "createDate": "2015-09-24T01:16:20.213"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.213",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:202",
    "@version": 1,
    "@class": "Event",
    "eventId": 10203,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpForumEvRule",
      "createDate": "2015-09-24T01:16:20.220"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.220",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:203",
    "@version": 1,
    "@class": "Event",
    "eventId": 10204,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n */\npublic class DelForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelForumEvRule",
      "createDate": "2015-09-24T01:16:20.227"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.227",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:204",
    "@version": 1,
    "@class": "Event",
    "eventId": 10205,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"forum\", objects);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdPostRule",
      "createDate": "2015-09-24T01:16:20.233"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.233",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:205",
    "@version": 1,
    "@class": "Event",
    "eventId": 10206,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n *\n * Get all the forums belong to a host for admin interface.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumRule",
      "createDate": "2015-09-24T01:16:20.240"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.240",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:206",
    "@version": 1,
    "@class": "Event",
    "eventId": 10207,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n */\npublic class AddForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddForumEvRule",
      "createDate": "2015-09-24T01:16:20.247"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.247",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:207",
    "@version": 1,
    "@class": "Event",
    "eventId": 10208,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelPostEvRule",
      "createDate": "2015-09-24T01:16:20.253"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.253",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:208",
    "@version": 1,
    "@class": "Event",
    "eventId": 10209,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n *\n * Add a new forum for a host in the forum tree\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class AddForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddForumRule",
      "createDate": "2015-09-24T01:16:20.262"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.262",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:209",
    "@version": 1,
    "@class": "Event",
    "eventId": 10210,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Down vote a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class DownForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DownForumRule",
      "createDate": "2015-09-24T01:16:20.274"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:210",
    "@version": 1,
    "@class": "Event",
    "eventId": 10211,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n *\n * Delete a forum node in a forum tree on a host\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class DelForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelForumRule",
      "createDate": "2015-09-24T01:16:20.289"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.289",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:211",
    "@version": 1,
    "@class": "Event",
    "eventId": 10212,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 02/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddPostEvRule",
      "createDate": "2015-09-24T01:16:20.298"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.298",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:212",
    "@version": 1,
    "@class": "Event",
    "eventId": 10213,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote forum by users\n *\n * AccessLevel R [user]\n *\n */\npublic class UpForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpForumRule",
      "createDate": "2015-09-24T01:16:20.311"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.311",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:213",
    "@version": 1,
    "@class": "Event",
    "eventId": 10214,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdPostEvRule",
      "createDate": "2015-09-24T01:16:20.319"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.319",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:214",
    "@version": 1,
    "@class": "Event",
    "eventId": 10215,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n *\n * Update forum\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class UpdForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdForumRule",
      "createDate": "2015-09-24T01:16:20.325"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.325",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:215",
    "@version": 1,
    "@class": "Event",
    "eventId": 10216,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DownForumEvRule",
      "createDate": "2015-09-24T01:16:20.332"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.332",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:216",
    "@version": 1,
    "@class": "Event",
    "eventId": 10217,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 26/11/14.\n */\npublic class UpdForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdForumEvRule",
      "createDate": "2015-09-24T01:16:20.350"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.350",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:217",
    "@version": 1,
    "@class": "Event",
    "eventId": 10218,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 02/12/14.\n *\n * Post a new topic in a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddPostRule",
      "createDate": "2015-09-24T01:16:20.357"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.357",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:218",
    "@version": 1,
    "@class": "Event",
    "eventId": 10219,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/11/14.\n *\n * Get tree structure of forums to display on forum home page.\n *\n * AccessLevel A\n *\n */\npublic class GetForumTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumTreeRule",
      "createDate": "2015-09-24T01:16:20.393"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.393",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:219",
    "@version": 1,
    "@class": "Event",
    "eventId": 10220,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 01/12/14.\n *\n * Get all the posts belong to the forum and all sub forums\n *\n * AccessLevel A\n *\n */\npublic class GetForumPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumPostRule",
      "createDate": "2015-09-24T01:16:20.402"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.402",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:220",
    "@version": 1,
    "@class": "Event",
    "eventId": 10221,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.forum;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/11/14.\n *\n * Get forum dropdown list in order to setup parent and children relationship\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumDropdownRule",
      "createDate": "2015-09-24T01:16:20.408"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.408",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:221",
    "@version": 1,
    "@class": "Event",
    "eventId": 10222,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.demo;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/02/15.\n */\npublic class GetDropdownRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        inputMap.put(\"result\", \"[{\\\"value\\\":\\\"value1\\\",\\\"label\\\":\\\"label1\\\"},{\\\"value\\\":\\\"value2\\\",\\\"label\\\":\\\"label2\\\"},{\\\"value\\\":\\\"value3\\\",\\\"label\\\":\\\"label3\\\"}]\");\n        return true;\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.demo.GetDropdownRule",
      "createDate": "2015-09-24T01:16:20.419"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.419",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:222",
    "@version": 1,
    "@class": "Event",
    "eventId": 10223,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 03/12/14.\n */\npublic abstract class AbstractCommentRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(AbstractCommentRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            String parentId = (String)data.remove(\"parentId\");\n            String parentClassName = (String)data.remove(\"parentClassName\");\n            Vertex parent = null;\n            if(\"Post\".equals(parentClassName)) {\n                parent = graph.getVertexByKey(\"Post.postId\", parentId);\n            } else {\n                parent = graph.getVertexByKey(\"Comment.commentId\", parentId);\n            }\n            OrientVertex comment = graph.addVertex(\"class:Comment\", data);\n            createUser.addEdge(\"Create\", comment);\n            parent.addEdge(\"HasComment\", comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            graph.removeVertex(comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                comment.setProperty(\"content\", data.get(\"content\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected long getTotal(Map<String, Object> data, Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sb = new StringBuilder(\"SELECT COUNT(*) as count FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            total = ((ODocument)graph.getRawGraph().query(new OSQLSynchQuery<ODocument>(sb.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return total;\n    }\n\n    protected String getComment(Map<String, Object> data, Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sb.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sb.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sb.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sb.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = graph.getRawGraph().command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getCommentTree(Map<String, Object> data) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            ODocument record = graph.getVertex(data.get(\"@rid\")).getRecord();\n            json = record.toJSON(\"rid,fetchPlan:[*]in_Create:-2 out_HasComment:5\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.AbstractCommentRule",
      "createDate": "2015-09-24T01:16:20.429"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.429",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:223",
    "@version": 1,
    "@class": "Event",
    "eventId": 10224,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/03/15.\n *\n * only the comment content can be updated\n *\n * Access Level [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * now only owner and admin can update\n *\n */\npublic class UpdCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpdCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"content\", data.get(\"content\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.UpdCommentRule",
      "createDate": "2015-09-24T01:16:20.437"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.437",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:224",
    "@version": 1,
    "@class": "Event",
    "eventId": 10225,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 03/12/14.\n */\npublic class AddCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.AddCommentEvRule",
      "createDate": "2015-09-24T01:16:20.447"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.447",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:225",
    "@version": 1,
    "@class": "Event",
    "eventId": 10226,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by w.ding on 03/12/14.\n *\n * Not sure if this is used or not. Do we have a comment admin page to list all of them?\n *\n */\npublic class GetCommentRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"@class\", \"Comment\");\n        long total = getTotal(data, criteria);\n        if(total > 0) {\n            String json = getComment(data, criteria);\n            List<Map<String, Object>> comments\n                    = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"comments\", comments);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.GetCommentRule",
      "createDate": "2015-09-24T01:16:20.455"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.455",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:226",
    "@version": 1,
    "@class": "Event",
    "eventId": 10227,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class UpdCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.UpdCommentEvRule",
      "createDate": "2015-09-24T01:16:20.469"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.469",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:227",
    "@version": 1,
    "@class": "Event",
    "eventId": 10228,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 03/12/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, parentRid);\n            if(parent == null ) {\n                error = \"Parent @rid \" + parentRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"comment\", data.get(\"comment\"));\n                String parentClassName = parent.getProperty(\"@class\");\n                eventData.put(\"parentClassName\", parentClassName); // parent can be a post or a comment\n                if(\"Post\".equals(parentClassName)) {\n                    eventData.put(\"parentId\", parent.getProperty(\"postId\"));\n                } else {\n                    eventData.put(\"parentId\", parent.getProperty(\"commentId\"));\n                }\n                // generate unique identifier\n                eventData.put(\"commentId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.AddCommentRule",
      "createDate": "2015-09-24T01:16:20.494"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.494",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:228",
    "@version": 1,
    "@class": "Event",
    "eventId": 10229,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class DelCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.DelCommentEvRule",
      "createDate": "2015-09-24T01:16:20.503"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.503",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:229",
    "@version": 1,
    "@class": "Event",
    "eventId": 10230,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.HashUtil;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 21/03/15.\n *\n * AccessLevel R [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * user can only delete his/her own comment if there is no other comment link to it.\n *\n * forumAdmin can only delete comments from forum\n * newsAdmin can only delete comments from news\n * blogAdmin can only delete comments from blog\n *\n * for now, only owner and admin will be able to delete comment and if there are\n * comments related, it cannot be deleted.\n *\n * now AccessLevel R [owner, admin]\n *\n *\n */\npublic class DelCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if there are edges HasComment\n                if(comment.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Comment has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.DelCommentRule",
      "createDate": "2015-09-24T01:16:20.526"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.526",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:230",
    "@version": 1,
    "@class": "Event",
    "eventId": 10231,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.comment;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 03/12/14.\n *\n * AccessLevel A\n *\n * everyone can have read only access to all comments\n *\n */\npublic class GetCommentTreeRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String comments = getCommentTree(data);\n        if(comments != null) {\n            inputMap.put(\"result\", comments);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No comment can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.GetCommentTreeRule",
      "createDate": "2015-09-24T01:16:20.540"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.540",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:231",
    "@version": 1,
    "@class": "Event",
    "eventId": 10232,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.product;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport org.clinical3po.backendservices.rule.AbstractRule;\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by w.ding on 10/14/2015.\n */\npublic abstract class AbstractProductRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    static final Logger logger = LoggerFactory.getLogger(AbstractProductRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if (product != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if (product != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /*\n    protected ODocument getProductByHostName(String host, String name) {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostNameIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, name);\n            OIdentifiable oid = (OIdentifiable) hostNameIdx.get(key);\n            if (oid != null) {\n                product = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected ODocument addProduct(Map<String, Object> data, String userId) throws Exception {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            product = new ODocument(schema.getClass(\"Product\"));\n            product.field(\"host\", data.get(\"host\"));\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            java.util.Date d = new java.util.Date();\n            product.field(\"createDate\", d);\n            product.field(\"updateDate\", d);\n            product.field(\"createUser\", userId);\n            product.save();\n            cache.put(product.field(\"@rid\").toString(), product);\n            String categoryRid = (String)data.get(\"categoryRid\");\n            if(categoryRid != null) {\n                // get the category and update entities list\n                ODocument category = getCategoryByRid(categoryRid);\n                List entities = category.field(\"entities\");\n                if(entities == null) {\n                    entities = new ArrayList();\n                }\n                entities.add(product);\n                category.field(\"entities\", entities);\n                category.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected void delProduct(String productRid) throws Exception {\n        ODocument product = DbService.delODocumentByRid(productRid);\n        // rebuild cache in memory.\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(productRid);\n        }\n    }\n\n    protected void updProduct(String productRid, Map<String, Object> data) throws Exception {\n        ODocument product = getProductByRid(productRid);\n        if(product != null) {\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            product.field(\"updateDate\", new java.util.Date());\n            product.save();\n        }\n    }\n\n    protected List<ODocument> searchProductDb(Map<String, Object> criteria) {\n        List<ODocument> products = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Product \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            products = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return products;\n    }\n\n    protected String searchProduct(Map<String, Object> criteria) throws Exception {\n        // first check if the full list is in cache.\n        String json = null;\n        Map<String, Object> result = new HashMap<String, Object>();\n        List<ODocument> products = new ArrayList<ODocument>();\n        int total = 0;\n        String host = (String)criteria.get(\"host\");\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> hostMap = (Map<String, Object>)productMap.get(host);\n        if(hostMap == null) {\n            hostMap = new ConcurrentHashMap<String, Object>(10, 0.9f, 1);\n            productMap.put(host, hostMap);\n        }\n        String key = null;\n        String categoryRid = (String)criteria.get(\"categoryRid\");\n        if(categoryRid != null) {\n            key = categoryRid + criteria.get(\"sortedBy\");\n        } else {\n            key = \"\" + criteria.get(\"sortedBy\");\n        }\n        Integer pageNo = (Integer)criteria.remove(\"pageNo\");\n        Integer pageSize = (Integer)criteria.remove(\"pageSize\");\n        List<String> list = (List<String>)hostMap.get(key);\n        if(list == null) {\n            // not in cache, search from db and put them in cache.\n            List<ODocument> docs = searchProductDb(criteria);\n            total = docs.size();\n            int i = 0;\n            list = new ArrayList<String>();\n            for(ODocument doc: docs) {\n                list.add(doc.field(\"@rid\").toString());\n                if(i >= pageSize * (pageNo - 1) && i < pageSize*pageNo) {\n                    products.add(doc);\n                    i++;\n                    // put only the current page in cache.\n                    ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                    if(cache == null) {\n                        cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                                .maximumWeightedCapacity(1000)\n                                .build();\n                        productMap.put(\"cache\", cache);\n                    }\n                    cache.put(doc.field(\"@rid\").toString(), doc);\n                }\n            }\n        } else {\n            // we have a list of rids.\n            total = list.size();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize * pageNo, list.size()); i++) {\n                String rid = (String)list.get(i);\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                ODocument product = (ODocument)cache.get(rid);\n                if(product == null) {\n                    // not in cache, get from db and put it into the cache.\n                    product = DbService.getODocumentByRid(rid);\n                    cache.put(rid, product);\n                }\n                products.add(product);\n            }\n        }\n        if(products != null && products.size() > 0) {\n            result.put(\"total\", total);\n            result.put(\"products\", OJSONWriter.listToJSON(products, null));\n            json = mapper.writeValueAsString(result);\n        }\n        return json;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> products = searchProductDb(criteria);\n        Map<String, Object> hostMap = new ConcurrentHashMap<String, Object>(2, 0.9f, 1);\n        List<String> newList = new ArrayList<String>();\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument product : products) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(product.field(\"@rid\").toString(), product);\n            }\n            newList.add(product.field(\"@rid\").toString());\n        }\n        hostMap.put(\"newList\", newList);\n\n        // TODO build hot list\n\n        productMap.put(host, hostMap);\n        return hostMap;\n    }\n    */\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.product.AbstractProductRule",
      "createDate": "2015-09-24T01:16:20.548"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.548",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:232",
    "@version": 1,
    "@class": "Event",
    "eventId": 10233,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.product;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 26/04/15.\n */\npublic class DownProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.product.DownProductEvRule",
      "createDate": "2015-09-24T01:16:20.558"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.558",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:233",
    "@version": 1,
    "@class": "Event",
    "eventId": 10234,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.product;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the product before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.product.UpProductRule",
      "createDate": "2015-09-24T01:16:20.569"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.569",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:234",
    "@version": 1,
    "@class": "Event",
    "eventId": 10235,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.product;\n\nimport org.clinical3po.backendservices.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 26/04/15.\n */\npublic class UpProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.product.UpProductEvRule",
      "createDate": "2015-09-24T01:16:20.576"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.576",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:235",
    "@version": 1,
    "@class": "Event",
    "eventId": 10236,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.product;\n\nimport org.clinical3po.backendservices.rule.Rule;\nimport org.clinical3po.backendservices.server.DbService;\nimport org.clinical3po.backendservices.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by w.ding on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class DownProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(DownProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.product.DownProductRule",
      "createDate": "2015-09-24T01:16:20.583"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.583",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:236",
    "@version": 1,
    "@class": "Event",
    "eventId": 10237,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"news\", objects);\n    }\n\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelPostRule",
      "createDate": "2015-09-24T01:16:20.600"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.600",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:237",
    "@version": 1,
    "@class": "Event",
    "eventId": 10238,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpNewsEvRule",
      "createDate": "2015-09-24T01:16:20.606"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.606",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:238",
    "@version": 1,
    "@class": "Event",
    "eventId": 10239,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Delete news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class DelNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelNewsRule",
      "createDate": "2015-09-24T01:16:20.613"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.613",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:239",
    "@version": 1,
    "@class": "Event",
    "eventId": 10240,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Display news category on news home page.\n *\n * AccessLevel A\n *\n */\npublic class GetNewsTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsTreeRule",
      "createDate": "2015-09-24T01:16:20.623"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.623",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:240",
    "@version": 1,
    "@class": "Event",
    "eventId": 10241,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Vote down news category\n *\n * AccessLevel R [user]\n *\n */\npublic class DownNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DownNewsRule",
      "createDate": "2015-09-24T01:16:20.630"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.630",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:241",
    "@version": 1,
    "@class": "Event",
    "eventId": 10242,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n */\npublic class AddNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddNewsEvRule",
      "createDate": "2015-09-24T01:16:20.654"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.654",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:242",
    "@version": 1,
    "@class": "Event",
    "eventId": 10243,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n */\npublic class UpdNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdNewsEvRule",
      "createDate": "2015-09-24T01:16:20.671"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.671",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:243",
    "@version": 1,
    "@class": "Event",
    "eventId": 10244,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Get news dropdown list for news admin page\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsDropdownRule",
      "createDate": "2015-09-24T01:16:20.678"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.678",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:244",
    "@version": 1,
    "@class": "Event",
    "eventId": 10245,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Get all the news for a host and display in the news admin interface\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsRule",
      "createDate": "2015-09-24T01:16:20.706"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.706",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:245",
    "@version": 1,
    "@class": "Event",
    "eventId": 10246,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n */\npublic class DelNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelNewsEvRule",
      "createDate": "2015-09-24T01:16:20.713"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.713",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:246",
    "@version": 1,
    "@class": "Event",
    "eventId": 10247,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DownNewsEvRule",
      "createDate": "2015-09-24T01:16:20.725"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.725",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:247",
    "@version": 1,
    "@class": "Event",
    "eventId": 10248,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */public class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdPostRule",
      "createDate": "2015-09-24T01:16:20.735"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.735",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:248",
    "@version": 1,
    "@class": "Event",
    "eventId": 10249,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Add news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class AddNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddNewsRule",
      "createDate": "2015-09-24T01:16:20.756"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.756",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:249",
    "@version": 1,
    "@class": "Event",
    "eventId": 10250,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelPostEvRule",
      "createDate": "2015-09-24T01:16:20.766"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.766",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:250",
    "@version": 1,
    "@class": "Event",
    "eventId": 10251,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddPostEvRule",
      "createDate": "2015-09-24T01:16:20.775"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.775",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:251",
    "@version": 1,
    "@class": "Event",
    "eventId": 10252,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdPostEvRule",
      "createDate": "2015-09-24T01:16:20.781"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.781",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:252",
    "@version": 1,
    "@class": "Event",
    "eventId": 10253,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Get all the post in a news category and sub categories\n *\n * AccessLevel A\n *\n */\npublic class GetNewsPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsPostRule",
      "createDate": "2015-09-24T01:16:20.788"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.788",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:253",
    "@version": 1,
    "@class": "Event",
    "eventId": 10254,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Post news in certain new category\n *\n * AccessLevel R [owner, admin, newsAdmin, newsUser]\n *\n * newsUser can only post in category?\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddPostRule",
      "createDate": "2015-09-24T01:16:20.795"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.795",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:254",
    "@version": 1,
    "@class": "Event",
    "eventId": 10255,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "package org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote news category\n *\n * AccessLevel R [user]\n *\n */\npublic class UpNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpNewsRule",
      "createDate": "2015-09-24T01:16:20.803"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.803",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:255",
    "@version": 1,
    "@class": "Event",
    "eventId": 10256,
    "createUserId": "w.ding",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Clinical Personalized Pragmatic Predictions of Outcomes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.clinical3po.backendservices.rule.news;\n\nimport org.clinical3po.backendservices.rule.AbstractBfnRule;\nimport org.clinical3po.backendservices.rule.Rule;\n\n/**\n * Created by w.ding on 28/12/14.\n *\n * Update news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n *\n */\npublic class UpdNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdNewsRule",
      "createDate": "2015-09-24T01:16:20.810"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-09-24T01:16:20.810",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:259",
    "@version": 1,
    "@class": "Event",
    "eventId": 10260,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.replayEvent",
      "schema": {
        "type": "object",
        "title": "Upload Event File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Event Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "db",
          "name": "replayEvent",
          "readOnly": true,
          "title": "Replay Event",
          "success": "/page/org.clinical3po.backendservices-v-db-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.859"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.859",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:260",
    "@version": 1,
    "@class": "Event",
    "eventId": 10261,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.transform.response.add_d",
      "schema": {
        "type": "object",
        "title": "Add Response Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number"
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "addTransformResponse",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.871"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.871",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:261",
    "@version": 1,
    "@class": "Event",
    "eventId": 10262,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.catalog.update",
      "schema": {
        "type": "object",
        "title": "Catalog",
        "required": [
          "catalogId",
          "description"
        ],
        "properties": {
          "catalogId": {
            "title": "Catalog Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "catalogId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "catalog",
          "name": "updCatalog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-catalog-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.896"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.896",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:262",
    "@version": 1,
    "@class": "Event",
    "eventId": 10263,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.page.add",
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "pageId",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "addPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-09-24T01:17:33.905"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.905",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:263",
    "@version": 1,
    "@class": "Event",
    "eventId": 10264,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.forum.post.update",
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "id": {
            "title": "ID",
            "type": "string",
            "readonly": "true"
          },
          "@rid": {
            "title": "RID",
            "type": "string",
            "readonly": "true"
          },
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "title": "ID",
                      "readonly": true,
                      "schema": {
                        "title": "ID",
                        "type": "string",
                        "readonly": "true"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "id"
                      ],
                      "type": "text"
                    },
                    {
                      "title": "RID",
                      "readonly": true,
                      "schema": {
                        "title": "id",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "@rid"
                      ],
                      "type": "text"
                    },
                    {
                      "title": "Title [Mandatory, 12 to 90 characters]",
                      "required": true,
                      "schema": {
                        "title": "Title [Mandatory, 12 to 90 characters]",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "title"
                      ],
                      "type": "text",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                      "required": true,
                      "schema": {
                        "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                        "type": "string"
                      },
                      "ngModelOptions": {},
                      "key": [
                        "content"
                      ],
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "title": "Tags [Maximum 5 tags]",
                      "schema": {
                        "title": "Tags [Maximum 5 tags]",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "tags"
                      ],
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                      "required": true,
                      "schema": {
                        "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                        "type": "string"
                      },
                      "ngModelOptions": {},
                      "key": [
                        "content"
                      ],
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "updPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-forum-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.919"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.919",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:264",
    "@version": 1,
    "@class": "Event",
    "eventId": 10265,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.menu.addMenuItem",
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "menuItemId",
          "label"
        ],
        "properties": {
          "menuItemId": {
            "title": "Menu Item Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "menuItemId",
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-menu-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.933"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.933",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:265",
    "@version": 1,
    "@class": "Event",
    "eventId": 10266,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.transform.response.update_d",
      "schema": {
        "type": "object",
        "title": "Update Response Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number",
            "readonly": true
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "updTransformResponse",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.943"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.943",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:266",
    "@version": 1,
    "@class": "Event",
    "eventId": 10267,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.update",
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "sourceCode"
        ],
        "properties": {
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "updRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.964"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.964",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:267",
    "@version": 1,
    "@class": "Event",
    "eventId": 10268,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.execSchemaCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execSchemaCmd",
          "readOnly": false,
          "title": "Execute",
          "success": "/page/org.clinical3po.backendservices-v-db-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.974"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.974",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:268",
    "@version": 1,
    "@class": "Event",
    "eventId": 10269,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.etag.update",
      "schema": {
        "type": "object",
        "title": "Etag Flag Update",
        "required": [
          "ruleClass",
          "enableEtag"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "enableEtag": {
            "title": "Enable Etag?",
            "type": "boolean"
          },
          "cacheControl": {
            "title": "Cache Control Header",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "enableEtag",
        "cacheControl"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updEtag",
          "readOnly": false,
          "title": "Update",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:33.986"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:33.986",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:269",
    "@version": 1,
    "@class": "Event",
    "eventId": 10270,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.product.add",
      "schema": {
        "type": "object",
        "title": "Product",
        "required": [
          "in_HasProduct",
          "name",
          "description",
          "variants"
        ],
        "properties": {
          "in_HasProduct": {
            "title": "CatalogId",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "variants": {
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "title": "SKU",
                  "type": "string"
                },
                "price": {
                  "title": "Price",
                  "type": "number"
                },
                "type": {
                  "title": "Type",
                  "type": "string"
                },
                "image": {
                  "title": "Image",
                  "type": "string"
                },
                "inventory": {
                  "title": "Inventory",
                  "type": "number"
                },
                "weight": {
                  "title": "Weight",
                  "type": "number"
                },
                "height": {
                  "title": "Height",
                  "type": "number"
                },
                "width": {
                  "title": "Width",
                  "type": "number"
                },
                "length": {
                  "title": "Length",
                  "type": "number"
                }
              },
              "required": [
                "sku",
                "price",
                "type",
                "image",
                "inventory",
                "weight",
                "height",
                "width",
                "length"
              ]
            }
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "in_HasProduct",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        },
        "name",
        "description",
        {
          "key": "variants",
          "add": "New",
          "style": {
            "add": "btn-success"
          },
          "items": [
            "variants[].sku",
            "variants[].price",
            "variants[].type",
            "variants[].image",
            "variants[].inventory",
            "variants[].weight",
            "variants[].height",
            "variants[].width",
            "variants[].length"
          ]
        }
      ],
      "action": [
        {
          "category": "catalog",
          "name": "addProduct",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-product-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.006"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.006",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:270",
    "@version": 1,
    "@class": "Event",
    "eventId": 10271,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.forum.add",
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "forumId",
          "description"
        ],
        "properties": {
          "forumId": {
            "title": "Forum Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "forumId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-forum-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.031"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.031",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:271",
    "@version": 1,
    "@class": "Event",
    "eventId": 10272,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.form.import",
      "schema": {
        "type": "object",
        "title": "Import Form File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Form Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "form",
          "name": "impForm",
          "readOnly": false,
          "title": "Import Form",
          "success": "/page/org.clinical3po.backendservices-v-form-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.047"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.047",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:272",
    "@version": 1,
    "@class": "Event",
    "eventId": 10273,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.downloadEvent",
      "schema": {
        "type": "object",
        "title": "Download Events",
        "required": [
          "createDateFrom"
        ],
        "properties": {
          "createDateFrom": {
            "title": "Event From Date",
            "type": "object",
            "format": "datetimepicker"
          },
          "createDateTo": {
            "title": "Event To Date",
            "type": "object",
            "format": "datetimepicker"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "createDateFrom",
          "options": {
            "autoclose": 1
          }
        },
        {
          "key": "createDateTo",
          "options": {
            "autoclose": 1
          }
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "downloadEvent",
          "readOnly": true,
          "title": "Download Events"
        }
      ],
      "createDate": "2015-09-24T01:17:34.061"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.061",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:273",
    "@version": 1,
    "@class": "Event",
    "eventId": 10274,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.access.upd_d",
      "schema": {
        "type": "object",
        "title": "Update Access Control",
        "required": [
          "accessLevel"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "accessLevel": {
            "title": "Access Level",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "value": "A",
                "label": "Authorized to anyone"
              },
              {
                "value": "N",
                "label": "Not Accessible"
              },
              {
                "value": "C",
                "label": "Client Based"
              },
              {
                "value": "R",
                "label": "Role Based"
              },
              {
                "value": "U",
                "label": "User Based"
              },
              {
                "value": "CR",
                "label": "Client and Role Based"
              },
              {
                "value": "CU",
                "label": "Client and User Based"
              },
              {
                "value": "RU",
                "label": "Role and User Based"
              },
              {
                "value": "CRU",
                "label": "Client, Role and User Based"
              }
            ]
          },
          "clients": {
            "title": "Clients",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "role",
                  "name": "getRoleDropdown"
                }
              }
            ]
          },
          "users": {
            "title": "Users [Separate by comma if multiple]",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "accessLevel",
        "clients",
        "roles",
        {
          "key": "users",
          "type": "textarea"
        }
      ],
      "action": [
        {
          "category": "access",
          "name": "updAccess",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-access-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.086"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.086",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:274",
    "@version": 1,
    "@class": "Event",
    "eventId": 10275,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.signup",
      "schema": {
        "type": "object",
        "required": [
          "userId",
          "email",
          "password",
          "passwordConfirm"
        ],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in."
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "signUpUser",
          "readOnly": false,
          "title": "Register"
        }
      ],
      "createDate": "2015-09-24T01:17:34.103"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.103",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:275",
    "@version": 1,
    "@class": "Event",
    "eventId": 10276,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.demo.uiselect_d",
      "schema": {
        "type": "object",
        "title": "Demo UiSelect",
        "required": [
          "uiSingleSelectStatic",
          "uiMultipleSelectStatic",
          "uiSingleSelectDynamic",
          "uiMultipleSelectDynamic",
          "uiSingleSelectPopulated",
          "uiMultipleSelectPopulated"
        ],
        "properties": {
          "uiSingleSelectStatic": {
            "title": "Ui Single Select Static(Dropdown items from controller)",
            "type": "string",
            "format": "uiselect",
            "description": "Only single item is allowd",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "label3"
              }
            ]
          },
          "uiMultipleSelectStatic": {
            "title": "Ui Multiple Select Static(Dropdown items from controller)",
            "type": "array",
            "format": "uiselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "long very very long label3"
              }
            ]
          },
          "uiSingleSelectDynamic": {
            "title": "Ui Single Select Dynamic(Dropdown items loaded from remote)",
            "type": "string",
            "format": "uiselect"
          },
          "uiMultipleSelectDynamic": {
            "title": "Ui Multiple Select Dynamic(Dropdown items loaded from remote)",
            "type": "array",
            "format": "uiselect"
          },
          "uiSingleSelectPopulated": {
            "title": "Ui Single Select Populated(Dropdown populated on server)",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "uiMultipleSelectPopulated": {
            "title": "UI Multiple Select Populated(Dropdown populated on server)",
            "type": "array",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "descriptions": {
            "title": "Multi Select with descriptions and without Search on the description field.",
            "type": "array",
            "format": "uiselect",
            "description": "Multi single items are allowed",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "value": "label1",
                "label": "label1",
                "description": "a long description to provide context that is not useful for search"
              },
              {
                "value": "label2",
                "label": "label2",
                "description": "a different long description to provide context that is not useful for search"
              },
              {
                "value": "label3",
                "label": "label3",
                "description": "a further long description to provide context that is not useful for search"
              },
              {
                "value": "label4",
                "label": "label4",
                "description": "another long description to provide context that is not useful for search"
              },
              {
                "value": "label5",
                "label": "label5",
                "description": "yet another long description to provide context that is not useful for search"
              }
            ]
          },
          "descriptions_search": {
            "title": "Multi Select with search on descriptions",
            "type": "array",
            "format": "uiselect",
            "description": "Multi single items arre allowed, search on description",
            "minItems": 1,
            "items": [
              {
                "group": "North America",
                "value": "us",
                "label": "Canada",
                "description": ""
              },
              {
                "group": "North America",
                "value": "cn",
                "label": "USA",
                "description": "US, USA, United States of America"
              },
              {
                "group": "Europe",
                "value": "gb",
                "label": "UK",
                "description": "United Kingdom, Great Britain, GB"
              },
              {
                "group": "Europe",
                "value": "nl",
                "label": "Holland",
                "description": "Netherlands, NL, Nederland, Pays-Bas"
              }
            ]
          },
          "tagging": {
            "title": "Tagging",
            "type": "array",
            "format": "uiselect",
            "description": "Hit enter or comma to create a new item in the dropdown",
            "minItems": 1,
            "maxItems": 2,
            "items": [
              {
                "value": "one",
                "label": "label1"
              },
              {
                "value": "two",
                "label": "label2"
              },
              {
                "value": "three",
                "label": "label3"
              },
              {
                "value": "four",
                "label": "label4"
              },
              {
                "value": "five",
                "label": "label5"
              }
            ]
          },
          "grouping": {
            "title": "Multi Select with grouping",
            "type": "array",
            "format": "uiselect",
            "description": "Can be empty",
            "minItems": 0,
            "items": [
              {
                "group": "North America",
                "value": "us",
                "label": "Canada"
              },
              {
                "group": "North America",
                "value": "cn",
                "label": "USA"
              },
              {
                "group": "Europe",
                "value": "gb",
                "label": "UK"
              },
              {
                "group": "Europe",
                "value": "nl",
                "label": "Holland"
              }
            ]
          },
          "grouping_and_tagging": {
            "title": "Grouping with Tagging",
            "type": "array",
            "format": "uiselect",
            "description": "Hit enter or comma to create a new item in the dropdown",
            "minItems": 1,
            "maxItems": 2,
            "items": [
              {
                "group": "North America",
                "value": "us",
                "label": "Canada"
              },
              {
                "group": "North America",
                "value": "cn",
                "label": "USA"
              },
              {
                "group": "Europe",
                "value": "gb",
                "label": "UK"
              },
              {
                "group": "Europe",
                "value": "nl",
                "label": "Holland"
              }
            ]
          },
          "single_grouping_and_tagging": {
            "title": "Single Select with Grouping with Tagging",
            "type": "string",
            "format": "uiselect",
            "description": "Hit enter or comma to create a new item in the dropdown",
            "minItems": 1,
            "maxItems": 2,
            "items": [
              {
                "group": "North America",
                "value": "us",
                "label": "Canada"
              },
              {
                "group": "North America",
                "value": "cn",
                "label": "USA"
              },
              {
                "group": "Europe",
                "value": "gb",
                "label": "UK"
              },
              {
                "group": "Europe",
                "value": "nl",
                "label": "Holland"
              }
            ]
          },
          "single_tagging": {
            "title": "Tagging",
            "type": "string",
            "format": "uiselect",
            "description": "Hit enter or comma to create a new item in the dropdown",
            "minItems": 1,
            "maxItems": 2,
            "items": [
              {
                "value": "one",
                "label": "label1"
              },
              {
                "value": "two",
                "label": "label2"
              },
              {
                "value": "three",
                "label": "label3"
              },
              {
                "value": "four",
                "label": "label4"
              },
              {
                "value": "five",
                "label": "label5"
              }
            ]
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "uiSingleSelectStatic",
          "options": {
            "uiClass": "short"
          }
        },
        {
          "key": "uiMultipleSelectStatic"
        },
        {
          "key": "uiSingleSelectDynamic",
          "options": {
            "http_get": {
              "url": "http://www.clinical3po.org/api/rs?cmd={\"category\": \"demo\", \"name\": \"getDropdown\", \"readOnly\": true}"
            }
          }
        },
        {
          "key": "uiMultipleSelectDynamic",
          "options": {
            "http_post": {
              "url": "http://www.clinical3po.org/api/rs",
              "parameter": {
                "category": "demo",
                "name": "getDropdown",
                "readOnly": true
              }
            }
          }
        },
        {
          "key": "uiSingleSelectPopulated"
        },
        {
          "key": "uiMultipleSelectPopulated"
        },
        "descriptions",
        {
          "key": "descriptions_search",
          "options": {
            "searchDescriptions": true
          }
        },
        {
          "key": "tagging",
          "options": {
            "tagging": "$scope.tagFunction",
            "taggingLabel": "(adding new)",
            "taggingTokens": "ENTER|,"
          }
        },
        {
          "key": "grouping",
          "options": {
            "groupBy": "group"
          }
        },
        {
          "key": "grouping_and_tagging",
          "options": {
            "groupBy": "group",
            "tagging": "$scope.tagFunction",
            "taggingLabel": "(adding new)",
            "taggingTokens": "ENTER|,"
          }
        },
        {
          "key": "single_grouping_and_tagging",
          "options": {
            "groupBy": "group",
            "tagging": "$scope.tagFunction",
            "taggingLabel": "(adding new)",
            "taggingTokens": "ENTER|,"
          }
        },
        {
          "key": "single_tagging",
          "options": {
            "tagging": "$scope.tagFunction",
            "taggingLabel": "(adding new)",
            "taggingTokens": "ENTER|,"
          }
        }
      ],
      "action": [
        {
          "category": "demo",
          "name": "uiSelectDemo",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-09-24T01:17:34.116"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.116",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:276",
    "@version": 1,
    "@class": "Event",
    "eventId": 10277,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.execQueryCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execQueryCmd",
          "readOnly": true,
          "title": "Execute",
          "success": "/page/org.clinical3po.backendservices-v-db-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.140"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.140",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:277",
    "@version": 1,
    "@class": "Event",
    "eventId": 10278,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.config.update",
      "schema": {
        "type": "object",
        "required": [
          "host",
          "app"
        ],
        "title": "Configuration",
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "enum": [
              "injector",
              "www.clinical3po.org",
              "www.edibleforestgarden.ca"
            ]
          },
          "app": {
            "type": "string",
            "title": "Application",
            "enum": [
              "main",
              "blog"
            ]
          },
          "blogCacheSize": {
            "type": "number",
            "title": "Blog Cache Size (number of blogs cached for the entire server. max 9999)",
            "maxLength": 4
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "host",
        "app",
        "blogCacheSize"
      ],
      "action": [
        {
          "category": "config",
          "name": "updConfig",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "createDate": "2015-09-24T01:17:34.150"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.150",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:278",
    "@version": 1,
    "@class": "Event",
    "eventId": 10279,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.cors.update",
      "schema": {
        "type": "object",
        "title": "Cors Update",
        "required": [
          "ruleClass",
          "enableCors"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "enableCors": {
            "title": "Enable CORS?",
            "type": "boolean"
          },
          "corsHosts": {
            "title": "Allowed Hosts",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "enableCors",
        "corsHosts"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updCors",
          "readOnly": false,
          "title": "Update",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.161"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.161",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:279",
    "@version": 1,
    "@class": "Event",
    "eventId": 10280,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.news.update",
      "schema": {
        "type": "object",
        "title": "News",
        "required": [
          "newsId",
          "description"
        ],
        "properties": {
          "newsId": {
            "title": "News Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "newsId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "news",
          "name": "updNews",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-news-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.176"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.176",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:280",
    "@version": 1,
    "@class": "Event",
    "eventId": 10281,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.menu.updateMenuItem",
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-menu-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.193"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.193",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:281",
    "@version": 1,
    "@class": "Event",
    "eventId": 10282,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.menu.updateMenu",
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "host",
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-menu-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.201"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.201",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:282",
    "@version": 1,
    "@class": "Event",
    "eventId": 10283,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.host.update",
      "schema": {
        "type": "object",
        "title": "Host",
        "required": [
          "base",
          "transferMinSize"
        ],
        "properties": {
          "base": {
            "title": "Base",
            "type": "string"
          },
          "transferMinSize": {
            "title": "Transfer Min Size",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "base",
        "transferMinSize"
      ],
      "action": [
        {
          "category": "host",
          "name": "updHost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-host-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.217"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.217",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:283",
    "@version": 1,
    "@class": "Event",
    "eventId": 10284,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.blog.add",
      "schema": {
        "type": "object",
        "title": "Blog",
        "required": [
          "blogId",
          "description"
        ],
        "properties": {
          "blogId": {
            "title": "Blog Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "blogId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "addBlog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-blog-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.228"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.228",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:284",
    "@version": 1,
    "@class": "Event",
    "eventId": 10285,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.host.add",
      "schema": {
        "type": "object",
        "title": "Host",
        "required": [
          "id",
          "base",
          "transferMinSize"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "transferMinSize": {
            "title": "Transfer Min Size",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "id",
        "base",
        "transferMinSize"
      ],
      "action": [
        {
          "category": "host",
          "name": "addHost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-host-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.238"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.238",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:285",
    "@version": 1,
    "@class": "Event",
    "eventId": 10286,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.change.password",
      "schema": {
        "type": "object",
        "required": [
          "password",
          "password_confirm"
        ],
        "title": "Change Password",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        }
      ],
      "action": [
        {
          "category": "user",
          "name": "updPassword",
          "readOnly": false,
          "title": "Change Password"
        }
      ],
      "createDate": "2015-09-24T01:17:34.251"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.251",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:286",
    "@version": 1,
    "@class": "Event",
    "eventId": 10287,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.role.update",
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "desc"
        ],
        "properties": {
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "updRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-role-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.267"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.267",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:287",
    "@version": 1,
    "@class": "Event",
    "eventId": 10288,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.profile",
      "schema": {
        "type": "object",
        "required": [],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in.",
            "readonly": true
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in.",
            "readonly": true
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "updProfile",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "createDate": "2015-09-24T01:17:34.287"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.287",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:288",
    "@version": 1,
    "@class": "Event",
    "eventId": 10289,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.schema.update",
      "schema": {
        "type": "object",
        "title": "Validation Schema Update",
        "required": [
          "ruleClass"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "schema": {
            "title": "Validation Schema",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        {
          "key": "schema",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "updSchema",
          "readOnly": false,
          "title": "Update",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.303"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.303",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:289",
    "@version": 1,
    "@class": "Event",
    "eventId": 10290,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.signin",
      "schema": {
        "type": "object",
        "title": "Sign In",
        "required": [
          "userIdEmail",
          "password"
        ],
        "properties": {
          "userIdEmail": {
            "title": "UserId or Email",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "rememberMe": {
            "title": "Remember me",
            "type": "boolean",
            "default": false
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "userIdEmail",
        {
          "key": "password",
          "type": "password"
        },
        "rememberMe"
      ],
      "action": [
        {
          "category": "user",
          "name": "signInUser",
          "readOnly": false,
          "title": "Sign In",
          "success": "/page/org.clinical3po.backendservices-v-user-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.315"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.315",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:290",
    "@version": 1,
    "@class": "Event",
    "eventId": 10291,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.publisher.update",
      "schema": {
        "type": "object",
        "title": "Publisher Update",
        "required": [
          "ruleClass",
          "isPublisher"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "isPublisher": {
            "title": "Publish Event?",
            "type": "boolean"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "isPublisher"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updPublisher",
          "readOnly": false,
          "title": "Update",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.327"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.327",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:291",
    "@version": 1,
    "@class": "Event",
    "eventId": 10292,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.catalog.add",
      "schema": {
        "type": "object",
        "title": "Catalog",
        "required": [
          "catalogId",
          "description"
        ],
        "properties": {
          "catalogId": {
            "title": "Catalog Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "catalogId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "catalog",
          "name": "addCatalog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-catalog-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.343"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.343",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:292",
    "@version": 1,
    "@class": "Event",
    "eventId": 10293,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.role.add",
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "roleId",
          "desc"
        ],
        "properties": {
          "roleId": {
            "title": "Role Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "roleId",
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "addRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-role-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.357"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.357",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:293",
    "@version": 1,
    "@class": "Event",
    "eventId": 10294,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.product.update",
      "schema": {
        "type": "object",
        "title": "Product",
        "required": [
          "in_HasProduct",
          "productId",
          "name",
          "description",
          "variants"
        ],
        "properties": {
          "in_HasProduct": {
            "title": "CatalogId",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "productId": {
            "title": "Product Id",
            "type": "string",
            "readonly": true
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "variants": {
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "title": "SKU",
                  "type": "string"
                },
                "price": {
                  "title": "Price",
                  "type": "number"
                },
                "type": {
                  "title": "Type",
                  "type": "string"
                },
                "image": {
                  "title": "Image",
                  "type": "string"
                },
                "inventory": {
                  "title": "Inventory",
                  "type": "number"
                },
                "weight": {
                  "title": "Weight",
                  "type": "number"
                },
                "height": {
                  "title": "Height",
                  "type": "number"
                },
                "width": {
                  "title": "Width",
                  "type": "number"
                },
                "length": {
                  "title": "Length",
                  "type": "number"
                }
              },
              "required": [
                "sku",
                "price",
                "type",
                "image",
                "inventory",
                "weight",
                "height",
                "width",
                "length"
              ]
            }
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "in_HasProduct",
          "options": {
            "category": "catalog",
            "name": "getCatalogDropdown"
          }
        },
        "productId",
        "name",
        "description",
        {
          "key": "variants",
          "add": "New",
          "style": {
            "add": "btn-success"
          },
          "items": [
            "variants[].sku",
            "variants[].price",
            "variants[].type",
            "variants[].image",
            "variants[].inventory",
            "variants[].weight",
            "variants[].height",
            "variants[].width",
            "variants[].length"
          ]
        }
      ],
      "action": [
        {
          "category": "catalog",
          "name": "updProduct",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-product-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.373"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.373",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:294",
    "@version": 1,
    "@class": "Event",
    "eventId": 10295,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.import",
      "schema": {
        "type": "object",
        "title": "Import Rule File",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Rule Source Code",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "sourceCode"
      ],
      "action": [
        {
          "category": "rule",
          "name": "impRule",
          "readOnly": false,
          "title": "Import Rule",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.383"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.383",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:295",
    "@version": 1,
    "@class": "Event",
    "eventId": 10296,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.update.profile",
      "schema": {
        "type": "object",
        "title": "Update Profile",
        "properties": {
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "updProfile",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "createDate": "2015-09-24T01:17:34.398"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.398",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:296",
    "@version": 1,
    "@class": "Event",
    "eventId": 10297,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.exportDb",
      "schema": {
        "type": "object",
        "title": "Export",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "title": "Path for export file",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "path"
      ],
      "action": [
        {
          "category": "db",
          "name": "expDb",
          "readOnly": true,
          "title": "Export",
          "success": "/page/org.clinical3po.backendservices-v-db-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.429"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.429",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:297",
    "@version": 1,
    "@class": "Event",
    "eventId": 10298,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.transform.request.update_d",
      "schema": {
        "type": "object",
        "title": "Update Request Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number",
            "readonly": true
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "updTransformRequest",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.437"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.437",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:298",
    "@version": 1,
    "@class": "Event",
    "eventId": 10299,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.class.feed",
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "messageNumber",
          "hppInd",
          "centreCode"
        ],
        "title": "class",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "requestId": {
            "type": "number",
            "title": "Request Id",
            "maxLength": 10
          },
          "messageNumber": {
            "type": "string",
            "title": "Message Number",
            "enum": [
              "E0500",
              "E0450",
              "E0220",
              "E0130",
              "E0110",
              "E0014",
              "E0012",
              "E0010",
              "A0120",
              "A0090"
            ]
          },
          "loanNumber": {
            "type": "string",
            "title": "Loan Number",
            "maxLength": 10
          },
          "pid": {
            "type": "string",
            "title": "PID",
            "enum": [
              "263",
              "701",
              "702",
              "703",
              "704",
              "705",
              "706",
              "798",
              "799",
              "233",
              "237",
              "262",
              "265",
              "232",
              "257",
              "248",
              "238",
              "900",
              "910",
              "999",
              "259",
              "131",
              "600",
              "601",
              "602",
              "603",
              "697",
              "698",
              "699",
              "141",
              "142",
              "152",
              "232",
              "257",
              "800",
              "899"
            ]
          },
          "hppInd": {
            "type": "string",
            "title": "HPP Indicator",
            "enum": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8"
            ]
          },
          "loanCategroy": {
            "title": "Loan Category",
            "type": "string",
            "enum": [
              "CMHC",
              "COL1",
              "COL2",
              "COL3",
              "ANEW",
              "ANUT",
              "AUSE",
              "AUUT",
              "MCYC",
              "MOHO",
              "TCCN",
              "TCCU",
              "GPIN",
              "GPIV"
            ],
            "default": "CHMC"
          },
          "debtConsolidation": {
            "title": "Debt Consolidation",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "incomeVerification": {
            "title": "Income Verification",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "liabilityType": {
            "title": "Liability Type",
            "type": "string",
            "enum": [
              "701",
              "700",
              "602",
              "603",
              "601",
              "600",
              "302",
              "301",
              "300",
              "BSC",
              "CLN",
              "PLC",
              "MTG",
              "REN",
              "DC0"
            ]
          },
          "plcPurposeCode": {
            "title": "Plc PurposeCode",
            "type": "string",
            "enum": [
              "000",
              "001",
              "002",
              "003",
              "004",
              "005",
              "006",
              "009"
            ]
          },
          "fullLiabilityIndicator": {
            "title": "Full Liability Indicator",
            "type": "string",
            "enum": [
              "1",
              "4"
            ]
          },
          "solicitorName": {
            "title": "Solicitor Name",
            "type": "string",
            "maxLength": 25
          },
          "propertyProvCode": {
            "title": "Property Prov Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "centreCode": {
            "title": "Centre Code",
            "type": "string",
            "enum": [
              "TO",
              "VA",
              "CA",
              "TB",
              "REBO",
              "Bank@Work",
              "WP",
              "HL",
              "Training",
              "MT",
              "RISK"
            ],
            "default": "TO"
          },
          "processingDate": {
            "title": "Processing Date",
            "type": "string",
            "format": "date"
          },
          "reportDate": {
            "title": "Report Date",
            "type": "string",
            "format": "date"
          },
          "customerName": {
            "title": "Customer Name",
            "type": "string",
            "maxLength": 250,
            "default": "New Injector"
          },
          "postNumber": {
            "title": "Post Number",
            "type": "string",
            "maxLength": 3,
            "default": "123"
          },
          "transit": {
            "title": "Transit",
            "type": "string",
            "maxLength": 5,
            "default": "00001"
          },
          "cid": {
            "title": "CID",
            "type": "string",
            "maxLength": 3,
            "default": "100"
          },
          "fundsDisbursed": {
            "title": "Funds Disbursed",
            "type": "number",
            "default": 1000
          },
          "relationship": {
            "title": "Relationship",
            "type": "string",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "default": "1"
          },
          "marketingSourceCode": {
            "title": "Marketing Source Code",
            "type": "string",
            "enum": [
              "DWPV",
              "PBCY",
              "BFIN",
              "BFCE",
              "BDLG",
              "OFFN",
              "BLAK",
              "EQLH",
              "OFFB",
              "NEW2",
              "FCBC",
              "JJ99",
              "AHBL",
              "CASE",
              "NRES",
              "BTOB",
              "GENL",
              "ABL1",
              "RP22",
              "RP99",
              "EQL1"
            ],
            "default": "RP99"
          },
          "provinceCode": {
            "title": "Province Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "newConstructionInd": {
            "title": "New Construction Ind",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "processTypeCd": {
            "title": "Process Type",
            "type": "string"
          },
          "processSubtypeCd": {
            "title": "Process Sub Type",
            "type": "string"
          },
          "tags": {
            "title": "Tags[Maximum 5 tags separated by ,]",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "type": "help",
          "helpvalue": "<h4>Class Feed Example</h4>"
        },
        "environment",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for injection rules</h4>"
        },
        "messageNumber",
        "hppInd",
        {
          "type": "conditional",
          "condition": "modelData.hppInd==='0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012' || modelData.messageNumber === 'E0014'",
              "items": [
                "pid"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0010'",
              "items": [
                "pid",
                {
                  "key": "debtConsolidation",
                  "type": "radiobuttons"
                },
                "loanCategroy"
              ]
            }
          ]
        },
        {
          "type": "conditional",
          "condition": "modelData.hppInd !== '0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012'",
              "items": [
                "plcPurposeCode",
                "fullLiabilityIndicator",
                "solicitorName",
                "propertyProvCode"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber === 'E0014'",
              "items": [
                "plcPurposeCode",
                "solicitorName",
                "propertyProvCode"
              ]
            }
          ]
        },
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for epi mappings</h4>"
        },
        "loanNumber",
        "customerName",
        "postNumber",
        "transit",
        "cid",
        "fundsDisbursed",
        "relationship",
        "marketingSourceCode",
        {
          "key": "incomeVerification",
          "type": "radios",
          "titleMap": {
            "Y": "Income Verification is requried.",
            "N": "Income Verification is not required."
          }
        },
        "centreCode",
        "provinceCode",
        "newConstructionInd",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for feed storage and retrieval only</h4>"
        },
        "processTypeCd",
        "processSubtypeCd",
        {
          "key": "tags",
          "type": "textarea"
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injClassFeed",
          "readOnly": false,
          "title": "Inject",
          "success": "/"
        },
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "updFeedMeta",
          "readOnly": false,
          "title": "Update Meta",
          "success": "/"
        }
      ],
      "createDate": "2015-09-24T01:17:34.448"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.448",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:299",
    "@version": 1,
    "@class": "Event",
    "eventId": 10300,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.blog.update",
      "schema": {
        "type": "object",
        "title": "Blog",
        "required": [
          "blogId",
          "description"
        ],
        "properties": {
          "blogId": {
            "title": "Blog Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "blogId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "updBlog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-blog-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.486"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.486",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:300",
    "@version": 1,
    "@class": "Event",
    "eventId": 10301,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.feeds",
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "feeds"
        ],
        "title": "Feeds",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "feeds": {
            "type": "string",
            "title": "Feeds"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "environment",
        {
          "key": "feeds",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injAllFeed",
          "readOnly": false,
          "title": "Inject"
        }
      ],
      "createDate": "2015-09-24T01:17:34.501"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.501",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:301",
    "@version": 1,
    "@class": "Event",
    "eventId": 10302,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.menu.addMenu",
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "host",
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-menu-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.512"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.512",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:302",
    "@version": 1,
    "@class": "Event",
    "eventId": 10303,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.forum.update",
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "forumId",
          "description"
        ],
        "properties": {
          "forumId": {
            "title": "Forum Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "forumId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "updForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-forum-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.521"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.521",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:303",
    "@version": 1,
    "@class": "Event",
    "eventId": 10304,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.user.role.update_d",
      "schema": {
        "type": "object",
        "title": "Update Role",
        "properties": {
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "role",
                  "name": "getRoleDropdown"
                }
              }
            ]
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "roles"
      ],
      "action": [
        {
          "category": "user",
          "name": "updRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-user-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.528"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.528",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:304",
    "@version": 1,
    "@class": "Event",
    "eventId": 10305,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.common.command",
      "schema": {
        "type": "object",
        "title": "Command",
        "required": [
          "name",
          "data"
        ],
        "properties": {
          "host": {
            "title": "Host",
            "type": "string",
            "enum": [
              "www.clinical3po.org",
              "injector"
            ]
          },
          "app": {
            "title": "App",
            "type": "string",
            "enum": [
              "main",
              "forum",
              "blog",
              "shopping"
            ]
          },
          "category": {
            "title": "Category",
            "type": "string",
            "enum": [
              "user",
              "form"
            ]
          },
          "readOnly": {
            "title": "ReadOnly",
            "type": "boolean",
            "default": false
          },
          "name": {
            "title": "Name",
            "type": "string",
            "enum": [
              "getForm",
              "addForm",
              "delForm",
              "updForm",
              "getFormList"
            ]
          },
          "data": {
            "title": "Data",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "host",
        "app",
        "category",
        "readOnly",
        "name",
        {
          "key": "data",
          "type": "textarea"
        },
        {
          "type": "submit",
          "style": "btn-info",
          "title": "Submit"
        }
      ],
      "action": [
        {
          "category": "common",
          "name": "command",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-09-24T01:17:34.549"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.549",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:305",
    "@version": 1,
    "@class": "Event",
    "eventId": 10306,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.db.execUpdateCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execUpdateCmd",
          "readOnly": false,
          "title": "Execute",
          "success": "/page/org.clinical3po.backendservices-v-db-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.574"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.574",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:306",
    "@version": 1,
    "@class": "Event",
    "eventId": 10307,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.subscriber.update",
      "schema": {
        "type": "object",
        "title": "Subscriber Update",
        "required": [
          "ruleClass",
          "isSubscriber"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "isPublisher": {
            "title": "Subscribe Event?",
            "type": "boolean"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "isSubscriber"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updSubscriber",
          "readOnly": false,
          "title": "Update",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.620"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.620",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:307",
    "@version": 1,
    "@class": "Event",
    "eventId": 10308,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.transform.request.add_d",
      "schema": {
        "type": "object",
        "title": "Add Request Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number"
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "addTransformRequest",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.639"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.639",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:308",
    "@version": 1,
    "@class": "Event",
    "eventId": 10309,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.news.add",
      "schema": {
        "type": "object",
        "title": "News",
        "required": [
          "newsId",
          "description"
        ],
        "properties": {
          "newsId": {
            "title": "News Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "newsId",
        "description",
        {
          "key": "in_Own",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "news",
          "name": "addNews",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-news-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.660"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.660",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:309",
    "@version": 1,
    "@class": "Event",
    "eventId": 10310,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.rule.add",
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "ruleClass",
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "addRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-rule-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.673"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.673",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:310",
    "@version": 1,
    "@class": "Event",
    "eventId": 10311,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.demo.strapselect_d",
      "schema": {
        "type": "object",
        "title": "Demo Strape Select",
        "required": [
          "strapSingleSelectStatic",
          "strapMultipleSelectStatic",
          "strapSingleSelectDynamic",
          "strapMultipleSelectDynamic",
          "strapSingleSelectPopulated",
          "strapMultipleSelectPopulated"
        ],
        "properties": {
          "strapSingleSelectStatic": {
            "title": "Strap Single Select Static(Dropdown items from controller)",
            "type": "string",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "label3"
              }
            ]
          },
          "strapMultipleSelectStatic": {
            "title": "Strap Multiple Select Static(Dropdown items from controller)",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "long very very long label3"
              }
            ]
          },
          "strapSingleSelectDynamic": {
            "title": "Strap Single Select Dynamic(Dropdown items loaded from remote)",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "strapMultipleSelectDynamic": {
            "title": "Strap Multiple Select Dynamic(Dropdown items loaded from remote)",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "strapSingleSelectPopulated": {
            "title": "Strap Single Select Populated(Dropdown populated on server)",
            "type": "string",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "strapMultipleSelectPopulated": {
            "title": "Strap Multiple Select Populated(Dropdown populated on server)",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "key": "strapSingleSelectStatic"
        },
        {
          "key": "strapMultipleSelectStatic"
        },
        {
          "key": "strapSingleSelectDynamic",
          "options": {
            "category": "demo",
            "name": "getDropdown"
          }
        },
        {
          "key": "strapMultipleSelectDynamic",
          "options": {
            "category": "demo",
            "name": "getDropdown"
          }
        },
        {
          "key": "strapSingleSelectPopulated"
        },
        {
          "key": "strapMultipleSelectPopulated"
        }
      ],
      "action": [
        {
          "category": "demo",
          "name": "selectDemo",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-09-24T01:17:34.698"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.698",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:311",
    "@version": 1,
    "@class": "Event",
    "eventId": 10312,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.page.import",
      "schema": {
        "type": "object",
        "title": "Import Page File",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Page Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "pageId",
        "content"
      ],
      "action": [
        {
          "category": "page",
          "name": "impPage",
          "readOnly": false,
          "title": "Import Page",
          "success": "/page/org.clinical3po.backendservices-v-page-admin-home"
        }
      ],
      "createDate": "2015-09-24T01:17:34.740"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.740",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:312",
    "@version": 1,
    "@class": "Event",
    "eventId": 10313,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.forum.post.add",
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/org.clinical3po.backendservices-v-forum-post"
        }
      ],
      "createDate": "2015-09-24T01:17:34.761"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.761",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:313",
    "@version": 1,
    "@class": "Event",
    "eventId": 10314,
    "createUserId": "w.ding",
    "data": {
      "formId": "org.clinical3po.backendservices.page.update",
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "w.ding",
      "form": [
        "pageId",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "updPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-09-24T01:17:34.796"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-09-24T01:17:34.796",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:315",
    "@version": 1,
    "@class": "Event",
    "eventId": 10316,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-user-admin-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.UserAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n            $scope.getAllUser = {\n                category : 'user',\n                name : 'getAllUser',\n                readOnly: true,\n                data : {\n                    pageSize : 10,\n                    pageNo : 1,\n                    sortDir : 'desc',\n                    sortedBy : 'createDate'\n                }\n            };\n            $scope.delUser = {\n                category : 'user',\n                name : 'delUser',\n                readOnly: false\n            };\n            $scope.lockUser = {\n                category : 'user',\n                name : 'lockUser',\n                readOnly: false\n            };\n            $scope.unlockUser = {\n                category : 'user',\n                name : 'unlockUser',\n                readOnly: false\n            };\n\n            $scope.page = { maxSize: 10, totalItems: 0, numPages: 0 };\n            $scope.users = [];\n            $scope.roles = [];\n            $scope.hosts = [];\n\n            $scope.headers = [\n                {\n                    title: 'Delete',\n                    value: 'delete'\n                },\n                {\n                    title: 'Locked',\n                    value: 'locked'\n                },\n                {\n                    title: 'User Id',\n                    value: 'userId'\n                },\n                {\n                    title: 'Host',\n                    value: 'host'\n                },\n                {\n                    title: 'Roles',\n                    value: 'roles'\n                },\n                {\n                    title: 'Email',\n                    value: 'email'\n                },\n                {\n                    title: 'First Name',\n                    value: 'firstName'\n                },\n                {\n                    title: 'Last Name',\n                    value: 'lastName'\n                },\n                {\n                    title: 'Up Users',\n                    value: 'upUsers'\n                },\n                {\n                    title: 'Down Users',\n                    value: 'downUsers'\n                },\n                {\n                    title: 'Karma',\n                    value: 'karma'\n                },\n                {\n                    title: 'Create Date',\n                    value: 'createDate'\n                },\n                {\n                    title: 'Update Date',\n                    value: 'updateDate'\n                },\n                {\n                    title: 'Log in Date',\n                    value: 'logInDate'\n                },\n                {\n                    title: 'Log out Date',\n                    value: 'logOutDate'\n                }\n            ];\n\n            $scope.fetchResult = function () {\n                $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllUser))}})\n                        .success(function (result, status, headers, config) {\n                            $scope.users = result.users;\n                            $scope.roles = result.roles;\n                            $scope.hosts = result.hosts;\n                            $scope.page.totalItems = result.total;\n                            //console.log($scope.users);\n                            console.log($scope.roles);\n                            console.log($scope.hosts);\n                            //console.log($scope.page.totalItems);\n                            $scope.page.numPages = Math.ceil($scope.page.totalItems / $scope.getAllUser.data.pageSize);\n                            //console.log($scope.page.numPages);\n                        })\n            };\n\n            $scope.onUserSort = function (sortedBy, sortDir) {\n                $scope.getAllUser.data.sortDir = sortDir;\n                $scope.getAllUser.data.sortedBy = sortedBy;\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            //Will be called when filtering the grid, will reset the page number to one\n            $scope.filterResult = function () {\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            $scope.pageChanged = function() {\n                $scope.fetchResult();\n            };\n\n            $scope.lock = function(user) {\n                $scope.lockUser.data = user;\n                $http.post('api/rs', $scope.lockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = true;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.unlock = function(user) {\n                $scope.unlockUser.data = user;\n                $http.post('api/rs', $scope.unlockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = false;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.delete = function(user) {\n                $scope.delUser.data = user;\n                $http.post('api/rs', $scope.delUser)\n                        .success(function (data, status, headers, config) {\n                            $scope.users.splice($scope.users.indexOf(user), 1);\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.update = function(user) {\n                modelDataService.setModelData(user);\n                $location.path(\"/page/org.clinical3po.backendservices-v-user-admin-update\");\n            };\n\n            $scope.pageChanged();\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.UserAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Users\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onUserSort\" sortdir=\"getAllUser.data.sortDir\" sortedby=\"getAllUser.data.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.locked\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.userId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"></option>\n                                </select>\n                            </td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.roles\" ng-options=\"role for role in roles\" >\n                                    <option value=\"\"></option>\n                                </select>\n                            </td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.email\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.firstName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.lastName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.upUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.downUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.karma\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.updateDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logInDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logOutDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"user in users\">\n                            <td><a href ng-click=\"delete(user)\">Delete</a></td>\n                            <td><a href ng-click=\"lock(user)\">{{user.locked}}</a></td>\n                            <td><a href ng-click=\"update(user)\">{{user.userId}}</a></td>\n                            <td>{{user.host}}</td>\n                            <td>{{user.roles}}</td>\n                            <td>{{user.email}}</td>\n                            <td>{{user.firstName}}</td>\n                            <td>{{user.lastName}}</td>\n                            <td>{{user.upUsers}}</td>\n                            <td>{{user.downUsers}}</td>\n                            <td>{{user.karma}}</td>\n                            <td>{{user.createDate}}</td>\n                            <td>{{user.updateDate}}</td>\n                            <td>{{user.logInDate}}</td>\n                            <td>{{page.logOutDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getAllUser.data.pageSize\" ng-model=\"getAllUser.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\n                    <table>\n                        <tr>\n                            <td>Page: {{getAllUser.data.pageNo}} / {{page.numPages}}</td>\n                            <td>&nbsp;</td>\n                            <td>Page Size:</td>\n                            <td><input type=\"number\" min=\"1\" max=\"200\" ng-change=\"filterResult()\" ng-model=\"getAllUser.data.pageSize\"></td>\n                        </tr>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:41.804"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.804",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:316",
    "@version": 1,
    "@class": "Event",
    "eventId": 10317,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-db-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.DbAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n\n        $scope.execCommand = {\n            category : 'db',\n            name : 'execCommand',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.exportDb = {\n            category : 'db',\n            name : 'exportDb',\n            readOnly: true,\n            data: {}\n        };\n        $scope.replayEvent = {\n            category : 'db',\n            name : 'replayEvent',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.downloadEvent = {\n            category : 'db',\n            name : 'downloadEvent',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.exportDb = function() {\n            console.log(\"go to exportDb form\");\n            $location.path('/form/org.clinical3po.backendservices.db.exportDb');\n        };\n\n        $scope.execSchemaCommand = function() {\n            $location.path('/form/org.clinical3po.backendservices.db.execSchemaCommand');\n        };\n\n        $scope.execUpdateCommand = function() {\n            $location.path('/form/org.clinical3po.backendservices.db.execUpdateCommand');\n        };\n\n        $scope.execQueryCommand = function() {\n            $location.path('/page/org.clinical3po.backendservices-v-db-query-command');\n        };\n\n        $scope.replayEvent = function() {\n            $location.path('/form/org.clinical3po.backendservices.db.replayEvent');\n        };\n\n        $scope.downloadEvent = function() {\n            $location.path('/page/org.clinical3po.backendservices-v-db-event-download');\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.DbAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Event\">\n                    <h1>Event</h1>\n                    <p><a ng-click=\"exportDb()\" href=\"\">Export Database</a></p>\n                    <p><a ng-click=\"execSchemaCommand()\" href=\"\">Exec Schema Commands</a></p>\n                    <p><a ng-click=\"execUpdateCommand()\" href=\"\">Exec Update Commands</a></p>\n                    <p><a ng-click=\"execQueryCommand()\" href=\"\">Exec Query Commands</a></p>\n                    <p><a ng-click=\"downloadEvent()\" href=\"\">Download Events</a></p>\n                    <p><a ng-click=\"replayEvent()\" href=\"\">Replay Events</a></p>\n                </tab>\n                <tab heading=\"Database Statistic\">\n                    <table class=\"table table-striped\">\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:41.847"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.847",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:317",
    "@version": 1,
    "@class": "Event",
    "eventId": 10318,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-page-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.PageAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllPage = {\n            category : 'page',\n            name : 'getAllPage',\n            readOnly: true\n        };\n        $scope.delPage = {\n            category : 'page',\n            name : 'delPage',\n            readOnly: false,\n            data: {}\n        };\n        $scope.pages = [];\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Page Id',\n                value: 'pageId'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(page) {\n            $scope.delPage.data = page;\n            $http.post('api/rs', $scope.delPage)\n                    .success(function (data, status, headers, config) {\n                        $scope.pages.splice($scope.pages.indexOf(page), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(page) {\n            modelDataService.setModelData(page);\n            $location.path(\"/form/org.clinical3po.backendservices.page.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.page.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.page.import\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllPage))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.pages = result;\n                        //console.log($scope.pages);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.PageAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h1>Pages</h1>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.pageId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(page)\">Delete</a></td>\n                            <td><a href ng-click=\"update(page)\">{{page.pageId}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Updated\">\n                    <div>This is tab updated</div>\n                </tab>\n                <tab heading=\"MyPage\" ng-if=\"global.isLogin\">\n                    <div>This is tab MyPage</div>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:41.888"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.888",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:318",
    "@version": 1,
    "@class": "Event",
    "eventId": 10319,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-challenges",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Web application development challenges</h1>\n            <p>\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\n\n            <h2>Productivity</h2>\n            <p>\n            Backendservices Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\n            <p>\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\n            <p>\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\n\n            <h2>Quality Assurance</h2>\n            <p>\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\n            <p>\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\n            <p>\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\n            <p>\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\n            <p>\n            The report contains some information generated by the tools and some information written by the developers.\n            <p>\n            <ul>Version number</ul>\n            <ul>Scope of the change</ul>\n            <ul>Unit test cases (generated)</ul>\n            <ul>e2e test cases (generated)</ul>\n            <ul>Complexity and coverage (generated)</ul>\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\n            <p>\n\n            <h2>Release Management</h2>\n            <p>\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\n            <p>\n\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\n            <p>\n\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\n            <p>\n\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\n            <p>\n\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\n            <p>\n\n            In our software release world, we can understand it as\n            <p>\n\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\n            <p>\n\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\n            <p>\n\n            The traditional approach is to reduce the number of deployments to reduce the lost.\n            <p>\n\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\n            <p>\n\n            Let?s look at the source of errors and try to lower the percentage of occurrence\n            <p>\n            <h3>Defects in code</h3>\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\n            <p>\n\n            <h3>Errors in assembly or packaging</h3>\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\n            <p>\n\n            <h3>Errors executing changes</h3>\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\n\n            <p>\n            Now, let?s look at the cost of error and see if we can reduce it.\n            <p>\n\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\n            <p>\n\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\n            <p>\n\n            For example: a component can have the following part that can be deployed independently and versioned independently.\n            <p>\n\n            AngularJS code (front end)\n            <p>\n            Template (front end)\n            <p>\n            Rules (back end)\n            <p>\n            Rules Data (back end)\n            <p>\n            Reference and configuration (back end)\n            <p>\n\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\n            <p>\n\n            <p>\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\n            <p>\n\n            <p>\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\n            <p>\n\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\n            <p>\n\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\n            <p>\n\n            <h2>Production Configuration</h2>\n            <p>\n\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\n            <p>\n\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\n            <p>\n\n            The second level is rules data configuration\n            <p>\n\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\n            <p>\n\n            The third level is rule logic configuration\n            <p>\n\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\n            <p>\n\n            <h2>Security</h2>\n            <p>\n\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\n            <p>\n\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\n            <p>\n\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\n            <p>\n\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\n            <p>\n\n            <h2>Performance</h2>\n\n            <h2>Monitoring</h2>\n            <p>\n\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\n            <p>\n\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\n            <p>\n\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\n            <p>\n\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\n            <p>\n\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\n            <p>\n\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\n            <p>\n\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\n            <p>\n\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\n            <p>\n\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\n            <p>\n\n            <h2>Legacy Coexistence</h2>\n            <p>\n\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\n            <p>\n\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\n            <p>\n\n            <h2>OCA Server</h2>\n            <p>\n\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\n            <p>\n\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\n            <p>\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\n            <p>\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\n            <p>\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\n            <p>\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\n\n            <h2>Future proof</h2>\n            <p>\n\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\n            <p>\n\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to us. Other organizations have used a similar software\n            engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's\n            engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a\n            quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google\n            that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview\n            of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel\n            Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\n        </div>\n    </div>\n</div>",
      "createDate": "2015-09-24T01:17:41.953"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.953",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:319",
    "@version": 1,
    "@class": "Event",
    "eventId": 10320,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-rule-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.RuleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        console.log('local rule admin page is reached');\n        $scope.getRule = {\n            category : 'rule',\n            name : 'getRule',\n            readOnly: true\n        };\n        $scope.delRule = {\n            category : 'rule',\n            name : 'delRule',\n            readOnly: false\n        };\n        $scope.rules = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(rule) {\n            $scope.delRule.data = rule;\n            $http.post('api/rs', $scope.delRule)\n                    .success(function (data, status, headers, config) {\n                        $scope.rules.splice($scope.rules.indexOf(rule), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(rule) {\n            // Stringify schema for schema update form\n            rule.schema = JSON.stringify(rule.schema, undefined, 2);\n            console.log('rule = ', rule);\n            modelDataService.setModelData(rule);\n            //$location.path(\"/form/org.clinical3po.backendservices.rule.update\");\n            $location.path(\"/page/org.clinical3po.backendservices-v-rule-home\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.rule.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.rule.import\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getRule))}})\n                    .success(function (data, status, headers, config) {\n                        $scope.rules = data;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.RuleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Rules\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"rule in rules | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(rule)\">Delete</a></td>\n                            <td><a href ng-click=\"update(rule)\">{{rule.ruleClass}}</a></td>\n                            <td>{{rule.host}}</td>\n                            <td>{{rule.createUserId}}</td>\n                            <td>{{rule.createDate}}</td>\n                            <td>{{rule.updateUserId}}</td>\n                            <td>{{rule.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:41.974"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.974",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:320",
    "@version": 1,
    "@class": "Event",
    "eventId": 10321,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-test-command-get",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.TestCommandCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        var getTest = {\n            category : 'test',\n            name : 'getTest',\n            readOnly: true,\n            data : {\n                pageSize : 10,\n                pageNo : 1,\n                sortDir : 'desc',\n                sortedBy : 'createDate'\n            }\n        };\n\n        $scope.data = '';\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getTest))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.data = result;\n                        console.log($scope.data);\n                    })\n        };\n        //$scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.TestCommandCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\n            {{data}}\n        </div>\n    </div>\n</div>",
      "createDate": "2015-09-24T01:17:41.996"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:41.996",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:321",
    "@version": 1,
    "@class": "Event",
    "eventId": 10322,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-production_cluster",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-09-24T01:17:42.030"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.030",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:322",
    "@version": 1,
    "@class": "Event",
    "eventId": 10323,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-post-view",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.ForumPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getComment = {\n            category: 'comment',\n            name: 'getCommentTree',\n            readOnly: true\n        }\n\n        $scope.addComment = {\n            category: 'comment',\n            name: 'addComment',\n            readOnly: false\n        }\n\n        $scope.getComment.data = modelDataService.getModelData();\n        $scope.addComment.data = modelDataService.getModelData();\n\n        $scope.comments = [];\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getComment))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.comments = result;\n                        console.log($scope.comments);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.aceOption = {\n            useWrapMode: true,\n            showGutter: false,\n            theme: 'eclipse',\n            mode: 'markdown'\n        };\n\n        $scope.submit = function () {\n            $http.post('api/rs', $scope.addComment)\n                    .success(function (data, status, headers, config) {\n                        toaster.pop('success', status, data);\n                        $scope.fetchResult();\n                    })\n        }\n\n        $scope.toggle = function (scope) {\n            scope.toggle();\n        };\n\n        var getRootNodesScope = function () {\n            return angular.element(document.getElementById(\"tree-root\")).scope();\n        };\n\n        $scope.collapseAll = function () {\n            var scope = getRootNodesScope();\n            scope.collapseAll();\n        };\n\n        $scope.expandAll = function () {\n            var scope = getRootNodesScope();\n            scope.expandAll();\n        };\n\n        $scope.treeFilter = $filter('uiTreeFilter');\n\n        $scope.supportedFields = ['content'];\n\n        $scope.toggledForm = false;\n        $scope.btnText = 'add comment';\n\n        $scope.toggleForm = function () {\n            $scope.toggledForm = !$scope.toggledForm;\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.ForumPostViewCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div>\n                <div>{{getComment.data.title}}</div>\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\n                <div marked=\"getComment.data.content\"></div>\n            </div>\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\n\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.out_Own && node.out_Own.length > 0\" data-nodrag\n                       ng-click=\"toggle(this)\"><span class=\"glyphicon\"\n                                                     ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span\n                            ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\n\n                    <div ng-bind-html=\"node.comment | highlight:pattern | trust\"></div>\n                    <!--\n                    <div class=\"panel-body\">\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\n                            <div class=\"form-group\">\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\n                            </div>\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                        </form>\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\n                    </div>\n                    -->\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.out_Own\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"out_Own\">\n                    <li ng-repeat=\"node in out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.079"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.079",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:323",
    "@version": 1,
    "@class": "Event",
    "eventId": 10324,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-omnichannel",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Omnichannel and Omnichannel Experience</h1>\n            <p>\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\n            </p>\n            <p>\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\n            </p>\n            <p>\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\n            </p>\n            <p>\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\n            </p>\n            <p>\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\n            </p>\n            <p>\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\n            </p>\n            <p>\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n                <ul>\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n                </ul>\n                <ul>\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n                </ul>\n                <ul>\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n                </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-09-24T01:17:42.109"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.109",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:324",
    "@version": 1,
    "@class": "Event",
    "eventId": 10325,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-blog-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.BlogAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getBlog = {\n            category : 'blog',\n            name : 'getBlog',\n            readOnly: true\n        };\n\n        $scope.delBlog = {\n            category : 'blog',\n            name : 'delBlog',\n            readOnly: false\n        };\n\n        $scope.blogs = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Blog Id',\n                value: 'blogId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(blog) {\n            $scope.delBlog.data = blog;\n            $http.post('api/rs', $scope.delBlog)\n                    .success(function (data, status, headers, config) {\n                        $scope.blogs.splice($scope.blogs.indexOf(blog), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.blog.add\");\n        };\n\n        $scope.update = function(blog) {\n            modelDataService.setModelData(blog);\n            $location.path(\"/form/org.clinical3po.backendservices.blog.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlog))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.blogs = result;\n                        //console.log($scope.blogs);\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.BlogAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Blog</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.blogId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"blog in blogs | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(blog)\">Delete</a></td>\n                            <td>{{blog.host}}</td>\n                            <td><a href ng-click=\"update(blog)\">{{blog.blogId}}</a></td>\n                            <td>{{blog.description}}</td>\n                            <td>{{blog.createUserId}}</td>\n                            <td>{{blog.createDate}}</td>\n                            <td>{{blog.updateUserId}}</td>\n                            <td>{{blog.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.133"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.133",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:325",
    "@version": 1,
    "@class": "Event",
    "eventId": 10326,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-production-cluster",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\ncluster environment setup.\n</body>\n</html>",
      "createDate": "2015-09-24T01:17:42.162"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.162",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:326",
    "@version": 1,
    "@class": "Event",
    "eventId": 10327,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-post-view_v2",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.ForumPostViewCtrl', ['$scope', '$http', '$location', 'authService', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, authService, $filter, toaster, modelDataService) {\n\n        $scope.postData = modelDataService.getModelData().post;\n        $scope.comments = [];\n\n        $scope.getComments = {\n            category: 'comment',\n            name: 'getComment',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.addComment = {\n            category: 'comment',\n            name: 'addComment',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.displayAddCommentRow = false;\n        $scope.displaySubmitCommentButton = false;\n        $scope.addCommentText = 'Reply';\n        $scope.addCommentClass = 'btn btn-info';\n        $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\n\n        $scope.toggleComment = function() {\n            $scope.displayAddCommentRow = !$scope.displayAddCommentRow;\n            if ($scope.addCommentText == 'Reply') {\n                $scope.addCommentText = 'Cancel';\n                $scope.addCommentClass = 'btn btn-danger';\n                $scope.addCommentGlyph = '';\n            } else {\n                $scope.addCommentText = 'Reply';\n                $scope.addCommentClass = 'btn btn-info';\n                $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\n            }\n        };\n\n        $scope.getCurrentUserId = function () {\n            return authService.authentication.currentUser.userId;\n        };\n\n        $scope.fetchComments = function () {\n            $scope.getComments.data[\"host\"] = $scope.postData.host;\n            $scope.getComments.data[\"@rid\"] = $scope.postData[\"@rid\"];\n            $http.post('api/rs', $scope.getComments)\n                .success(function (result, status, headers, config) {\n                    $scope.comments = result.comments;\n                })\n                .error(function (result, status, headers, config) {\n                    // error fetching comments, set comments to empty list.\n                    $scope.comments = [];\n                });\n        };\n\n        $scope.fetchComments();\n\n        $scope.submitComment = function () {\n            var commentContent = document.getElementById(\"newUserComment\").value;\n            console.log(\"adding comment\", commentContent);\n            if (commentContent != null && commentContent.length > 0) {\n                $scope.addComment.data[\"host\"] = $scope.postData.host;\n                $scope.addComment.data[\"@rid\"] = $scope.postData[\"@rid\"];\n                $scope.addComment.data.comment = commentContent;\n                $http.post('api/rs', $scope.addComment)\n                    .success(function (result, status, headers, config) {\n                        $scope.fetchComments();\n                        document.getElementById(\"newUserComment\").value = \"\";\n                        $scope.toggleComment();\n                    })\n                    .error(function (result, status, headers, config) {\n                        // TODO: think of what to do here...\n                        console.log(\"submitComment error, result:\", result);\n                    });\n            }\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.ForumPostViewCtrl\">\n    <h2>{{postData.title}}</h2>\n    <p>By: {{postData.createUserId}}. Published on: {{postData.createDate}}</p>\n    <pre>{{postData.content}}</pre>\n\n    <br />\n    <label>Replies:</label>\n    <table class=\"table table-striped table-bordered table-hover\">\n        <tbody>\n            <tr ng-repeat=\"comment in comments\" style=\"height:100px;\">\n                <td width=\"1%\">\n                    <label>{{comment.createUserId}}:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>{{comment.content}}</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <!--\n            <tr style=\"height:100px;\">\n                <td width=\"1%\" >\n                    <label>Nicholas:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>Great post.</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <tr style=\"height:20px\">\n            </tr>\n            <tr style=\"height:100px;\">\n                <td width=\"1%\">\n                    <label>w.ding:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>Thank you!</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <tr style=\"height:20px\">\n            </tr>-->\n            <!-- The rest of the current post content... -->\n            <!-- Then at the end -->\n            <tr style=\"height:100px;\" ng-show=\"displayAddCommentRow\">\n                <td width=\"1%\">\n                    <label>{{getCurrentUserId()}}:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment><textarea id=\"newUserComment\" type=\"text\" spellcheck=\"true\" style=\"width:100%;\"/></comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"pull-right\">\n        <button ng-class=\"addCommentClass\" ng-click=\"toggleComment()\" style=\"float:right;\">\n            <span ng-class=\"addCommentGlyph\" style=\"padding-right:5px;\"></span>\n            {{addCommentText}}\n        </button>\n        <button class=\"btn btn-success\" ng-click=\"submitComment()\" style=\"float:right;\" ng-show=\"displayAddCommentRow\">\n            Submit\n        </button>\n    </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.180"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.180",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:327",
    "@version": 1,
    "@class": "Event",
    "eventId": 10328,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-db-event-download",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.DbEventDownloadCtrl', ['$scope', '$routeParams', '$http', '$location', 'toaster', 'modelDataService', function($scope, $routeParams, $http, $location, toaster, modelDataService) {\n        var getForm = {\n            category : 'form',\n            name : 'getForm',\n            readOnly: true,\n            data : {\n                formId : 'org.clinical3po.backendservices.db.downloadEvent'\n            }\n        };\n\n        $scope.content = '';\n\n        $scope.saveTextAsFile = function ()\n        {\n            var textToWrite = document.getElementById(\"inputTextToSave\").value;\n            var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});\n            var fileNameToSaveAs = document.getElementById(\"inputFileNameToSaveAs\").value;\n\n            var downloadLink = document.createElement(\"a\");\n            downloadLink.download = fileNameToSaveAs;\n            downloadLink.innerHTML = \"Download File\";\n            if (window.webkitURL != null)\n            {\n                // Chrome allows the link to be clicked\n                // without actually adding it to the DOM.\n                downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n            }\n            else\n            {\n                // Firefox requires the link to be added to the DOM\n                // before it can be clicked.\n                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n                downloadLink.onclick = destroyClickedElement;\n                downloadLink.style.display = \"none\";\n                document.body.appendChild(downloadLink);\n            }\n\n            downloadLink.click();\n        }\n\n        function destroyClickedElement(event)\n        {\n            document.body.removeChild(event.target);\n        }\n\n\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getForm))}})\n                .success(function(result, status, headers, config) {\n                    $scope.schema = result.schema;\n                    console.log('schema = ', $scope.schema);\n                    $scope.form = result.form;\n                    console.log('form = ', $scope.form);\n                    $scope.action = result.action;\n                    console.log('action = ', $scope.action);\n                    $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n                    $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n                    $scope.modelData = result.model || modelDataService.getModelData() || {};\n                    modelDataService.setModelData(null); // reset the modelDataService variable.\n                    $scope.decorator = 'bootstrap-decorator';\n                })\n\n        $scope.setButtonIndex = function(index) {\n            $scope.buttonIndex = index;\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                $scope.action[$scope.buttonIndex].data = $scope.modelData;\n                $scope.action[$scope.buttonIndex].data.parentId = $routeParams.parentId;\n                $http.post('/api/rs', $scope.action[$scope.buttonIndex])\n                        .success(function (data, status, headers, config) {\n                            $scope.content = JSON.stringify(data, undefined, 2);\n                        })\n            }\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.DbEventDownloadCtrl\">\n    <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n        <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n            <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\">\n            </div>\n\n            <div ng-repeat=\"act in action\">\n                <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n            </div>\n        </form>\n    </div>\n    <div class=\"col-md-12\">\n        <table>\n            <tr><td>Events to Save:</td></tr>\n            <tr>\n                <td colspan=\"3\">\n                    <textarea id=\"inputTextToSave\" ng-model=\"content\" style=\"height:256px\"></textarea>\n                </td>\n            </tr>\n            <tr>\n                <td>Filename to Save As:</td>\n                <td><input id=\"inputFileNameToSaveAs\"/></td>\n                <td><button ng-click=\"saveTextAsFile()\">Save Text to File</button></td>\n            </tr>\n        </table>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.217"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.217",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:328",
    "@version": 1,
    "@class": "Event",
    "eventId": 10329,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-blog-post",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.BlogPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getBlogPost = {\n            category : 'blog',\n            name: 'getBlogPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n\n        $scope.fetchResult = function () {\n            $scope.getBlogPost.data.id = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlogPost))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.blog.post.add/\" + $scope.getBlogPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/org.clinical3po.backendservices-v-blog-post-view\");\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.BlogPostCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\n                        </tr>\n                        <tr>\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td>\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\n                                <div>{{post.createUser}} {{post.createDate}}</div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.236"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.236",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:329",
    "@version": 1,
    "@class": "Event",
    "eventId": 10330,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-get-started",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Get started</h1>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-dev-linux\">Check out and set up development environment on Linux</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-dev-windows7\">Check out and set up development environment on Windows 7</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-dev-mac\">Check out and set up development environment on MAC OS X</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-first-component\">Create your first component</a></h2>Component is the smallest development and deployment unit in the framework. It can be used to construct view/page which can be part of an application.\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-first-view\">Create your first view</a></h2>View is an smallest downloadable unit from the REST API server and it has dependencies with other views through routing.\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-first-application\">Create your first application</a></h2>Application consists of multiple views and manages routing between views.\n            </p>\n            <p>\n            <h2><a href=\"/page/org.clinical3po.backendservices-v-first-rest-api\">Create your first REST API</a></h2>Front end browser applications and mobile applications need to call REST services to be alive.\n            </p>\n\n        </div>\n    </div>\n</div>",
      "createDate": "2015-09-24T01:17:42.248"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.248",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:330",
    "@version": 1,
    "@class": "Event",
    "eventId": 10331,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-first-view",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Develop your first view</h1>\n            <p>\n                Once you have installed development environment following above steps, you should have the following folders in your working directory and java projects in each folder have been built using maven.\n\n            <ul>light</ul>\n            <ul>jsontoken</ul>\n            <ul>rule-engine</ul>\n\n            If you are a full stack developer, you can start the server from your ide in debug mode so that you can monitor the interaction between the browser and the server. Open/import maven project in light folder and start the server in debug mode at server/src/main/java/org.clinical3po.backendservices/server/Clinical3POServer.java\n            <p>\n            If you are just a front end develop, you can go to light/server/target and run\n        <pre>\n            java -jar clinical3po-backendservices-server.jar\n        </pre>\n\n            The server provides the REST API endpoints and of cause supply the static and javascript content; however, in order to speed up the front end development, you can use gulp webserver as a proxy to the Light Server and provide live load on your browser if files are updated.\n            <p>\n            To start the proxy web server, go to view folder under light\n        <pre>\n            cd view\n            npm install\n            bower install\n            gulp webserver\n        </pre>\n            A browser will be started automatically at this point. I am using Google Chrome as my default browser and you can use your preferred browser. Let update a static page for example this tutorial.\n\n            <p>\n            Click the first \"Learn more\" button on the home page and click create your first view link, you will see this page on your browser. Open view/src/org.clinical3po.backendservices-v-first-view.html in your editor and update something and save, you will see your browser refreshed automatically to reflect your changes.\n            <p>\n            Page/view is a deployment unit in Backendservices Framework and it should be deployed on the server database on official test environment and production. But for development, we want productivity so everything should be working locally with local server support. Here is Angular route for page in app.js under script.\n        <pre>\n      .when('/page/:id', {\n        templateUrl: 'views/page.html',\n        controller: 'pageCtrl'\n      })\n        </pre>\n            As you can see, the url has /page and then a page id which is the filename you are editing on the file system without .html extension. Let's take a look at page.html template in views folder.\n        <pre>\n        &lt;div dynamic='html'&gt;&lt;/div&gt;\n        </pre>\n        It is a dynamic directive to render html and javascript. The following is the controller for the page.\n            <pre>\n'use strict';\n\n/**\n * This is a generic page controller. It handles pages without special handling.\n * Pages are always loaded from file system first from /src folder, if it cannot be found then they are\n * loaded from the database by REST API calls. This is the dev environment and production is always loaded\n * from REST API.\n */\nangular.module('Clinical3PO-App').controller('pageCtrl', ['$scope', '$routeParams', '$http', 'toaster', 'modelDataService', function($scope, $routeParams, $http, toaster, modelDataService) {\n\n    console.log('id =', $routeParams.id);\n    console.log('file =', '/' + $routeParams.id + '.html');\n\n    var getPage = {\n        category : 'page',\n        name : 'getPage',\n        readOnly: true,\n        data : {\n            id : $routeParams.id\n        }\n    };\n\n\n    $scope.html = '';\n    $http.get('/src/' + $routeParams.id + '.html').success (function(data){\n        $scope.html = data;\n    }).error(function() {\n        console.log(\"Could not load file from src folder, try REST API...\");\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getPage))}})\n            .success(function (result, status, headers, config) {\n                $scope.html = result.content;\n            })\n    })\n\n}]);\n            </pre>\n\n            As you can see it look for the id + .html under src folder and it cannot find the file then ask the server REST API to get the page content. And this is the dynamic directive.\n            <pre>\ndirective('dynamic', function ($compile) {\n    return {\n        restrict: 'A',\n        replace: true,\n        link: function (scope, ele, attrs) {\n            scope.$watch(attrs.dynamic, function(html) {\n                ele.html(html);\n                $compile(ele.contents())(scope);\n            });\n        }\n    };\n});\n            </pre>\n\n            At this point you have a page updated and tested locally. Now you can import the page to your local server and capture the event in a file so that it can be deployed on other testing and production environment.\n            <li>\n                1. Go to Admin menu and click Page Admin. (login with w.ding/123456 to see the admin menu by default)\n            </li>\n            <li>\n                2. All pages in database will be listed here and you can update them by click the id link or delete page by click delete link before the Page Id. There are two buttons on the up right corner to import a page or add a new page. Let's use import as it will overwrite the database version from imported version.\n            </li>\n            <li>\n                3. Click Import button and enter id as the filename you edited without the .html and click choose file button to pick the file from src folder.\n            </li>\n            <li>\n                4. Click Import Page button to get page imported into local server database.\n            </li>\n            <li>\n                5. Click Db Admin from Admin menu and click Download Events link.\n            </li>\n            <li>\n                6. Select from date/time and to date/time for the import page event and click Download Events\n            </li>\n            <li>\n                7. An event or a list of events will be shown up in the text area on the page and you can save it into a file locally. If there are multiple events, remove the rest but only leave the last one in the json array.\n            </li>\n            <li>\n                8. Now you have an event file and it can be replayed on other environment. Login to another server with owner userId and password and click Admin/Db Admin and click link Replay Events. Pick up the event file you just saved and click Replay Event button to get the page deployed to another environment.\n            </li>\n\n            Now you know how to update existing page and generate event file and replay it on another environment for deployment. What about brand new page? And how to refer the newly added page from other page or menu?\n\n            Here is the html that has another page as a href link.\n            <pre>\n\n                &lt;a href=\"/page/org.clinical3po.backendservices-v-first-view\"&gt;Create your first view&lt;/a&gt;\n            </pre>\n\n            To link a page to a menu item, go to Admin/Menu Admin and click Menu Items tab and you can update an existing menu item or create a new one and link it to a parent menu. You need to have a label and path will be the page URL like\n            <pre>\n                /page/org.clinical3po.backendservices-v-news-admin-home\n            </pre>\n\n            Now you know how to update a static page, create a new static page and link it from another page or menu.How about dynamic Angular page? Can I have controllers, filters and directives in my page? The answer is YES. Let's take a look at one dynamic page.\n\n            <pre>\n&lt;script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getForumPost = {\n            category : 'forum',\n            name: 'getForumPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n        $scope.forums = [];\n\n        $scope.fetchResult = function () {\n            $scope.getForumPost.data.id = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.post('api/rs', $scope.getForumPost)\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.forum.post.add/\" + $scope.getForumPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/org.clinical3po.backendservices-v-forum-post-view\");\n        };\n\n    }]);\n&lt;/script&gt;\n&lt;div class=\"container\" ng-controller=\"org.clinical3po.backendservices.ForumPostCtrl\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-xs-12 col-sm-12 col-md-12\"&gt;\n            &lt;div class=\"pull-right\"&gt;\n                &lt;button class=\"btn btn-info\" ng-click=\"post()\"&gt;&lt;i class=\"glyphicon glyphicon-edit\"&gt;&lt;/i&gt;Post&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;tabset&gt;\n                &lt;tab heading=\"Recent\"&gt;\n                    &lt;table class=\"table table-striped\"&gt;\n                        &lt;thead&gt;\n                        &lt;tr&gt;\n                        &lt;/tr&gt;\n                        &lt;/thead&gt;\n                        &lt;tbody&gt;\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\n                            &lt;td&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;{{post.createUser}} {{post.updateDate}}&lt;/td&gt;\n                &lt;/tr&gt;\n                        &lt;/tbody&gt;\n                    &lt;/table&gt;\n                &lt;/tab&gt;\n                &lt;tab heading=\"Bookmark\"&gt;\n                    &lt;table class=\"table table-striped\"&gt;\n                        &lt;thead&gt;\n                        &lt;tr&gt;\n                        &lt;/tr&gt;\n                        &lt;/thead&gt;\n                        &lt;tbody&gt;\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\n                            &lt;td&gt;\n                                &lt;div&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/div&gt;\n        &lt;div&gt;{{post.createUser}} {{post.createDate}}&lt;/div&gt;\n    &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;/tab&gt;\n    &lt;/tabset&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt; &lt;!-- /container --&gt;\n\n            </pre>\n\n            As you can see there is a controller in the page. Someone who is Angular developer might ask how come you can register your controller when the page is loaded dynamically? Is angular supposed to register all the controller at bootstrap time? Here is the trick to register controller once the page is loaded.\n            I saved the Angular providers in variables and use them to register during runtime dynamically.\n\n            <pre>\nconfig(['$routeProvider', '$locationProvider', '$controllerProvider', '$compileProvider', '$filterProvider', '$provide', function ($routeProvider, $locationProvider, $controllerProvider, $compileProvider, $filterProvider, $provide) {\n\n    // Notice that the registration methods on the\n    // module are now being overridden by their provider equivalents\n    Clinical3PO-App.controller = $controllerProvider.register;\n    Clinical3PO-App.directive  = $compileProvider.directive;\n    Clinical3PO-App.filter     = $filterProvider.register;\n    Clinical3PO-App.factory    = $provide.factory;\n    Clinical3PO-App.service    = $provide.service;\n\n            </pre>\n            Now you know how to update, create static and dynamic views or pages in Backendservices Framework and know how to deploy them to another environment. I also record a video to show you the steps described above and you can view it at\n\n            <a href=\"http://youtu.be/fLCjboWLXgY\">http://youtu.be/fLCjboWLXgY</a>\n            <p>\n            Happy designing.\n\n        </div>\n    </div>\n</div>",
      "createDate": "2015-09-24T01:17:42.269"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.269",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:331",
    "@version": 1,
    "@class": "Event",
    "eventId": 10332,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-proxy-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.ProxyAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n\n        $scope.getProxy = {\n            category : 'proxy',\n            name : 'getAllProxy',\n            readOnly: true\n        };\n\n        $scope.delProxy = {\n            category : 'proxy',\n            name : 'delProxy',\n            readOnly: false\n        };\n\n        $scope.proxies = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Hosts',\n                value: 'hosts'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(proxy) {\n            $scope.delProxy.data = proxy;\n            $http.post('api/rs', $scope.delProxy)\n                    .success(function (data, status, headers, config) {\n                        $scope.proxies.splice($scope.proxies.indexOf(proxy), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(proxy) {\n            modelDataService.setModelData(proxy);\n            $location.path(\"/form/org.clinical3po.backendservices.proxy.upd_d\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.proxy.add_d\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getProxy))}})\n                    .success(function (data, status, headers, config) {\n                        $scope.proxies = data;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.ProxyAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Proxy\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.hosts\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"proxy in proxies | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(proxy)\">Delete</a></td>\n                            <td><a href ng-click=\"update(proxy)\">{{proxy.ruleClass}}</a></td>\n                            <td>{{proxy.hosts}}</td>\n                            <td>{{proxy.createUserId}}</td>\n                            <td>{{proxy.createDate}}</td>\n                            <td>{{proxy.updateUserId}}</td>\n                            <td>{{proxy.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.279"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.279",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:332",
    "@version": 1,
    "@class": "Event",
    "eventId": 10333,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-dev-windows7",
      "content": ""
      "createDate": "2015-09-24T01:17:42.294"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.294",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:333",
    "@version": 1,
    "@class": "Event",
    "eventId": 10334,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-news-home",
      "content": ""
      "createDate": "2015-09-24T01:17:42.303"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.303",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:334",
    "@version": 1,
    "@class": "Event",
    "eventId": 10335,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-production_single",
      "content": "",
      "createDate": "2015-09-24T01:17:42.338"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.338",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:335",
    "@version": 1,
    "@class": "Event",
    "eventId": 10336,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-rule-transform-response",
      "content": "",
      "createDate": "2015-09-24T01:17:42.363"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.363",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:336",
    "@version": 1,
    "@class": "Event",
    "eventId": 10337,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-role-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('Clinical3PO-App').controller('org.clinical3po.backendservices.RoleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getRole = {\n            category : 'role',\n            name : 'getRole',\n            readOnly: true\n        };\n        $scope.delRole = {\n            category : 'role',\n            name : 'delRole',\n            readOnly: false\n        };\n        $scope.roles = [];\n        $scope.hosts = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'RoleId',\n                value: 'roleId'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: \"Description\",\n                value: \"description\"\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(role) {\n            $scope.delRole.data = role;\n            $http.post('api/rs', $scope.delRole)\n                    .success(function (data, status, headers, config) {\n                        $scope.roles.splice($scope.roles.indexOf(role), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(role) {\n            modelDataService.setModelData(role);\n            $location.path(\"/form/org.clinical3po.backendservices.role.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/org.clinical3po.backendservices.role.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getRole)\n                    .success(function (result, status, headers, config) {\n                        $scope.roles = result.roles;\n                        $scope.hosts = result.hosts;\n                        //console.log($scope.roles);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"org.clinical3po.backendservices.RoleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Roles\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.roleId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-model=\"filter.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"role in roles | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(role)\">Delete</a></td>\n                            <td><a href ng-click=\"update(role)\">{{role.roleId}}</a></td>\n                            <td>{{role.host}}</td>\n                            <td>{{role.description}}</td>\n                            <td>{{role.createUserId}}</td>\n                            <td>{{role.createDate}}</td>\n                            <td>{{role.updateUserId}}</td>\n                            <td>{{role.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-09-24T01:17:42.385"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.385",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:337",
    "@version": 1,
    "@class": "Event",
    "eventId": 10338,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-production-single",
      "content": "",
      "createDate": "2015-09-24T01:17:42.401"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.401",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:338",
    "@version": 1,
    "@class": "Event",
    "eventId": 10339,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-post",
      "content": "",
      "createDate": "2015-09-24T01:17:42.421"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.421",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:339",
    "@version": 1,
    "@class": "Event",
    "eventId": 10340,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-first-application",
      "content": "",
      "createDate": "2015-09-24T01:17:42.430"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.430",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:340",
    "@version": 1,
    "@class": "Event",
    "eventId": 10341,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-blog-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.449"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.449",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:341",
    "@version": 1,
    "@class": "Event",
    "eventId": 10342,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-catalog-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.467"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.467",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:342",
    "@version": 1,
    "@class": "Event",
    "eventId": 10343,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-news-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.493"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.493",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:343",
    "@version": 1,
    "@class": "Event",
    "eventId": 10344,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-host-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.508"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.508",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:344",
    "@version": 1,
    "@class": "Event",
    "eventId": 10345,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-user-public-profile",
      "content": ""
      "createDate": "2015-09-24T01:17:42.536"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.536",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:345",
    "@version": 1,
    "@class": "Event",
    "eventId": 10346,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-form-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.563"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.563",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:346",
    "@version": 1,
    "@class": "Event",
    "eventId": 10347,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-test-hello-world",
      "content": "",
      "createDate": "2015-09-24T01:17:42.601"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.601",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:347",
    "@version": 1,
    "@class": "Event",
    "eventId": 10348,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-menu-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.625"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.625",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:348",
    "@version": 1,
    "@class": "Event",
    "eventId": 10349,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-form-admin-add",
      "content": "",
      "createDate": "2015-09-24T01:17:42.667"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.667",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:349",
    "@version": 1,
    "@class": "Event",
    "eventId": 10350,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-access-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.682"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.682",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:350",
    "@version": 1,
    "@class": "Event",
    "eventId": 10351,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-news-post",
      "content": "",
      "createDate": "2015-09-24T01:17:42.691"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.691",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:351",
    "@version": 1,
    "@class": "Event",
    "eventId": 10352,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-form-admin-update",
      "content": "",
      "createDate": "2015-09-24T01:17:42.708"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.708",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:352",
    "@version": 1,
    "@class": "Event",
    "eventId": 10353,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-user-logout",
      "content": "",
      "createDate": "2015-09-24T01:17:42.731"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.731",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:353",
    "@version": 1,
    "@class": "Event",
    "eventId": 10354,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-dev-linux",
      "content": "",
      "createDate": "2015-09-24T01:17:42.760"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.760",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:354",
    "@version": 1,
    "@class": "Event",
    "eventId": 10355,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-dev-mac",
      "content": "",
      "createDate": "2015-09-24T01:17:42.778"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.778",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:355",
    "@version": 1,
    "@class": "Event",
    "eventId": 10356,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-user-admin-update",
      "content": "",
      "createDate": "2015-09-24T01:17:42.810"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.810",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:356",
    "@version": 1,
    "@class": "Event",
    "eventId": 10357,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.818"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.818",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:357",
    "@version": 1,
    "@class": "Event",
    "eventId": 10358,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-db-query-command",
      "content": "",
      "createDate": "2015-09-24T01:17:42.840"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.840",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:358",
    "@version": 1,
    "@class": "Event",
    "eventId": 10359,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-stacks",
      "content": "",
      "createDate": "2015-09-24T01:17:42.854"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.854",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:359",
    "@version": 1,
    "@class": "Event",
    "eventId": 10360,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-user-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.863"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.863",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:360",
    "@version": 1,
    "@class": "Event",
    "eventId": 10361,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-why-undertow",
      "content": "",
      "createDate": "2015-09-24T01:17:42.872"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.872",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:361",
    "@version": 1,
    "@class": "Event",
    "eventId": 10362,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-post_v2",
      "content": "",
      "createDate": "2015-09-24T01:17:42.886"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.886",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:362",
    "@version": 1,
    "@class": "Event",
    "eventId": 10363,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-rule-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.893"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.893",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:363",
    "@version": 1,
    "@class": "Event",
    "eventId": 10364,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-java-php",
      "content": "",
      "createDate": "2015-09-24T01:17:42.900"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.900",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:364",
    "@version": 1,
    "@class": "Event",
    "eventId": 10365,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-product-admin-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.907"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.907",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:365",
    "@version": 1,
    "@class": "Event",
    "eventId": 10366,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-first-component",
      "content": "",
      "createDate": "2015-09-24T01:17:42.925"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.925",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:366",
    "@version": 1,
    "@class": "Event",
    "eventId": 10367,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-first-rest-api",
      "content": "",
      "createDate": "2015-09-24T01:17:42.931"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.931",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:367",
    "@version": 1,
    "@class": "Event",
    "eventId": 10368,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-home",
      "content": "",
      "createDate": "2015-09-24T01:17:42.943"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.943",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:368",
    "@version": 1,
    "@class": "Event",
    "eventId": 10369,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-forum-home_v2",
      "content": "",
      "createDate": "2015-09-24T01:17:42.951"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.951",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:369",
    "@version": 1,
    "@class": "Event",
    "eventId": 10370,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-blog-post-view",
      "content": "",
      "createDate": "2015-09-24T01:17:42.958"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.958",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:370",
    "@version": 1,
    "@class": "Event",
    "eventId": 10371,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "pageId": "org.clinical3po.backendservices-v-rule-transform-request",
      "content": "",
      "createDate": "2015-09-24T01:17:42.974"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-09-24T01:17:42.974",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:28",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:47:48.389",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.access.DelAccessRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T15:47:48.389",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:29",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:50:09.588",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.access.GetAccessRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T15:50:09.588",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:30",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:51:40.484",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.access.GetAllAccessRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T15:51:40.484",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:31",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:52:55.221",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.access.UpdAccessRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T15:52:55.221",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:3",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T18:51:34.810",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.db.DownloadEventRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T18:51:34.810",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:15",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:15.661",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.form.AddFormRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T20:51:15.661",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:16",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:34.547",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.form.DelFormRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T20:51:34.546",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:17",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:50.520",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.form.ImpFormRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T20:51:50.520",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:18",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:52:16.011",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.form.GetAllFormRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T20:52:16.011",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:19",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:52:33.304",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.form.UpdFormRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T20:52:33.304",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:20",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:08:20.093",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.host.GetHostDropdownRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:08:20.093",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:21",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:03.720",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.AddMenuItemRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:25:03.720",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:22",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:18.736",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuItemRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:25:18.736",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:23",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:36.978",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetMenuItemMapRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:25:36.978",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:24",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:58.730",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetAllMenuRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:25:58.730",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:25",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:26:18.282",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.UpdMenuRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:26:18.282",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:26",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:26:32.661",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.menu.DelMenuItemRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:26:32.661",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:27",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:03.063",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.page.GetAllPageRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:36:03.063",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:28",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:18.678",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.page.AddPageRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:36:18.678",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:29",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:35.553",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.page.UpdPageRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:36:35.553",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:30",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:53.971",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.page.ImpPageRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:36:53.971",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:31",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:37:11.567",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.page.DelPageRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:37:11.567",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:32",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:28.750",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.role.UpdRoleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:43:28.750",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:33",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:40.278",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.role.DelRoleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:43:40.278",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:34",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:51.157",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.role.GetRoleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:43:51.157",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:35",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:44:06.709",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.role.AddRoleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:44:06.709",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:36",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:53:25.868",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.rule.GetRuleDropdownRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:53:25.868",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:37",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:53:45.949",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.rule.GetRuleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T21:53:45.949",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:40",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:16:32.088",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.DelUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:16:32.088",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:41",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:16:57.409",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.DownUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:16:57.409",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:42",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:17:23.916",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.GetAllUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:17:23.916",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:43",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:17:46.763",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.GetUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:17:46.763",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:44",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:18:12.279",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.LockUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:18:12.279",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:45",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:18:42.869",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.LogOutUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:18:42.869",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:46",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:19:13.636",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user",
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.RevokeRefreshTokenRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:19:13.636",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:47",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:19:41.952",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.UnlockUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:19:41.952",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:48",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:20:30.173",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdPasswordRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:20:30.173",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:49",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:20:48.576",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdProfileRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:20:48.576",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:50",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:21:19.124",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpdRoleRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:21:19.124",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:51",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:21:40.961",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.user.UpUserRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-15T23:21:40.961",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:249",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:09.504",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.GetTransformRequestRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:20:09.504",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:250",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:25.455",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformResponseRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:20:25.455",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:251",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:40.725",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.GetTransformResponseRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:20:40.725",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:252",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:57.216",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformRequestRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:20:57.216",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:253",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:13.527",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformResponseRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:21:13.527",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:254",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:29.434",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.AddTransformRequestRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:21:29.434",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:255",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:42.942",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.UpdTransformRequestRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:21:42.942",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:256",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:58.450",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.transform.DelTransformResponseRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:21:58.450",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:257",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:22:20.734",
      "accessLevel": "N",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.transform.BetaTestRule"
    },
    "createUserId": "w.ding",
    "createDate": "2015-02-23T02:22:20.734",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-03-24T01:59:23.304",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.role.GetRoleDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-03-24T01:59:23.304",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-03-24T01:51:38.458",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.client.GetClientDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-03-24T01:51:38.458",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-27T02:24:59.056",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.RefreshTokenRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-27T02:24:59.056",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:17:23.407",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.menu.GetMenuRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:17:23.406",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:27:11.135",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.form.GetFormRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:27:11.134",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:27:25.345",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.page.GetPageRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:27:25.345",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-24T01:00:01.879",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.client.GetClientDropdownRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-24T01:00:01.879",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-24T01:00:21.578",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.role.GetRoleDropdownRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-24T01:00:21.576",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:229",
    "@version": 1,
    "@class": "Event",
    "eventId": 10230,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-07-18T01:25:41.702",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.user.SignInUserRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-07-18T01:25:41.701",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "script": "CREATE CLASS Blog extends V;\nCREATE PROPERTY Blog.host STRING;\nCREATE PROPERTY Blog.blogId STRING;\nCREATE PROPERTY Blog.description STRING;\nCREATE PROPERTY Blog.attributes EMBEDDEDMAP;\nCREATE PROPERTY Blog.rank INTEGER;\nCREATE PROPERTY Blog.createDate DATETIME;\nCREATE PROPERTY Blog.updateDate DATETIME;\nCREATE INDEX blogHostIdIdx ON Blog(host, blogId) UNIQUE;\nCREATE INDEX Blog.updateDate ON Blog(updateDate) NOTUNIQUE;\n\nCREATE CLASS Forum extends V;\nCREATE PROPERTY Forum.host STRING;\nCREATE PROPERTY Forum.forumId STRING;\nCREATE PROPERTY Forum.description STRING;\nCREATE PROPERTY Forum.attributes EMBEDDEDMAP;\nCREATE PROPERTY Forum.rank INTEGER;\nCREATE PROPERTY Forum.createDate DATETIME;\nCREATE PROPERTY Forum.updateDate DATETIME;\nCREATE INDEX forumHostIdIdx ON Forum(host, forumId) UNIQUE;\nCREATE INDEX Forum.updateDate ON Forum(updateDate) NOTUNIQUE;\n\nCREATE CLASS News extends V;\nCREATE PROPERTY News.host STRING;\nCREATE PROPERTY News.newsId STRING;\nCREATE PROPERTY News.description STRING;\nCREATE PROPERTY News.attributes EMBEDDEDMAP;\nCREATE PROPERTY News.rank INTEGER;\nCREATE PROPERTY News.createDate DATETIME;\nCREATE PROPERTY News.updateDate DATETIME;\nCREATE INDEX newsHostIdIdx ON News(host, newsId) UNIQUE;\nCREATE INDEX News.updateDate ON News(updateDate) NOTUNIQUE;\n\n\nCREATE CLASS Post extends V;\nCREATE PROPERTY Post.postId STRING;\nCREATE PROPERTY Post.host STRING;\nCREATE PROPERTY Post.title STRING;\nCREATE PROPERTY Post.source STRING;\nCREATE PROPERTY Post.summary STRING;\nCREATE PROPERTY Post.content STRING;\nCREATE PROPERTY Post.rank INTEGER;\nCREATE PROPERTY Post.createDate DATETIME;\nCREATE PROPERTY Post.updateDate DATETIME;\nCREATE INDEX Post.postId ON Post(postId) UNIQUE;\nCREATE INDEX Post.host ON Post(host) NOTUNIQUE;\nCREATE INDEX Post.updateDate ON Post(updateDate) NOTUNIQUE;\n\nCREATE CLASS Comment extends V;\nCREATE PROPERTY Comment.commentId STRING;\nCREATE PROPERTY Comment.host STRING;\nCREATE PROPERTY Comment.title STRING;\nCREATE PROPERTY Comment.source STRING;\nCREATE PROPERTY Comment.content STRING;\nCREATE PROPERTY Comment.rank INTEGER;\nCREATE PROPERTY Comment.createDate DATETIME;\nCREATE PROPERTY Comment.updateDate DATETIME;\nCREATE INDEX Comment.commentId ON Comment(commentId) UNIQUE;\nCREATE INDEX Comment.host ON Comment(host) NOTUNIQUE;\nCREATE INDEX Comment.updateDate ON Comment(updateDate) NOTUNIQUE;\n\nCREATE CLASS Tag extends V;\nCREATE PROPERTY Tag.host STRING;\nCREATE PROPERTY Tag.tagId STRING;\nCREATE PROPERTY Tag.description STRING;\nCREATE PROPERTY Tag.createDate DATETIME;\nCREATE INDEX tagHostIdIdx ON Tag(host, tagId) UNIQUE;\n\nCREATE CLASS HasPost extends E;\nCREATE CLASS HasTag extends E;\nCREATE CLASS HasComment extends E;\n",
      "createDate": "2015-03-14T17:42:27.858"
    },
    "name": "execSchemaCmd",
    "category": "db",
    "createDate": "2015-03-14T17:42:27.858",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "script": "",
      "createDate": "2015-03-14T17:43:09.946"
    },
    "name": "execUpdateCmd",
    "category": "db",
    "createDate": "2015-03-14T17:43:09.946",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:17:46.904",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:17:46.904",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:19:45.318",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:19:45.318",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:20:14.342",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:20:14.342",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:20:38.877",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:20:38.877",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:21:09.419",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogTreeRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:21:09.419",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:21:49.981",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DelBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:21:49.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:22:23.094",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpdPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:22:23.094",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:23:01.865",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.DownBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:23:01.865",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:23:28.991",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:23:28.991",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:23:50.462",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.blog.GetBlogPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:23:50.462",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:24:23.800",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.UpBlogRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:24:23.800",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:24:51.566",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "blogAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.blog.AddPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:24:51.566",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:26:04.200",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.comment.UpdCommentRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:26:04.200",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:26:52.795",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.comment.GetCommentTreeRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:26:52.795",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:27:22.486",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.comment.GetCommentRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:27:22.486",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:27:49.967",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.comment.AddCommentRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:27:49.967",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:28:06.775",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.comment.DelCommentRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:28:06.775",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:29:07.209",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:29:07.209",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:30:33.285",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:30:33.285",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:31:07.710",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:31:07.710",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:31:25.889",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:31:25.889",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:31:40.873",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DownForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:31:40.873",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:32:03.119",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.DelForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:32:03.119",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:32:17.627",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:32:17.627",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:32:33.669",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.UpdForumRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:32:33.669",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:32:59.568",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.AddPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:32:59.568",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:33:30.550",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumTreeRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:33:30.549",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:33:55.299",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:33:55.299",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:34:14.303",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "forumAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.forum.GetForumDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:34:14.303",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:35:24.977",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:35:24.977",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:35:41.693",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.DelNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:35:41.693",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:35:53.800",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsTreeRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:35:53.800",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:36:18.055",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.DownNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:36:18.055",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:36:49.046",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:36:49.046",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:37:08.599",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:37:08.599",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:37:39.773",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:37:39.773",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:38:08.271",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:38:08.271",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:38:28.113",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.news.GetNewsPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:38:28.113",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:39:03.091",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.AddPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:39:03.091",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:39:40.940",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:39:40.940",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:39:53.638",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner",
        "newsAdmin"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.news.UpdNewsRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:39:53.638",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:40:21.176",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.post.DownPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:40:21.176",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:40:44.375",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.post.GetPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:40:44.375",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-04-28T10:41:41.049",
      "accessLevel": "R",
      "updateUserId": "w.ding",
      "roles": [
        "user"
      ],
      "ruleClass": "org.clinical3po.backendservices.rule.post.UpPostRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-04-28T10:41:41.049",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:121",
    "@version": 1,
    "@class": "Event",
    "eventId": 10122,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Computer",
      "createUserId": "w.ding",
      "blogId": "Computer",
      "createDate": "2015-05-03T01:03:24.217"
    },
    "name": "addBlog",
    "category": "blog",
    "createDate": "2015-05-03T01:03:24.217",
    "ipAddress": "127.0.0.1",
    "blogId": "X-I7HMWqTcGGbG9LmJAtXg",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:122",
    "@version": 1,
    "@class": "Event",
    "eventId": 10123,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Software",
      "createUserId": "w.ding",
      "in_Own": [
        "Computer"
      ],
      "blogId": "Software",
      "createDate": "2015-05-03T01:03:39.835"
    },
    "name": "addBlog",
    "category": "blog",
    "createDate": "2015-05-03T01:03:39.835",
    "ipAddress": "127.0.0.1",
    "blogId": "xbrmqBmDSZ2DFIFAepWVpA",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Hardware",
      "createUserId": "w.ding",
      "in_Own": [
        "Computer"
      ],
      "blogId": "Hardware",
      "createDate": "2015-05-03T01:03:53.532"
    },
    "name": "addBlog",
    "category": "blog",
    "createDate": "2015-05-03T01:03:53.532",
    "ipAddress": "127.0.0.1",
    "blogId": "B67WQ2yGSL2qe4YUXoWMAA",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:124",
    "@version": 1,
    "@class": "Event",
    "eventId": 10125,
    "createUserId": "w.ding",
    "data": {
      "summary": "This is first article about computer",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "9B9SDQpDT_CPHAZSFUBVjw",
      "title": "Computer1",
      "parentId": "Computer",
      "content": "What is that.",
      "tags": "",
      "createDate": "2015-05-03T01:05:09.156"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T01:05:09.156",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:126",
    "@version": 1,
    "@class": "Event",
    "eventId": 10127,
    "createUserId": "w.ding",
    "data": {
      "summary": "software",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "7NJ8KLSrRyK7AP6MwvGVdQ",
      "title": "First post for software",
      "parentId": "Software",
      "content": "software",
      "tags": "",
      "createDate": "2015-05-03T01:05:53.202"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T01:05:53.202",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "w.ding",
    "data": {
      "summary": "software1",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "Nci3VzF0RQuPPtq_fPSkQQ",
      "title": "software1",
      "parentId": "Software",
      "content": "sosftware 1",
      "tags": "software",
      "createDate": "2015-05-03T01:09:51.801"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T01:09:48.399",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:132",
    "@version": 1,
    "@class": "Event",
    "eventId": 10133,
    "createUserId": "w.ding",
    "data": {
      "summary": "post3",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "oPgx8MnUSTWF8OuXob5WaA",
      "title": "post3",
      "parentId": "Computer",
      "content": "Hoell",
      "tags": "",
      "createDate": "2015-05-03T01:52:16.077"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T01:52:16.077",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:134",
    "@version": 1,
    "@class": "Event",
    "eventId": 10135,
    "createUserId": "w.ding",
    "data": {
      "summary": "hardware1",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "CtSV1LorSFyx83SloZgc9Q",
      "title": "hardware1",
      "parentId": "Hardware",
      "content": "hardware 1",
      "tags": "",
      "createDate": "2015-05-03T01:54:41.020"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T01:54:41.020",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:141",
    "@version": 1,
    "@class": "Event",
    "eventId": 10142,
    "createUserId": "w.ding",
    "data": {
      "summary": "software3",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "RrI-2IZEQeSru2KO8_7bew",
      "title": "software3",
      "parentId": "Software",
      "content": "software 3",
      "tags": "",
      "createDate": "2015-05-03T02:44:53.573"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T02:44:53.573",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:142",
    "@version": 1,
    "@class": "Event",
    "eventId": 10143,
    "createUserId": "w.ding",
    "data": {
      "summary": "software4",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "vSZh7gcQRB6rV7RNfPjFaw",
      "title": "software4",
      "parentId": "Computer",
      "content": "software 4",
      "tags": "",
      "createDate": "2015-05-03T02:46:00.220"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T02:46:00.220",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:143",
    "@version": 1,
    "@class": "Event",
    "eventId": 10144,
    "createUserId": "w.ding",
    "data": {
      "summary": "software5",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "vhCE4b_ATrOrDmCQWoun9Q",
      "title": "software5",
      "parentId": "Computer",
      "content": "software 5",
      "tags": "",
      "createDate": "2015-05-03T02:47:08.260"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T02:47:08.260",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:144",
    "@version": 1,
    "@class": "Event",
    "eventId": 10145,
    "createUserId": "w.ding",
    "data": {
      "summary": "hardware4",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "_niVAollQ7avqPUU8SquxA",
      "title": "hardware4",
      "parentId": "Computer",
      "content": "hardware 4",
      "tags": "",
      "createDate": "2015-05-03T02:48:09.793"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T02:48:09.793",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:169",
    "@version": 1,
    "@class": "Event",
    "eventId": 10170,
    "createUserId": "w.ding",
    "data": {
      "updateUserId": "w.ding",
      "postId": "_niVAollQ7avqPUU8SquxA"
    },
    "name": "upPost",
    "category": "post",
    "createDate": "2015-05-03T10:52:58.092",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:172",
    "@version": 1,
    "@class": "Event",
    "eventId": 10173,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-05-03T10:59:25.866",
      "@class": "Blog",
      "out_HasPost": [
        "#36:4"
      ],
      "updateUserId": "w.ding",
      "@type": "d",
      "description": "Hardware",
      "@fieldTypes": "createDate=t,in_Create=g,in_Own=g,out_HasPost=g",
      "in_Own": [
        "#33:0"
      ],
      "@rid": "#33:2",
      "@version": 4,
      "host": "example",
      "in_Create": [
        "#14:0"
      ],
      "blogId": "Hardware",
      "createDate": "2015-05-03T01:03:53.532"
    },
    "name": "updBlog",
    "category": "blog",
    "createDate": "2015-05-03T10:59:25.866",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:173",
    "@version": 1,
    "@class": "Event",
    "eventId": 10174,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "blogId": "Hardware"
    },
    "name": "delBlog",
    "category": "blog",
    "createDate": "2015-05-03T10:59:44.656",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:174",
    "@version": 1,
    "@class": "Event",
    "eventId": 10175,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Hardware",
      "createUserId": "w.ding",
      "in_Own": [
        "Computer"
      ],
      "blogId": "Hardware",
      "createDate": "2015-05-03T11:00:03.450"
    },
    "name": "addBlog",
    "category": "blog",
    "createDate": "2015-05-03T11:00:03.450",
    "ipAddress": "127.0.0.1",
    "blogId": "I_zDLheLQOS5srGeoIATyg",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:175",
    "@version": 1,
    "@class": "Event",
    "eventId": 10176,
    "createUserId": "w.ding",
    "data": {
      "summary": "first post of hardware summary",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "ga6MjiYzQyCFH6RiKH-B8A",
      "title": "first post of hardware",
      "parentId": "Hardware",
      "content": "first post of hardware content.",
      "tags": "",
      "createDate": "2015-05-03T11:00:58.743"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T11:00:58.743",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:176",
    "@version": 1,
    "@class": "Event",
    "eventId": 10177,
    "createUserId": "w.ding",
    "data": {
      "summary": "software4",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "kFugilNORp22x_HS9D1rBw",
      "title": "software4",
      "parentId": "Software",
      "content": "software 4",
      "tags": "",
      "createDate": "2015-05-03T11:02:17.920"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T11:02:17.920",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:177",
    "@version": 1,
    "@class": "Event",
    "eventId": 10178,
    "createUserId": "w.ding",
    "data": {
      "summary": "software5",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "YhrqSNxjTjGX2Ohs-pRcTg",
      "title": "software 5",
      "parentId": "Software",
      "content": "software 5",
      "tags": "",
      "createDate": "2015-05-03T11:03:01.937"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T11:03:01.937",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:178",
    "@version": 1,
    "@class": "Event",
    "eventId": 10179,
    "createUserId": "w.ding",
    "data": {
      "summary": "software6",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "Ykvr1EZATGaCiJ87sF7Rww",
      "title": "software6",
      "parentId": "Software",
      "content": "software 6",
      "tags": "",
      "createDate": "2015-05-03T11:03:38.053"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-05-03T11:03:38.053",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:209",
    "@version": 1,
    "@class": "Event",
    "eventId": 10210,
    "createUserId": "w.ding",
    "data": {
      "summary": "This is a summary",
      "createUserId": "w.ding",
      "host": "example",
      "source": "",
      "postId": "CQjIkUslRCaoqIf8SsEPTg",
      "title": "This is a title",
      "parentId": "Software",
      "content": "And this is the content.\n\n```\ncode is here.\n```",
      "tags": "",
      "createDate": "2015-06-14T18:13:32.147"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2015-06-14T18:13:32.147",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:210",
    "@version": 1,
    "@class": "Event",
    "eventId": 10211,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "All about plant",
      "createUserId": "w.ding",
      "forumId": "Plant",
      "createDate": "2015-06-14T18:33:21.777"
    },
    "name": "addForum",
    "category": "forum",
    "createDate": "2015-06-14T18:33:21.777",
    "ipAddress": "127.0.0.1",
    "forumId": "F-CWjVuQSUON93s1uUBlWw",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:211",
    "@version": 1,
    "@class": "Event",
    "eventId": 10212,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "All about Animal",
      "createUserId": "w.ding",
      "forumId": "Animal",
      "createDate": "2015-06-14T18:33:42.467"
    },
    "name": "addForum",
    "category": "forum",
    "createDate": "2015-06-14T18:33:42.467",
    "ipAddress": "127.0.0.1",
    "forumId": "f1rGtzP7TBCbUX2YF2QMRw",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:212",
    "@version": 1,
    "@class": "Event",
    "eventId": 10213,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "All about tree",
      "createUserId": "w.ding",
      "in_Own": [
        "Plant"
      ],
      "forumId": "Tree",
      "createDate": "2015-06-14T18:34:07.706"
    },
    "name": "addForum",
    "category": "forum",
    "createDate": "2015-06-14T18:34:07.706",
    "ipAddress": "127.0.0.1",
    "forumId": "6XW-kzcDSsGNvxjs4wWi8Q",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:213",
    "@version": 1,
    "@class": "Event",
    "eventId": 10214,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "All about Herb",
      "createUserId": "w.ding",
      "in_Own": [
        "Plant"
      ],
      "forumId": "Herb",
      "createDate": "2015-06-14T18:34:24.861"
    },
    "name": "addForum",
    "category": "forum",
    "createDate": "2015-06-14T18:34:24.861",
    "ipAddress": "127.0.0.1",
    "forumId": "NQuZogSRQIaqzE7246jTFQ",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:214",
    "@version": 1,
    "@class": "Event",
    "eventId": 10215,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "All about Pine",
      "createUserId": "w.ding",
      "in_Own": [
        "Tree"
      ],
      "forumId": "Pine",
      "createDate": "2015-06-14T18:34:39.004"
    },
    "name": "addForum",
    "category": "forum",
    "createDate": "2015-06-14T18:34:39.004",
    "ipAddress": "127.0.0.1",
    "forumId": "f15lXrGzQC62lZqRtulbkg",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:220",
    "@version": 1,
    "@class": "Event",
    "eventId": 10221,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "host": "example",
      "postId": "y62UHnqcTJ-BDingymRH1LLA",
      "title": "This is the first post",
      "content": "This is teh first post",
      "parentId": "Animal",
      "tags": "java, rest",
      "createDate": "2015-06-14T20:15:06.514"
    },
    "name": "addPost",
    "category": "forum",
    "createDate": "2015-06-14T20:15:06.514",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:223",
    "@version": 1,
    "@class": "Event",
    "eventId": 10224,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "host": "example",
      "postId": "j2Mh_2QcT0m86nYFXrwSfA",
      "title": "first post in plant",
      "content": "first post in plant",
      "parentId": "Plant",
      "createDate": "2015-06-14T20:15:44.017"
    },
    "name": "addPost",
    "category": "forum",
    "createDate": "2015-06-14T20:15:44.017",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "script": "CREATE CLASS Catalog extends V;\nCREATE PROPERTY Catalog.host STRING;\nCREATE PROPERTY Catalog.catalogId STRING;\nCREATE PROPERTY Catalog.description STRING;\nCREATE PROPERTY Catalog.attributes EMBEDDEDMAP;\nCREATE PROPERTY Catalog.createDate DATETIME;\nCREATE PROPERTY Catalog.updateDate DATETIME;\nCREATE INDEX catalogHostIdIdx ON Catalog(host, catalogId) UNIQUE;\nCREATE INDEX Catalog.updateDate ON Catalog(updateDate) NOTUNIQUE;\n\nCREATE CLASS Product extends V;\nCREATE PROPERTY Product.productId STRING;\nCREATE PROPERTY Product.name STRING;\nCREATE PROPERTY Product.host STRING;\nCREATE PROPERTY Product.description STRING;\nCREATE PROPERTY Product.attributes EMBEDDEDMAP;\nCREATE PROPERTY Product.variants EMBEDDEDLIST;\nCREATE PROPERTY Product.createDate DATETIME;\nCREATE PROPERTY Product.updateDate DATETIME;\nCREATE INDEX Product.productId ON Product(productId) UNIQUE;\nCREATE INDEX Product.host ON Product(host) NOTUNIQUE;\nCREATE INDEX Product.name ON Product(name) NOTUNIQUE;\n\nCREATE CLASS HasProduct extends E;\n\nCREATE CLASS Carrier extends V;\nCREATE PROPERTY Carrier.name STRING;\nCREATE PROPERTY Carrier.host STRING;\nCREATE PROPERTY Carrier.description STRING;\nCREATE PROPERTY Carrier.attributes EMBEDDEDMAP;\nCREATE PROPERTY Carrier.createDate DATETIME;\nCREATE PROPERTY Carrier.updateDate DATETIME;\nCREATE INDEX Carrier.host ON Carrier(host) NOTUNIQUE;\nCREATE INDEX Carrier.name ON Carrier(name) UNIQUE;\n\n\n\n\ncreate vertex Role set roleId = 'catalogAdmin', description = 'Catalog Admin'\ncreate vertex Role set roleId = 'productAdmin', description = 'Product Admin'\n",
      "createDate": "2015-09-25T01:43:59.142"
    },
    "name": "execSchemaCmd",
    "category": "db",
    "createDate": "2015-09-25T01:43:59.142",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "script": "",
      "createDate": "2015-09-24T02:25:11.607"
    },
    "name": "execUpdateCmd",
    "category": "db",
    "createDate": "2015-09-24T02:25:11.607",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:115",
    "@version": 1,
    "@class": "Event",
    "eventId": 10116,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-05-02T12:17:06.274",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogProductRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-05-02T12:17:06.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:430",
    "@version": 1,
    "@class": "Event",
    "eventId": 10432,
    "createUserId": "w.ding",
    "data": {
      "updateDate": "2015-08-18T02:13:29.430",
      "accessLevel": "A",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogTreeRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-08-18T02:13:29.430",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:74",
    "@version": 1,
    "@class": "Event",
    "eventId": 10075,
    "createUserId": "w.ding",
    "data": {
      "enableCors": true,
      "updateDate": "2015-04-30T01:23:26.644",
      "updateUserId": "w.ding",
      "ruleClass": "org.clinical3po.backendservices.rule.catalog.GetCatalogProductRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-04-30T01:23:26.643",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:447",
    "@version": 1,
    "@class": "Event",
    "eventId": 10449,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-catalog-home",
      "tpl": null,
      "updateDate": "2015-08-22T01:10:43.766",
      "ctrl": null,
      "left": true,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "catalog"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-08-22T01:10:43.766",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1028",
    "@version": 1,
    "@class": "Event",
    "eventId": 11030,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-cart-home",
      "tpl": null,
      "updateDate": "2015-09-06T02:16:29.086",
      "ctrl": null,
      "left": false,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "cart"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-09-06T02:16:29.086",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1032",
    "@version": 1,
    "@class": "Event",
    "eventId": 11034,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-cart-home",
      "tpl": null,
      "updateDate": "2015-09-06T02:16:52.823",
      "ctrl": null,
      "left": false,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "cart"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-09-06T02:16:52.823",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1034",
    "@version": 1,
    "@class": "Event",
    "eventId": 11036,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-cart-home",
      "tpl": null,
      "updateDate": "2015-09-06T02:25:59.352",
      "ctrl": null,
      "left": false,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "cart"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-09-06T02:25:59.352",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1036",
    "@version": 1,
    "@class": "Event",
    "eventId": 11038,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-cart-home",
      "tpl": null,
      "updateDate": "2015-09-06T02:30:12.427",
      "ctrl": null,
      "left": false,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "cart"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-09-06T02:30:12.427",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:1037",
    "@version": 1,
    "@class": "Event",
    "eventId": 11039,
    "createUserId": "w.ding",
    "data": {
      "path": "/page/org.clinical3po.backendservices-v-cart-home",
      "tpl": null,
      "updateDate": "2015-09-06T02:37:08.010",
      "ctrl": null,
      "left": false,
      "updateUserId": "w.ding",
      "roles": [
        "anonymous",
        "user"
      ],
      "host": "example",
      "menuItemId": "cart"
    },
    "name": "updMenuItem",
    "category": "menu",
    "createDate": "2015-09-06T02:37:08.010",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Computer Component",
      "createUserId": "w.ding",
      "catalogId": "computer",
      "createDate": "2015-09-25T02:32:54.765"
    },
    "name": "addCatalog",
    "category": "catalog",
    "createDate": "2015-09-25T02:32:54.765",
    "catalogId": "IP3C-AEvQB6mMbh7LMJH4w",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Computer Case",
      "createUserId": "w.ding",
      "catalogId": "case",
      "in_Own": [
        "computer"
      ],
      "createDate": "2015-09-25T02:33:25.915"
    },
    "name": "addCatalog",
    "category": "catalog",
    "createDate": "2015-09-25T02:33:25.915",
    "catalogId": "aaEwp3FPSa-gZPzLJpRgWw",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Hard Drive",
      "createUserId": "w.ding",
      "catalogId": "hardDrive",
      "in_Own": [
        "computer"
      ],
      "createDate": "2015-09-25T02:33:49.007"
    },
    "name": "addCatalog",
    "category": "catalog",
    "createDate": "2015-09-25T02:33:49.007",
    "catalogId": "rD_YooyzQ9uI_Eu2uh5evA",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Desktop Case",
      "createUserId": "w.ding",
      "catalogId": "desktopCase",
      "in_Own": [
        "case"
      ],
      "createDate": "2015-09-25T02:34:11.850"
    },
    "name": "addCatalog",
    "category": "catalog",
    "createDate": "2015-09-25T02:34:11.850",
    "catalogId": "xHv-1FiaRlK4ykf4DsY79A",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "w.ding",
    "data": {
      "host": "example",
      "description": "Server Case",
      "createUserId": "w.ding",
      "catalogId": "serverCase",
      "in_Own": [
        "case"
      ],
      "createDate": "2015-09-25T02:34:29.776"
    },
    "name": "addCatalog",
    "category": "catalog",
    "createDate": "2015-09-25T02:34:29.776",
    "catalogId": "HCQp0DTaS4eL7jWj7yuqTw",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "dqGTGzAcSAOYWujmWmnGLA",
      "name": "HP",
      "host": "example",
      "description": "HP Computer",
      "variants": [
        {
          "sku": "1001",
          "price": 1290,
          "type": "Desktop",
          "image": "1.png",
          "inventory": 12,
          "weight": 22,
          "height": 20,
          "width": 6,
          "length": 14
        },
        {
          "sku": "1002",
          "price": 890,
          "type": "Laptop",
          "image": "2.png",
          "inventory": 3,
          "weight": 5.8,
          "height": 2,
          "width": 15,
          "length": 8
        }
      ],
      "in_HasProduct": [
        "computer"
      ],
      "createDate": "2015-09-25T02:02:53.507"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:02:53.507",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "5E_MKOQdR3qENvnNwG-T-g",
      "name": "IBM Computer",
      "host": "example",
      "description": "IBM Computer is the best in the world",
      "variants": [
        {
          "sku": "2001",
          "price": 1390,
          "type": "Desktop",
          "image": "3.png",
          "inventory": 2,
          "weight": 33,
          "height": 12,
          "width": 22,
          "length": 19
        }
      ],
      "in_HasProduct": [
        "computer"
      ],
      "createDate": "2015-09-25T02:04:39.210"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:04:39.210",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "x3EQMrqTSWaslqdvBvs6gg",
      "name": "Acer",
      "host": "example",
      "description": "Acer Case has most reasonable price",
      "variants": [
        {
          "sku": "3001",
          "price": 120,
          "type": "Desktop",
          "image": "4.png",
          "inventory": 22,
          "weight": 11,
          "height": 12,
          "width": 29,
          "length": 12
        }
      ],
      "in_HasProduct": [
        "case"
      ],
      "createDate": "2015-09-25T02:06:13.597"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:06:13.597",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "8mrI0DmoSCGMcdlX1E2zRQ",
      "name": "Dell",
      "host": "example",
      "description": "Dell Desktop Case",
      "variants": [
        {
          "sku": "4001",
          "price": 100,
          "type": "Black",
          "image": "5.png",
          "inventory": 11,
          "weight": 29,
          "height": 12,
          "width": 14,
          "length": 9
        },
        {
          "sku": "4002",
          "price": 100,
          "type": "White",
          "image": "6.png",
          "inventory": 22,
          "weight": 12,
          "height": 12,
          "width": 23,
          "length": 4
        }
      ],
      "in_HasProduct": [
        "desktopCase"
      ],
      "createDate": "2015-09-25T02:08:25.150"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:08:25.150",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "dp48Gjz9SligBuKo-LqEAg",
      "name": "Sun",
      "host": "example",
      "description": "Sun Server Case",
      "variants": [
        {
          "sku": "5001",
          "price": 234,
          "type": "USB",
          "image": "7.png",
          "inventory": 1,
          "weight": 129,
          "height": 22,
          "width": 11,
          "length": 8
        },
        {
          "sku": "5002",
          "price": 883,
          "type": "SCSI",
          "image": "8.png",
          "inventory": 23,
          "weight": 299,
          "height": 19,
          "width": 34,
          "length": 8
        }
      ],
      "in_HasProduct": [
        "serverCase"
      ],
      "createDate": "2015-09-25T02:10:37.631"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:10:37.631",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "w.ding",
    "data": {
      "createUserId": "w.ding",
      "productId": "pu9Hn3vLSgmcfdECwJsHig",
      "name": "Seagate",
      "host": "example",
      "description": "Seagate Drive",
      "variants": [
        {
          "sku": "6001",
          "price": 123,
          "type": "Disk",
          "image": "8.png",
          "inventory": 11,
          "weight": 1.3,
          "height": 1.5,
          "width": 12,
          "length": 10
        },
        {
          "sku": "6002",
          "price": 345,
          "type": "SSD",
          "image": "9.png",
          "inventory": 11,
          "weight": 6,
          "height": 9,
          "width": 6,
          "length": 6
        }
      ],
      "in_HasProduct": [
        "hardDrive"
      ],
      "createDate": "2015-09-25T02:12:15.688"
    },
    "name": "addProduct",
    "category": "catalog",
    "createDate": "2015-09-25T02:12:15.688",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
