#!/bin/bash
#
# Starts an Oozie server
#
# chkconfig: 345 85 15
# description: Oozie Server
#
### BEGIN INIT INFO
# Provides:          oozie-server
# Short-Description: Oozie Server
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:
# Should-Stop:
### END INIT INFO

. /lib/lsb/init-functions
export JAVA_HOME=/usr/java/default

RETVAL_SUCCESS=0

STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_DEAD_AND_LOCK=2
STATUS_NOT_RUNNING=3
STATUS_OTHER_ERROR=102


ERROR_PROGRAM_NOT_INSTALLED=5
ERROR_PROGRAM_NOT_CONFIGURED=6


RETVAL=0
SLEEP_TIME=5
PROC_NAME="java"

DAEMON="oozie"
DESC="Oozie server"
EXEC_PATH="/usr/hdp/current/oozie-server/bin/oozied.sh"
SVC_USER="oozie"
DAEMON_FLAGS=""
PIDFILE="/var/run/oozie/oozie.pid"
WORKING_DIR="/var/lib/oozie"

install -d -m 0755 -o hive -g hive /var/lib/hive 1>/dev/null 2>&1 || :
start() {
    [ -x $EXE_FILE ] || exit $ERROR_PROGRAM_NOT_INSTALLED
    log_success_msg "Starting $DESC (${DAEMON}): "

    checkstatusofproc
    status=$?
    if [ "$status" -eq "$STATUS_RUNNING" ]; then
        log_success_msg "${DESC} is running"
        exit 0
    fi

    LOG_FILE=/var/log/oozie/${DAEMON}.out
    (su -s /bin/bash $SVC_USER -c "$EXEC_PATH start") 2>&1 > $LOG_FILE
    sleep 3

    checkstatusofproc
    RETVAL=$?
    return $RETVAL
}

stop() {
    log_success_msg "Stopping $DESC (${DAEMON}): "

    su -s /bin/bash $SVC_USER -c "$EXEC_PATH stop"
    RETVAL=$?
    return $RETVAL
}

restart() {
  stop
  start
}

checkstatusofproc(){
  pidofproc -p $PIDFILE $PROC_NAME > /dev/null
}

checkstatus(){
  checkstatusofproc
  status=$?

  case "$status" in
    $STATUS_RUNNING)
      log_success_msg "${DESC} is running"
      ;;
    $STATUS_DEAD)
      log_failure_msg "${DESC} is dead and pid file exists"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_failure_msg "${DESC} is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_failure_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $status
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      start
      ;;
    stop)
      check_for_root
      stop
      ;;
    status)
      checkstatus
      RETVAL=$?
      ;;
    restart)
      check_for_root
      restart
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart}"
      exit 1
  esac
}

service "$1"

exit $RETVAL
