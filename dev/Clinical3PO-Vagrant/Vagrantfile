#  Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements.  See the NOTICE file distributed with
#   this work for additional information regarding copyright ownership.
#   The ASF licenses this file to You under the Apache License, Version 2.0
#   (the "License"); you may not use this file except in compliance with
#   the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

require 'json'

VAGRANTFILE_API_VERSION = "2"

# HDP Cluster Planning setup search path:
$planning_path = ["current.planning",
                 "hdp_cluster_planning/2nodes-noambari.setup"]

###############################################################################
# Loads a hdp cluster planning setup file, which is a JSON file describing a specific configuation.
#
# The user should create a symlink from current.planning to the desired
# planning
def loadPlanning()
  $planning_path.each { |file| 
    if file and File.file?(file)
      puts "Loading cluster planning setup file %s\n" % [File.realpath(file)]
      return JSON.parse( IO.read( file ), opts = { symbolize_names: true } )
    end
  }
end

# Pull the HDP version out of the hdp.repo file
def findVersion()
  fileObj = File.new('files/etc/repos/hdp.repo', 'r')
  match = /^#VERSION_NUMBER=(?<ver>[-0-9.]*)/.match(fileObj.gets)
  fileObj.close()
  result = match['ver']
  puts "HDP Version = %s\n" % result
  return result
end

###############################################################################
# Define cluster

planning = loadPlanning()
hdp_version = findVersion()
rpm_version = hdp_version.gsub /[.-]/, '_'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  if Vagrant.has_plugin?("vagrant-cachier")
    # Configure cached packages to be shared between instances of the same base box.
    config.cache.scope = :box
  end

  # All Vagrant configuration is done here. The most common configuration
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "Clinical3PO/vagrant-c3po-centos-67"

  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", planning[:vm_mem] ]
  end

  config.vm.provider :vmware_fusion do |vm|
    vm.vmx["memsize"] = planning[:vm_mem]
  end


  planning[:nodes].each do |node|
    config.vm.define node[:hostname] do |node_config|
      node_config.vm.hostname = node[:hostname] + "." + planning[:domain]
      node_config.vm.network :private_network, ip: node[:ip], 
        virtualbox__intnet: true
      node_config.ssh.forward_agent = true
      node_config.ssh.username = "c3po"
      node_config.ssh.password = "%CannonStreetHospital%"
      if node[:hostname] == 'clinical3po-gw'
        node_config.vm.network "forwarded_port", guest: 8080, guest_id: node[:ip], host: 8181, 
                protocol: "tcp", 
                auto_correct: true
        node_config.vm.network "forwarded_port", guest: 80, guest_id: node[:ip], host: 8888, 
                protocol: "tcp", 
                auto_correct: true
        node_config.vm.network "forwarded_port", guest: 8088, guest_id: node[:ip], host: 8088, 
                protocol: "tcp", 
                auto_correct: true
      else if node[:hostname] == 'clinical3po-nn'
             node_config.vm.network "forwarded_port", guest: 8844, guest_id: node[:ip], host: 8844, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 8020, guest_id: node[:ip], host: 8020, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50070, guest_id: node[:ip], host: 50070, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50475, guest_id: node[:ip], host: 50475, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50075, guest_id: node[:ip], host: 50075, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50090, guest_id: node[:ip], host: 50090, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50105, guest_id: node[:ip], host: 50105, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50030, guest_id: node[:ip], host: 50030, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 50060, guest_id: node[:ip], host: 50060, 
                    protocol: "tcp", 
                    auto_correct: true
             node_config.vm.network "forwarded_port", guest: 19888, guest_id: node[:ip], host: 19888, 
                    protocol: "tcp", 
                    auto_correct: true
           end
      end
            
      # Install puppet modules
      config.vm.provision :shell, path: 'bootstrap.sh', args: %w(
          puppetlabs-stdlib
          puppetlabs/vcsrepo
      )

      node_config.vm.provision "puppet" do |puppet|
        #puppet.manifests_path = "puppet/manifests"
        #puppet.manifest_file = "default.pp"
        #puppet.module_path = "puppet/modules"
        puppet.module_path = "modules"
        puppet.options = ["--libdir", "/vagrant", 
	    "--verbose", "--debug",
            "--fileserverconfig=/vagrant/fileserver.conf"]
        puppet.facter = {
          "hostname" => node[:hostname],
          "roles" => node[:roles],
          "nodes" => planning[:nodes],
   	      "hdp_version" => hdp_version,
	      "rpm_version" => rpm_version,
          "domain" => planning[:domain],
          "security" => planning[:security],
          "realm" => planning[:realm],
          "clients" => planning[:clients],
          "server_mem" => planning[:server_mem],
          "client_mem" => planning[:client_mem],
          "planning" => planning
        }
      end
    end
  end

end
