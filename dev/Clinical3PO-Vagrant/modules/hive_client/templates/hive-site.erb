<%#
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-%>
<% @metastores =
     eval(@nodes).select {|node| node[:roles].include? 'hive-meta'}.
       map {|node| node[:hostname]};
   @is_metastore = @metastores.include? @hostname;
   @dblist = eval(@nodes).select {|node| node[:roles].include? 'hive-db'};
   @db = (@dblist.size == 0 ? "unknown" : @dblist[0][:hostname]) +"."+ @domain;
 -%>
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
<% if @metastores.length > 0 -%>
  <property>
    <name>hive.metastore.uris</name>
    <value><%= @metastores.map {|host| "thrift://" + host + "." + @domain +
                                ":9083"}.join(',')%></value>
    <description>URI for client to contact metastore server</description>
  </property>
<% end %>

<% if @is_metastore -%>
  <property>
    <name>javax.jdo.option.ConnectionDriverName</name>
    <value>com.mysql.jdbc.Driver</value>
    <description>Driver class name for a JDBC metastore</description>
  </property>

  <property>
    <name>javax.jdo.option.ConnectionURL</name>
    <value>jdbc:mysql://<%= @db %>:3306/hive?createDatabaseIfNotExist=true</value>
    <description>JDBC connect string for a JDBC metastore</description>
  </property>
  
  <property>
    <name>javax.jdo.option.ConnectionUserName</name>
    <value>hive</value>
    <description>username to use against metastore database</description>
  </property>

  <property>
    <name>javax.jdo.option.ConnectionPassword</name>
    <value>PWc3po</value>
    <description>password to use against metastore database</description>
  </property>

  <property>
    <name>hive.compactor.initiator.on</name>
    <value>true</value>
  </property>

  <property>
    <name>hive.compactor.worker.threads</name>
    <value>1</value>
  </property>
<% end -%>

  <property>
    <name>hive.metastore.sasl.enabled</name>
    <value><%= @security %></value>
    <description>If true, the metastore thrift interface will be secured with 
      SASL. Clients must authenticate with Kerberos.</description>
  </property>

  <property>
    <name>hive.security.authorization.enabled</name>
    <value>true</value>
    <description>enable or disable the hive client authorization</description>
  </property>

  <property>
    <name>hive.metastore.execute.setugi</name>
    <value>true</value>
  </property>

  <property>
    <name>hive.security.authorization.manager</name>
    <value>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</value>
    <description>the hive client authorization manager class name.
      The user defined authorization class should implement interface 
       HiveAuthorizationProvider.
    </description>
  </property>

<% if @security == "true" -%>
  <property>
    <name>hive.metastore.kerberos.keytab.file</name>
    <value><%= scope.lookupvar('hdfs_client::keytab_dir') %>/hive.keytab</value>
    <description>The path to the Kerberos Keytab file containing the 
      metastore thrift server's service principal.</description>
  </property>

  <property>
    <name>hive.metastore.kerberos.principal</name>
    <value>hive/_HOST@<%= @realm %></value>
    <description>The service principal for the metastore thrift server. The 
       special string _HOST will be replaced automatically with the correct
       host name.</description>
  </property>
<% end -%>

  <property>
    <name>hive.metastore.warehouse.dir</name>
    <value>/apps/hive/warehouse</value>
    <description>location of default database for the warehouse</description>
  </property>

  <property>
    <name>hive.metastore.cache.pinobjtypes</name>
    <value>Table,Database,Type,FieldSchema,Order</value>
    <description>List of comma separated metastore object types that should be
       pinned in the cache</description>
  </property>
  
  <property>
    <name>hadoop.clientside.fs.operations</name>
    <value>true</value>
    <description>FS operations are owned by client</description>
  </property>

  <property>
    <name>hive.metastore.client.socket.timeout</name>
    <value>60</value>
    <description>MetaStore Client socket timeout in seconds</description>
  </property>

  <property>
    <name>hive.optimize.ppd.storage</name>
    <value>true</value>
  </property>

  <property>
    <name>datanucleus.autoStartMechanism</name>
    <value>SchemaTable</value>
  </property>

  <property>
    <name>datanucleus.autoCreateSchema</name>
    <value>false</value>
  </property>

  <property>
    <name>hive.support.concurrency</name>
    <value>true</value>
  </property>

  <property>
    <name>hive.txn.manager</name>
    <value>org.apache.hadoop.hive.ql.lockmgr.DbTxnManager</value>
  </property>

  <property>
    <name>hive.exec.dynamic.partition.mode</name>
    <value>nonstrict</value>
  </property>

  <property>
    <name>hive.enforce.bucketing</name>
    <value>true</value>
  </property>

</configuration>
